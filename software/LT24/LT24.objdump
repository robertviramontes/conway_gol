
LT24.elf:     file format elf32-littlenios2
LT24.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040240

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000278f4 memsz 0x000278f4 flags r-x
    LOAD off    0x00028914 vaddr 0x00067914 paddr 0x00069bc0 align 2**12
         filesz 0x000022ac memsz 0x000022ac flags rw-
    LOAD off    0x0002ae6c vaddr 0x0006be6c paddr 0x0006be6c align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d564  00040240  00040240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0001a170  0004d7a4  0004d7a4  0000e7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000022ac  00067914  00069bc0  00028914  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  0006be6c  0006be6c  0002ae6c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0006bfc4  0006bfc4  0002abc0  2**0
                  CONTENTS
  7 .comment      00000039  00000000  00000000  0002abc0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000bb8  00000000  00000000  0002ac00  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000153b3  00000000  00000000  0002b7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000635f  00000000  00000000  00040b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007c37  00000000  00000000  00046eca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002494  00000000  00000000  0004eb04  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004a08  00000000  00000000  00050f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00009584  00000000  00000000  000559a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0005ef24  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b10  00000000  00000000  0005ef88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000646eb  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000646ee  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000646fa  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000646fb  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000646fc  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00064700  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00064704  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00064708  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00064711  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0006471a  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  00064723  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000053  00000000  00000000  0006472c  2**0
                  CONTENTS, READONLY
 29 .jdi          000040c7  00000000  00000000  0006477f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000755a6  00000000  00000000  00068846  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040240 l    d  .text	00000000 .text
0004d7a4 l    d  .rodata	00000000 .rodata
00067914 l    d  .rwdata	00000000 .rwdata
0006be6c l    d  .bss	00000000 .bss
0006bfc4 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../LT24_bsp//obj/HAL/src/crt0.o
00040288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 tahomabold_20.c
0004d7a4 l     O .rodata	000000b6 tahomabold_20_33
0004d85a l     O .rodata	00000104 tahomabold_20_34
0004d95e l     O .rodata	000001a0 tahomabold_20_35
0004dafe l     O .rodata	00000152 tahomabold_20_36
0004dc50 l     O .rodata	00000270 tahomabold_20_37
0004dec0 l     O .rodata	000001ba tahomabold_20_38
0004e07a l     O .rodata	0000009c tahomabold_20_39
0004e116 l     O .rodata	000000ea tahomabold_20_40
0004e200 l     O .rodata	000000ea tahomabold_20_41
0004e2ea l     O .rodata	00000152 tahomabold_20_42
0004e43c l     O .rodata	000001a0 tahomabold_20_43
0004e5dc l     O .rodata	0000009c tahomabold_20_44
0004e678 l     O .rodata	000000ea tahomabold_20_45
0004e762 l     O .rodata	0000009c tahomabold_20_46
0004e7fe l     O .rodata	00000138 tahomabold_20_47
0004e936 l     O .rodata	00000152 tahomabold_20_48
0004ea88 l     O .rodata	00000152 tahomabold_20_49
0004ebda l     O .rodata	00000152 tahomabold_20_50
0004ed2c l     O .rodata	00000152 tahomabold_20_51
0004ee7e l     O .rodata	00000152 tahomabold_20_52
0004efd0 l     O .rodata	00000152 tahomabold_20_53
0004f122 l     O .rodata	00000152 tahomabold_20_54
0004f274 l     O .rodata	00000152 tahomabold_20_55
0004f3c6 l     O .rodata	00000152 tahomabold_20_56
0004f518 l     O .rodata	00000152 tahomabold_20_57
0004f66a l     O .rodata	000000b6 tahomabold_20_58
0004f720 l     O .rodata	000000b6 tahomabold_20_59
0004f7d6 l     O .rodata	000001a0 tahomabold_20_60
0004f976 l     O .rodata	000001a0 tahomabold_20_61
0004fb16 l     O .rodata	000001a0 tahomabold_20_62
0004fcb6 l     O .rodata	0000011e tahomabold_20_63
0004fdd4 l     O .rodata	000001d4 tahomabold_20_64
0004ffa8 l     O .rodata	0000016c tahomabold_20_65
00050114 l     O .rodata	0000016c tahomabold_20_66
00050280 l     O .rodata	00000152 tahomabold_20_67
000503d2 l     O .rodata	00000186 tahomabold_20_68
00050558 l     O .rodata	00000138 tahomabold_20_69
00050690 l     O .rodata	00000138 tahomabold_20_70
000507c8 l     O .rodata	00000186 tahomabold_20_71
0005094e l     O .rodata	00000186 tahomabold_20_72
00050ad4 l     O .rodata	00000104 tahomabold_20_73
00050bd8 l     O .rodata	00000104 tahomabold_20_74
00050cdc l     O .rodata	0000016c tahomabold_20_75
00050e48 l     O .rodata	0000011e tahomabold_20_76
00050f66 l     O .rodata	000001d4 tahomabold_20_77
0005113a l     O .rodata	00000186 tahomabold_20_78
000512c0 l     O .rodata	00000186 tahomabold_20_79
00051446 l     O .rodata	00000152 tahomabold_20_80
00051598 l     O .rodata	00000186 tahomabold_20_81
0005171e l     O .rodata	00000186 tahomabold_20_82
000518a4 l     O .rodata	00000152 tahomabold_20_83
000519f6 l     O .rodata	00000138 tahomabold_20_84
00051b2e l     O .rodata	00000186 tahomabold_20_85
00051cb4 l     O .rodata	0000016c tahomabold_20_86
00051e20 l     O .rodata	00000222 tahomabold_20_87
00052042 l     O .rodata	0000016c tahomabold_20_88
000521ae l     O .rodata	0000016c tahomabold_20_89
0005231a l     O .rodata	00000138 tahomabold_20_90
00052452 l     O .rodata	000000ea tahomabold_20_91
0005253c l     O .rodata	00000138 tahomabold_20_92
00052674 l     O .rodata	000000ea tahomabold_20_93
0005275e l     O .rodata	000001a0 tahomabold_20_94
000528fe l     O .rodata	00000152 tahomabold_20_95
00052a50 l     O .rodata	0000011e tahomabold_20_96
00052b6e l     O .rodata	00000138 tahomabold_20_97
00052ca6 l     O .rodata	00000152 tahomabold_20_98
00052df8 l     O .rodata	0000011e tahomabold_20_99
00052f16 l     O .rodata	00000152 tahomabold_20_100
00053068 l     O .rodata	00000138 tahomabold_20_101
000531a0 l     O .rodata	000000d0 tahomabold_20_102
00053270 l     O .rodata	00000152 tahomabold_20_103
000533c2 l     O .rodata	00000152 tahomabold_20_104
00053514 l     O .rodata	0000009c tahomabold_20_105
000535b0 l     O .rodata	000000ea tahomabold_20_106
0005369a l     O .rodata	00000138 tahomabold_20_107
000537d2 l     O .rodata	0000009c tahomabold_20_108
0005386e l     O .rodata	000001ee tahomabold_20_109
00053a5c l     O .rodata	00000152 tahomabold_20_110
00053bae l     O .rodata	00000138 tahomabold_20_111
00053ce6 l     O .rodata	00000152 tahomabold_20_112
00053e38 l     O .rodata	00000152 tahomabold_20_113
00053f8a l     O .rodata	000000ea tahomabold_20_114
00054074 l     O .rodata	00000104 tahomabold_20_115
00054178 l     O .rodata	000000d0 tahomabold_20_116
00054248 l     O .rodata	00000152 tahomabold_20_117
0005439a l     O .rodata	00000138 tahomabold_20_118
000544d2 l     O .rodata	000001d4 tahomabold_20_119
000546a6 l     O .rodata	00000138 tahomabold_20_120
000547de l     O .rodata	00000138 tahomabold_20_121
00054916 l     O .rodata	0000011e tahomabold_20_122
00054a34 l     O .rodata	00000138 tahomabold_20_123
00054b6c l     O .rodata	00000152 tahomabold_20_124
00054cbe l     O .rodata	00000138 tahomabold_20_125
00054df6 l     O .rodata	000001a0 tahomabold_20_126
00000000 l    df *ABS*	00000000 tahomabold_32.c
00054f96 l     O .rodata	000001b8 tahomabold_32_33
0005514e l     O .rodata	00000280 tahomabold_32_34
000553ce l     O .rodata	00000410 tahomabold_32_35
000557de l     O .rodata	00000320 tahomabold_32_36
00055afe l     O .rodata	000005f0 tahomabold_32_37
000560ee l     O .rodata	00000410 tahomabold_32_38
000564fe l     O .rodata	00000168 tahomabold_32_39
00056666 l     O .rodata	00000258 tahomabold_32_40
000568be l     O .rodata	00000258 tahomabold_32_41
00056b16 l     O .rodata	00000320 tahomabold_32_42
00056e36 l     O .rodata	00000410 tahomabold_32_43
00057246 l     O .rodata	00000190 tahomabold_32_44
000573d6 l     O .rodata	00000230 tahomabold_32_45
00057606 l     O .rodata	00000190 tahomabold_32_46
00057796 l     O .rodata	000002d0 tahomabold_32_47
00057a66 l     O .rodata	00000320 tahomabold_32_48
00057d86 l     O .rodata	00000320 tahomabold_32_49
000580a6 l     O .rodata	00000320 tahomabold_32_50
000583c6 l     O .rodata	00000320 tahomabold_32_51
000586e6 l     O .rodata	00000320 tahomabold_32_52
00058a06 l     O .rodata	00000320 tahomabold_32_53
00058d26 l     O .rodata	00000320 tahomabold_32_54
00059046 l     O .rodata	00000320 tahomabold_32_55
00059366 l     O .rodata	00000320 tahomabold_32_56
00059686 l     O .rodata	00000320 tahomabold_32_57
000599a6 l     O .rodata	000001e0 tahomabold_32_58
00059b86 l     O .rodata	000001e0 tahomabold_32_59
00059d66 l     O .rodata	00000410 tahomabold_32_60
0005a176 l     O .rodata	00000410 tahomabold_32_61
0005a586 l     O .rodata	00000410 tahomabold_32_62
0005a996 l     O .rodata	000002d0 tahomabold_32_63
0005ac66 l     O .rodata	00000488 tahomabold_32_64
0005b0ee l     O .rodata	00000370 tahomabold_32_65
0005b45e l     O .rodata	00000370 tahomabold_32_66
0005b7ce l     O .rodata	00000348 tahomabold_32_67
0005bb16 l     O .rodata	000003c0 tahomabold_32_68
0005bed6 l     O .rodata	00000320 tahomabold_32_69
0005c1f6 l     O .rodata	000002f8 tahomabold_32_70
0005c4ee l     O .rodata	000003c0 tahomabold_32_71
0005c8ae l     O .rodata	000003c0 tahomabold_32_72
0005cc6e l     O .rodata	00000258 tahomabold_32_73
0005cec6 l     O .rodata	00000280 tahomabold_32_74
0005d146 l     O .rodata	00000398 tahomabold_32_75
0005d4de l     O .rodata	000002d0 tahomabold_32_76
0005d7ae l     O .rodata	00000488 tahomabold_32_77
0005dc36 l     O .rodata	000003e8 tahomabold_32_78
0005e01e l     O .rodata	000003e8 tahomabold_32_79
0005e406 l     O .rodata	00000348 tahomabold_32_80
0005e74e l     O .rodata	000003e8 tahomabold_32_81
0005eb36 l     O .rodata	000003c0 tahomabold_32_82
0005eef6 l     O .rodata	00000320 tahomabold_32_83
0005f216 l     O .rodata	00000320 tahomabold_32_84
0005f536 l     O .rodata	000003c0 tahomabold_32_85
0005f8f6 l     O .rodata	00000370 tahomabold_32_86
0005fc66 l     O .rodata	00000528 tahomabold_32_87
0006018e l     O .rodata	00000370 tahomabold_32_88
000604fe l     O .rodata	00000370 tahomabold_32_89
0006086e l     O .rodata	00000320 tahomabold_32_90
00060b8e l     O .rodata	00000258 tahomabold_32_91
00060de6 l     O .rodata	000002d0 tahomabold_32_92
000610b6 l     O .rodata	00000258 tahomabold_32_93
0006130e l     O .rodata	00000410 tahomabold_32_94
0006171e l     O .rodata	00000320 tahomabold_32_95
00061a3e l     O .rodata	000002a8 tahomabold_32_96
00061ce6 l     O .rodata	000002f8 tahomabold_32_97
00061fde l     O .rodata	00000320 tahomabold_32_98
000622fe l     O .rodata	000002a8 tahomabold_32_99
000625a6 l     O .rodata	00000320 tahomabold_32_100
000628c6 l     O .rodata	000002f8 tahomabold_32_101
00062bbe l     O .rodata	00000230 tahomabold_32_102
00062dee l     O .rodata	00000320 tahomabold_32_103
0006310e l     O .rodata	00000320 tahomabold_32_104
0006342e l     O .rodata	00000190 tahomabold_32_105
000635be l     O .rodata	00000208 tahomabold_32_106
000637c6 l     O .rodata	000002f8 tahomabold_32_107
00063abe l     O .rodata	00000190 tahomabold_32_108
00063c4e l     O .rodata	000004d8 tahomabold_32_109
00064126 l     O .rodata	00000320 tahomabold_32_110
00064446 l     O .rodata	00000320 tahomabold_32_111
00064766 l     O .rodata	00000320 tahomabold_32_112
00064a86 l     O .rodata	00000320 tahomabold_32_113
00064da6 l     O .rodata	00000230 tahomabold_32_114
00064fd6 l     O .rodata	00000280 tahomabold_32_115
00065256 l     O .rodata	00000208 tahomabold_32_116
0006545e l     O .rodata	00000320 tahomabold_32_117
0006577e l     O .rodata	000002f8 tahomabold_32_118
00065a76 l     O .rodata	00000460 tahomabold_32_119
00065ed6 l     O .rodata	000002f8 tahomabold_32_120
000661ce l     O .rodata	000002d0 tahomabold_32_121
0006649e l     O .rodata	000002a8 tahomabold_32_122
00066746 l     O .rodata	00000320 tahomabold_32_123
00066a66 l     O .rodata	00000320 tahomabold_32_124
00066d86 l     O .rodata	00000320 tahomabold_32_125
000670a6 l     O .rodata	00000410 tahomabold_32_126
00000000 l    df *ABS*	00000000 geometry.c
00000000 l    df *ABS*	00000000 ILI9341.c
00000000 l    df *ABS*	00000000 simple_graphics.c
00000000 l    df *ABS*	00000000 simple_text.c
00000000 l    df *ABS*	00000000 gui.c
0006be6c l     O .bss	00000004 x.3925
00069b80 l     O .rwdata	00000004 y.3926
00000000 l    df *ABS*	00000000 gui_vpg.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 touch_spi.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000477f4 l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
000694c0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0004a638 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
0004ac00 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0004bc90 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00069b9c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0004c0a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004c1e4 l     F .text	00000038 alt_dev_reg
000699a8 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004c6d4 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0004c924 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0004ca80 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004caac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004cd24 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0004ce5c l     F .text	00000050 alt_get_errno
0004ceac l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0006be98 g     O .bss	00000004 alt_instruction_exception_handler
00041d00 g     F .text	00000078 vid_draw_horiz_line
0004562c g     F .text	00000124 I2C_Read
00040800 g     F .text	0000006c LCD_DrawPoint
0004bd74 g     F .text	00000078 alt_main
0004a5fc g     F .text	00000020 strcpy
0004a43c g     F .text	00000080 _puts_r
0006bec4 g     O .bss	00000100 alt_irq
00041e64 g     F .text	0000006c vid_color_convert16_24
0004738c g     F .text	0000014c sqrt
000463cc g     F .text	000000a0 I2CL_Read16
00069bc0 g       *ABS*	00000000 __flash_rwdata_start
00046d84 g     F .text	00000164 touch_enable_penirq
0006bfc4 g       *ABS*	00000000 __alt_heap_start
00046788 g     F .text	00000064 QUEUE_IsFull
00040ed8 g     F .text	00000138 LCD_Pattern_Horizon
0004a3f0 g     F .text	0000004c printf
00044274 g     F .text	000001dc GUI_DeskInit
0004be0c g     F .text	00000020 __malloc_unlock
00041954 g     F .text	00000150 vid_draw_box
0004063c g     F .text	00000044 PtCopy
0004379c g     F .text	0000025c vid_print_string_alpha
0004b7c4 g     F .text	0000006c memmove
00069094 g     O .rwdata	00000415 cour10_font_array
00041730 g     F .text	0000011c vid_move_block
0004d12c g     F .text	00000020 altera_nios2_gen2_irq_init
00049cb4 g     F .text	00000010 __errno
00046250 g     F .text	0000017c I2CL_MultipleWrite
000440c4 g     F .text	000000e0 vid_string_pixel_length_alpha
00045b38 g     F .text	00000160 i2c_write
0004b728 g     F .text	0000009c __sfvwrite_small_str
00040000 g     F .entry	0000001c __reset
000453b0 g     F .text	00000040 my_wait
00040020 g       *ABS*	00000000 __flash_exceptions_start
00040780 g     F .text	00000080 LCD_Clear
0006be7c g     O .bss	00000004 errno
00045750 g     F .text	00000178 I2C_Read16
0006be88 g     O .bss	00000004 alt_argv
00071b7c g       *ABS*	00000000 _gp
0004c078 g     F .text	00000030 usleep
00044b88 g     F .text	000000b0 VPG_ColorPanel
000439f8 g     F .text	00000148 seperate_color_channels
000699fc g     O .rwdata	00000180 alt_fd_list
0004d14c g     F .text	00000090 alt_find_dev
0004a36c g     F .text	00000028 memcpy
00049b38 g     F .text	000000d0 .hidden __floatsidf
00042664 g     F .text	00000758 vid_round_corner_points
00046ab0 g     F .text	00000068 Touch_UnInit
0004cde4 g     F .text	00000078 alt_io_redirect
00048a58 g     F .text	000000ec .hidden __ltdf2
0004d7a4 g       *ABS*	00000000 __DTOR_END__
00044450 g     F .text	00000090 GUI_CheckButton
0004a4bc g     F .text	00000014 puts
0004cc84 g     F .text	000000a0 alt_exception_cause_generated_bad_addr
000410f0 g     F .text	00000060 vid_clean_screen
00047784 g     F .text	00000068 __fpclassifyd
00046748 g     F .text	00000040 QUEUE_IsEmpty
0004125c g     F .text	00000154 vid_scroll_string_init
0004c360 g     F .text	000000e4 altera_avalon_jtag_uart_read
00049cc4 g     F .text	00000014 malloc
0004a3b4 g     F .text	0000003c _printf_r
00046940 g     F .text	00000170 Touch_Init
000478f8 g     F .text	00000008 .hidden __udivsi3
0004b280 g     F .text	00000040 vsnprintf
000444e0 g     F .text	00000238 GUI_DeskDraw
0004d3a4 g     F .text	0000008c alt_icache_flush
000458c8 g     F .text	0000017c I2C_MultipleRead
0006be78 g     O .bss	00000004 __malloc_top_pad
00046910 g     F .text	00000030 QUEUE_Empty
00046880 g     F .text	00000090 QUEUE_Pop
0004a4d0 g     F .text	00000050 _sbrk_r
00046d14 g     F .text	00000030 touch_empty_fifo
00040554 g     F .text	00000034 RectHeight
00069bb8 g     O .rwdata	00000004 alt_max_fd
00044b64 g     F .text	00000024 VPG_XLine
0006be74 g     O .bss	00000004 __malloc_max_sbrked_mem
00045f28 g     F .text	00000168 I2CL_Read
000684d4 g     O .rwdata	00000bc0 tahomabold_32
00047908 g     F .text	0000087c .hidden __adddf3
000447a4 g     F .text	00000080 GUI_ClearPaintArea
00040310 g     F .text	00000040 PtSet
00069b84 g     O .rwdata	00000004 __fdlib_version
00069b88 g     O .rwdata	00000004 _global_impure_ptr
00042170 g     F .text	0000013c vid_draw_circle
0006bfc4 g       *ABS*	00000000 __bss_end
0004bba0 g     F .text	000000f0 alt_iic_isr_register
0004bf74 g     F .text	00000104 alt_tick
000454ec g     F .text	00000140 I2C_Write16
00040434 g     F .text	00000088 RectOffset
00041f10 g     F .text	00000260 vid_draw_sloped_line
00044d34 g     F .text	000000e4 VPG_VGrid
0004bb54 g     F .text	0000004c alt_ic_irq_enabled
000453f0 g     F .text	000000fc I2C_Write
000422ac g     F .text	000003b8 vid_draw_round_corner_box
0004bedc g     F .text	00000098 alt_alarm_stop
0006be80 g     O .bss	00000004 alt_irq_active
00041010 g     F .text	000000e0 LCD_Pattern_Vertical
000400fc g     F .exceptions	000000d0 alt_irq_handler
000699d4 g     O .rwdata	00000028 alt_dev_null
0004646c g     F .text	0000008c I2CL_Write16
00045a44 g     F .text	00000084 i2c_start
0004ca3c g     F .text	00000044 alt_dcache_flush_all
00047238 g     F .text	00000078 touch_alarm_callback
00049ab8 g     F .text	00000080 .hidden __fixdfsi
00046d44 g     F .text	00000040 touch_is_pen_pressed
00069bc0 g       *ABS*	00000000 __ram_rwdata_end
000431f0 g     F .text	000003a4 vid_draw_triangle
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
00069bb0 g     O .rwdata	00000008 alt_dev_list
0004c0f8 g     F .text	000000ec write
000694ac g     O .rwdata	00000014 szPallete
00043670 g     F .text	0000012c CropImage16
00067914 g       *ABS*	00000000 __ram_rodata_end
00048a58 g     F .text	000000ec .hidden __ledf2
000413b0 g     F .text	00000380 vid_scroll_string
00046528 g     F .text	0000006c myprintf
00046f18 g     F .text	00000320 touch_get_xy
00047900 g     F .text	00000008 .hidden __umodsi3
00046c9c g     F .text	00000078 touch_isr
00040520 g     F .text	00000034 RectWidth
00043594 g     F .text	000000dc CopyImage16
0006bfc4 g       *ABS*	00000000 end
0004521c g     F .text	000000ac GUI_VPG
00044a48 g     F .text	00000064 GUI_ShowInfo
000401cc g     F .exceptions	00000074 alt_instruction_exception_entry
00041aa4 g     F .text	000000f0 vid_print_char
0004d7a4 g       *ABS*	00000000 __CTOR_LIST__
00075b60 g       *ABS*	00000000 __alt_stack_pointer
0004c748 g     F .text	00000088 alt_avalon_timer_sc_init
00049c08 g     F .text	000000ac .hidden __clzsi2
0004c444 g     F .text	00000094 altera_avalon_jtag_uart_write
0004509c g     F .text	00000180 GUI_ShowPAT
00042e10 g     F .text	00000054 min3
00041150 g     F .text	000000cc vid_draw_line
0004ac6c g     F .text	00000538 ___vfprintf_internal_r
0004a520 g     F .text	00000064 _sprintf_r
0004b3e4 g     F .text	00000298 _free_r
000406cc g     F .text	000000b4 LCD_SetCursor
0004d5d8 g     F .text	00000198 __call_exitprocs
00044c38 g     F .text	000000fc VPG_Grid
00069b90 g     O .rwdata	00000004 __malloc_sbrk_base
00040240 g     F .text	0000004c _start
0006be90 g     O .bss	00000004 _alt_tick_rate
00046ee8 g     F .text	00000030 touch_clear_input
0004c4d8 g     F .text	000001fc alt_avalon_spi_command
000467ec g     F .text	00000094 QUEUE_Push
0006be94 g     O .bss	00000004 _alt_nticks
00042ec8 g     F .text	000000f0 vid_put_pixel_in_span_map
00044efc g     F .text	000001a0 VPG_ColorBar
0004c250 g     F .text	00000050 alt_sys_init
0004d494 g     F .text	00000144 __register_exitproc
00041c6c g     F .text	00000094 vid_paint_block
00067914 g       *ABS*	00000000 __ram_rwdata_start
0004d7a4 g       *ABS*	00000000 __ram_rodata_start
0006be9c g     O .bss	00000028 __malloc_current_mallinfo
00044e18 g     F .text	000000e4 VPG_HGrid
00041dc4 g     F .text	000000a0 vid_color_convert24_16
0004c2a0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004d2f0 g     F .text	000000b4 alt_get_fd
0004c7d0 g     F .text	00000154 alt_busy_sleep
00044824 g     F .text	00000224 GUI
00043cb0 g     F .text	00000254 alpha_blending
0004d464 g     F .text	00000030 memcmp
0006bfc4 g       *ABS*	00000000 __alt_stack_base
00048184 g     F .text	000008d4 .hidden __divdf3
000695a0 g     O .rwdata	00000408 __malloc_av_
0004b1c8 g     F .text	000000b8 _vsnprintf_r
00045ac8 g     F .text	00000070 i2c_stop
00048b44 g     F .text	000006ec .hidden __muldf3
0004d1dc g     F .text	00000114 alt_find_file
0004cafc g     F .text	000000a0 alt_dev_llist_insert
0004bdec g     F .text	00000020 __malloc_lock
00041ed0 g     F .text	00000040 vid_copy_line_to_frame_buffer
0004be2c g     F .text	000000b0 sbrk
0004a6a4 g     F .text	00000538 ___svfprintf_internal_r
0004b67c g     F .text	000000ac __sfvwrite_small_dev
000466a8 g     F .text	00000070 QUEUE_New
0006be6c g       *ABS*	00000000 __bss_start
0004086c g     F .text	0000066c LCD_Init
0004a394 g     F .text	00000020 memset
000452c8 g     F .text	000000e8 main
0006be8c g     O .bss	00000004 alt_envp
0006be70 g     O .bss	00000004 __malloc_max_total_mem
00046594 g     F .text	00000088 myprintf_hexarray
0004c300 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00044aac g     F .text	00000058 GUI_ShowTouchPoint
00045c98 g     F .text	00000150 i2c_read
00067914 g     O .rwdata	00000bc0 tahomabold_20
000477ec g     F .text	00000008 matherr
00075b60 g       *ABS*	00000000 __alt_heap_limit
00043f04 g     F .text	000001c0 vid_print_char_alpha
00069b7c g     O .rwdata	00000004 cour10_font
00049cec g     F .text	00000680 _malloc_r
00069bbc g     O .rwdata	00000004 alt_errno
00040588 g     F .text	000000b4 PtDistance
00040350 g     F .text	0000005c RectSet
00047864 g     F .text	00000048 .hidden __divsi3
00040680 g     F .text	0000004c Delay_Ms
000404bc g     F .text	00000064 RectCopy
0004b2c0 g     F .text	00000124 _malloc_trim_r
0004d7a4 g       *ABS*	00000000 __CTOR_END__
00043c70 g     F .text	00000040 read_from_frame
0004d7a4 g       *ABS*	00000000 __flash_rodata_start
0004d7a4 g       *ABS*	00000000 __DTOR_LIST__
00041c30 g     F .text	0000003c vid_get_pixel
0004c21c g     F .text	00000034 alt_irq_init
0004d0cc g     F .text	00000060 alt_release_fd
0004a584 g     F .text	00000078 sprintf
000677e1 g     O .rodata	00000100 .hidden __clz_tab
000464f8 g     F .text	00000030 debug_output
0004d430 g     F .text	00000014 atexit
0004b830 g     F .text	00000058 _write_r
0004028c g     F .text	00000084 IsPtInRect
00069b8c g     O .rwdata	00000004 _impure_ptr
0006be84 g     O .bss	00000004 alt_argc
0004cbf8 g     F .text	0000005c _do_dtors
0004661c g     F .text	0000008c myprintf_dwordarray
00046090 g     F .text	000001c0 I2CL_MultipleRead
00040020 g       .exceptions	00000000 alt_irq_entry
00046b50 g     F .text	0000014c Touch_GetXY
00069ba8 g     O .rwdata	00000008 alt_fs_list
0004abdc g     F .text	00000024 __vfprintf_internal_unused
0004184c g     F .text	00000108 vid_print_string
00040020 g       *ABS*	00000000 __ram_exceptions_start
000474d8 g     F .text	000002ac __ieee754_sqrt
0004b9c8 g     F .text	00000050 alt_ic_isr_register
00069bc0 g       *ABS*	00000000 _edata
0006bfc4 g       *ABS*	00000000 _end
00044b04 g     F .text	00000060 ShowInfo
00042dbc g     F .text	00000054 max3
00040240 g       *ABS*	00000000 __ram_exceptions_end
0004bab4 g     F .text	000000a0 alt_ic_irq_disable
00041d78 g     F .text	0000004c vid_merge_colors
00069b94 g     O .rwdata	00000004 __malloc_trim_threshold
0004d444 g     F .text	00000020 exit
00044718 g     F .text	0000008c IsContinuedPoint
000478ac g     F .text	0000004c .hidden __modsi3
00075b60 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00046718 g     F .text	00000030 QUEUE_Delete
000472b0 g     F .text	000000dc touch_xy_transform
00041b94 g     F .text	0000009c vid_set_pixel
0004d770 g     F .text	00000034 _exit
0004b888 g     F .text	00000140 alt_alarm_start
0004121c g     F .text	00000040 vid_scroll_string_quit
0004a61c g     F .text	0000001c strlen
0004cf78 g     F .text	00000154 open
000403ac g     F .text	00000088 RectInflate
0004cc54 g     F .text	00000030 alt_icache_flush_all
00069b98 g     O .rwdata	00000004 alt_priority_mask
0004ba18 g     F .text	0000009c alt_ic_irq_enable
0004b1a4 g     F .text	00000024 __vfprintf_internal
00049230 g     F .text	00000888 .hidden __subdf3
00042fb8 g     F .text	00000238 vid_bres_scan_edges
00069ba0 g     O .rwdata	00000008 alt_alarm_list
00042e64 g     F .text	00000064 max_diff3
0004cb9c g     F .text	0000005c _do_ctors
00045de8 g     F .text	00000140 I2CL_Write
000441a4 g     F .text	000000d0 GUI_ShowWelcome
00043b40 g     F .text	00000130 merge_color_channels
0004c974 g     F .text	000000c8 close
0004bcf4 g     F .text	00000080 alt_load
00046b18 g     F .text	00000038 Touch_EmptyFifo
00049cd8 g     F .text	00000014 free



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffca4a4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409014 	ori	at,at,576
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__reset-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401cc0 	call	401cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001726 	beq	r2,zero,40198 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00c001f4 	movhi	r3,7
   40140:	18efb104 	addi	r3,r3,-16700
   40144:	e0bffd17 	ldw	r2,-12(fp)
   40148:	100490fa 	slli	r2,r2,3
   4014c:	1885883a 	add	r2,r3,r2
   40150:	10800017 	ldw	r2,0(r2)
   40154:	010001f4 	movhi	r4,7
   40158:	212fb104 	addi	r4,r4,-16700
   4015c:	e0fffd17 	ldw	r3,-12(fp)
   40160:	180690fa 	slli	r3,r3,3
   40164:	20c7883a 	add	r3,r4,r3
   40168:	18c00104 	addi	r3,r3,4
   4016c:	18c00017 	ldw	r3,0(r3)
   40170:	1809883a 	mov	r4,r3
   40174:	103ee83a 	callr	r2
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40188:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4018c:	e0bffb17 	ldw	r2,-20(fp)
   40190:	103fe31e 	bne	r2,zero,40120 <__alt_data_end+0xfffca5c0>
   40194:	00000706 	br	401b4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40198:	e0bffc17 	ldw	r2,-16(fp)
   4019c:	1085883a 	add	r2,r2,r2
   401a0:	e0bffc15 	stw	r2,-16(fp)
      i++;
   401a4:	e0bffd17 	ldw	r2,-12(fp)
   401a8:	10800044 	addi	r2,r2,1
   401ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401b0:	003fde06 	br	4012c <__alt_data_end+0xfffca5cc>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	e037883a 	mov	sp,fp
   401bc:	dfc00117 	ldw	ra,4(sp)
   401c0:	df000017 	ldw	fp,0(sp)
   401c4:	dec00204 	addi	sp,sp,8
   401c8:	f800283a 	ret

000401cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401cc:	defffb04 	addi	sp,sp,-20
   401d0:	dfc00415 	stw	ra,16(sp)
   401d4:	df000315 	stw	fp,12(sp)
   401d8:	df000304 	addi	fp,sp,12
   401dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e0:	000531fa 	rdctl	r2,exception
   401e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401e8:	e0bffd17 	ldw	r2,-12(fp)
   401ec:	10801f0c 	andi	r2,r2,124
   401f0:	1004d0ba 	srli	r2,r2,2
   401f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401f8:	0005333a 	rdctl	r2,badaddr
   401fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40200:	d0a8c717 	ldw	r2,-23780(gp)
   40204:	10000726 	beq	r2,zero,40224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   40208:	d0a8c717 	ldw	r2,-23780(gp)
   4020c:	e0fffd17 	ldw	r3,-12(fp)
   40210:	1809883a 	mov	r4,r3
   40214:	e17fff17 	ldw	r5,-4(fp)
   40218:	e1bffe17 	ldw	r6,-8(fp)
   4021c:	103ee83a 	callr	r2
   40220:	00000206 	br	4022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40228:	0005883a 	mov	r2,zero
}
   4022c:	e037883a 	mov	sp,fp
   40230:	dfc00117 	ldw	ra,4(sp)
   40234:	df000017 	ldw	fp,0(sp)
   40238:	dec00204 	addi	sp,sp,8
   4023c:	f800283a 	ret

Disassembly of section .text:

00040240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40240:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   40244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   40248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   4024c:	00bffd16 	blt	zero,r2,40244 <__alt_data_end+0xfffca6e4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40250:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40254:	ded6d814 	ori	sp,sp,23392
    movhi gp, %hi(_gp)
   40258:	068001f4 	movhi	gp,7
    ori gp, gp, %lo(_gp)
   4025c:	d686df14 	ori	gp,gp,7036
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40260:	008001b4 	movhi	r2,6
    ori r2, r2, %lo(__bss_start)
   40264:	10af9b14 	ori	r2,r2,48748

    movhi r3, %hi(__bss_end)
   40268:	00c001b4 	movhi	r3,6
    ori r3, r3, %lo(__bss_end)
   4026c:	18eff114 	ori	r3,r3,49092

    beq r2, r3, 1f
   40270:	10c00326 	beq	r2,r3,40280 <_start+0x40>

0:
    stw zero, (r2)
   40274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4027c:	10fffd36 	bltu	r2,r3,40274 <__alt_data_end+0xfffca714>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40280:	004bcf40 	call	4bcf4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40284:	004bd740 	call	4bd74 <alt_main>

00040288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40288:	003fff06 	br	40288 <__alt_data_end+0xfffca728>

0004028c <IsPtInRect>:

//#define BOUND(x, mini, maxi) ((x<(mini)?(mini):( (x>(maxi))?(maxi):(x) )))

//#define COPY_POINT(pt_des, pt_src)  memcpy(&pt_des, &pt_src,sizeof(POINT))

bool IsPtInRect(POINT *pt, RECT *rc){
   4028c:	defffc04 	addi	sp,sp,-16
   40290:	df000315 	stw	fp,12(sp)
   40294:	df000304 	addi	fp,sp,12
   40298:	e13ffe15 	stw	r4,-8(fp)
   4029c:	e17fff15 	stw	r5,-4(fp)
    bool bYes = FALSE;
   402a0:	e03ffd15 	stw	zero,-12(fp)
    
    if (pt->x >= rc->left && pt->x <= rc->right && pt->y >= rc->top && pt->y <= rc->bottom)
   402a4:	e0bffe17 	ldw	r2,-8(fp)
   402a8:	10c00017 	ldw	r3,0(r2)
   402ac:	e0bfff17 	ldw	r2,-4(fp)
   402b0:	10800017 	ldw	r2,0(r2)
   402b4:	18801116 	blt	r3,r2,402fc <IsPtInRect+0x70>
   402b8:	e0bffe17 	ldw	r2,-8(fp)
   402bc:	10800017 	ldw	r2,0(r2)
   402c0:	e0ffff17 	ldw	r3,-4(fp)
   402c4:	18c00117 	ldw	r3,4(r3)
   402c8:	18800c16 	blt	r3,r2,402fc <IsPtInRect+0x70>
   402cc:	e0bffe17 	ldw	r2,-8(fp)
   402d0:	10c00117 	ldw	r3,4(r2)
   402d4:	e0bfff17 	ldw	r2,-4(fp)
   402d8:	10800217 	ldw	r2,8(r2)
   402dc:	18800716 	blt	r3,r2,402fc <IsPtInRect+0x70>
   402e0:	e0bffe17 	ldw	r2,-8(fp)
   402e4:	10800117 	ldw	r2,4(r2)
   402e8:	e0ffff17 	ldw	r3,-4(fp)
   402ec:	18c00317 	ldw	r3,12(r3)
   402f0:	18800216 	blt	r3,r2,402fc <IsPtInRect+0x70>
        bYes = TRUE;
   402f4:	00800044 	movi	r2,1
   402f8:	e0bffd15 	stw	r2,-12(fp)
    
    return bYes;
   402fc:	e0bffd17 	ldw	r2,-12(fp)
}
   40300:	e037883a 	mov	sp,fp
   40304:	df000017 	ldw	fp,0(sp)
   40308:	dec00104 	addi	sp,sp,4
   4030c:	f800283a 	ret

00040310 <PtSet>:

void PtSet(POINT *pt, int x, int y){
   40310:	defffc04 	addi	sp,sp,-16
   40314:	df000315 	stw	fp,12(sp)
   40318:	df000304 	addi	fp,sp,12
   4031c:	e13ffd15 	stw	r4,-12(fp)
   40320:	e17ffe15 	stw	r5,-8(fp)
   40324:	e1bfff15 	stw	r6,-4(fp)
    pt->x = x;
   40328:	e0bffd17 	ldw	r2,-12(fp)
   4032c:	e0fffe17 	ldw	r3,-8(fp)
   40330:	10c00015 	stw	r3,0(r2)
    pt->y = y;
   40334:	e0bffd17 	ldw	r2,-12(fp)
   40338:	e0ffff17 	ldw	r3,-4(fp)
   4033c:	10c00115 	stw	r3,4(r2)
}
   40340:	e037883a 	mov	sp,fp
   40344:	df000017 	ldw	fp,0(sp)
   40348:	dec00104 	addi	sp,sp,4
   4034c:	f800283a 	ret

00040350 <RectSet>:

void RectSet(RECT *rc, int left, int right, int top, int bottom){
   40350:	defffb04 	addi	sp,sp,-20
   40354:	df000415 	stw	fp,16(sp)
   40358:	df000404 	addi	fp,sp,16
   4035c:	e13ffc15 	stw	r4,-16(fp)
   40360:	e17ffd15 	stw	r5,-12(fp)
   40364:	e1bffe15 	stw	r6,-8(fp)
   40368:	e1ffff15 	stw	r7,-4(fp)
    rc->left = left;
   4036c:	e0bffc17 	ldw	r2,-16(fp)
   40370:	e0fffd17 	ldw	r3,-12(fp)
   40374:	10c00015 	stw	r3,0(r2)
    rc->right = right;
   40378:	e0bffc17 	ldw	r2,-16(fp)
   4037c:	e0fffe17 	ldw	r3,-8(fp)
   40380:	10c00115 	stw	r3,4(r2)
    rc->top = top;
   40384:	e0bffc17 	ldw	r2,-16(fp)
   40388:	e0ffff17 	ldw	r3,-4(fp)
   4038c:	10c00215 	stw	r3,8(r2)
    rc->bottom = bottom;
   40390:	e0bffc17 	ldw	r2,-16(fp)
   40394:	e0c00117 	ldw	r3,4(fp)
   40398:	10c00315 	stw	r3,12(r2)
}
   4039c:	e037883a 	mov	sp,fp
   403a0:	df000017 	ldw	fp,0(sp)
   403a4:	dec00104 	addi	sp,sp,4
   403a8:	f800283a 	ret

000403ac <RectInflate>:

void RectInflate(RECT *rc, int x, int y){
   403ac:	defffc04 	addi	sp,sp,-16
   403b0:	df000315 	stw	fp,12(sp)
   403b4:	df000304 	addi	fp,sp,12
   403b8:	e13ffd15 	stw	r4,-12(fp)
   403bc:	e17ffe15 	stw	r5,-8(fp)
   403c0:	e1bfff15 	stw	r6,-4(fp)
    rc->left -= x;
   403c4:	e0bffd17 	ldw	r2,-12(fp)
   403c8:	10c00017 	ldw	r3,0(r2)
   403cc:	e0bffe17 	ldw	r2,-8(fp)
   403d0:	1887c83a 	sub	r3,r3,r2
   403d4:	e0bffd17 	ldw	r2,-12(fp)
   403d8:	10c00015 	stw	r3,0(r2)
    rc->right += x;
   403dc:	e0bffd17 	ldw	r2,-12(fp)
   403e0:	10c00117 	ldw	r3,4(r2)
   403e4:	e0bffe17 	ldw	r2,-8(fp)
   403e8:	1887883a 	add	r3,r3,r2
   403ec:	e0bffd17 	ldw	r2,-12(fp)
   403f0:	10c00115 	stw	r3,4(r2)
    rc->top -= y;
   403f4:	e0bffd17 	ldw	r2,-12(fp)
   403f8:	10c00217 	ldw	r3,8(r2)
   403fc:	e0bfff17 	ldw	r2,-4(fp)
   40400:	1887c83a 	sub	r3,r3,r2
   40404:	e0bffd17 	ldw	r2,-12(fp)
   40408:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
   4040c:	e0bffd17 	ldw	r2,-12(fp)
   40410:	10c00317 	ldw	r3,12(r2)
   40414:	e0bfff17 	ldw	r2,-4(fp)
   40418:	1887883a 	add	r3,r3,r2
   4041c:	e0bffd17 	ldw	r2,-12(fp)
   40420:	10c00315 	stw	r3,12(r2)
}
   40424:	e037883a 	mov	sp,fp
   40428:	df000017 	ldw	fp,0(sp)
   4042c:	dec00104 	addi	sp,sp,4
   40430:	f800283a 	ret

00040434 <RectOffset>:

void RectOffset(RECT *rc, int x, int y){
   40434:	defffc04 	addi	sp,sp,-16
   40438:	df000315 	stw	fp,12(sp)
   4043c:	df000304 	addi	fp,sp,12
   40440:	e13ffd15 	stw	r4,-12(fp)
   40444:	e17ffe15 	stw	r5,-8(fp)
   40448:	e1bfff15 	stw	r6,-4(fp)
    rc->left += x;
   4044c:	e0bffd17 	ldw	r2,-12(fp)
   40450:	10c00017 	ldw	r3,0(r2)
   40454:	e0bffe17 	ldw	r2,-8(fp)
   40458:	1887883a 	add	r3,r3,r2
   4045c:	e0bffd17 	ldw	r2,-12(fp)
   40460:	10c00015 	stw	r3,0(r2)
    rc->right += x;
   40464:	e0bffd17 	ldw	r2,-12(fp)
   40468:	10c00117 	ldw	r3,4(r2)
   4046c:	e0bffe17 	ldw	r2,-8(fp)
   40470:	1887883a 	add	r3,r3,r2
   40474:	e0bffd17 	ldw	r2,-12(fp)
   40478:	10c00115 	stw	r3,4(r2)
    rc->top += y;
   4047c:	e0bffd17 	ldw	r2,-12(fp)
   40480:	10c00217 	ldw	r3,8(r2)
   40484:	e0bfff17 	ldw	r2,-4(fp)
   40488:	1887883a 	add	r3,r3,r2
   4048c:	e0bffd17 	ldw	r2,-12(fp)
   40490:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
   40494:	e0bffd17 	ldw	r2,-12(fp)
   40498:	10c00317 	ldw	r3,12(r2)
   4049c:	e0bfff17 	ldw	r2,-4(fp)
   404a0:	1887883a 	add	r3,r3,r2
   404a4:	e0bffd17 	ldw	r2,-12(fp)
   404a8:	10c00315 	stw	r3,12(r2)
}
   404ac:	e037883a 	mov	sp,fp
   404b0:	df000017 	ldw	fp,0(sp)
   404b4:	dec00104 	addi	sp,sp,4
   404b8:	f800283a 	ret

000404bc <RectCopy>:

void RectCopy(RECT *rcDes, RECT *rcSrc){
   404bc:	defffd04 	addi	sp,sp,-12
   404c0:	df000215 	stw	fp,8(sp)
   404c4:	df000204 	addi	fp,sp,8
   404c8:	e13ffe15 	stw	r4,-8(fp)
   404cc:	e17fff15 	stw	r5,-4(fp)
    rcDes->left = rcSrc->left;
   404d0:	e0bfff17 	ldw	r2,-4(fp)
   404d4:	10c00017 	ldw	r3,0(r2)
   404d8:	e0bffe17 	ldw	r2,-8(fp)
   404dc:	10c00015 	stw	r3,0(r2)
    rcDes->right = rcSrc->right;
   404e0:	e0bfff17 	ldw	r2,-4(fp)
   404e4:	10c00117 	ldw	r3,4(r2)
   404e8:	e0bffe17 	ldw	r2,-8(fp)
   404ec:	10c00115 	stw	r3,4(r2)
    rcDes->top = rcSrc->top;
   404f0:	e0bfff17 	ldw	r2,-4(fp)
   404f4:	10c00217 	ldw	r3,8(r2)
   404f8:	e0bffe17 	ldw	r2,-8(fp)
   404fc:	10c00215 	stw	r3,8(r2)
    rcDes->bottom = rcSrc->bottom;
   40500:	e0bfff17 	ldw	r2,-4(fp)
   40504:	10c00317 	ldw	r3,12(r2)
   40508:	e0bffe17 	ldw	r2,-8(fp)
   4050c:	10c00315 	stw	r3,12(r2)
}
   40510:	e037883a 	mov	sp,fp
   40514:	df000017 	ldw	fp,0(sp)
   40518:	dec00104 	addi	sp,sp,4
   4051c:	f800283a 	ret

00040520 <RectWidth>:

int RectWidth(RECT *rc){
   40520:	defffe04 	addi	sp,sp,-8
   40524:	df000115 	stw	fp,4(sp)
   40528:	df000104 	addi	fp,sp,4
   4052c:	e13fff15 	stw	r4,-4(fp)
    return (rc->right-rc->left);
   40530:	e0bfff17 	ldw	r2,-4(fp)
   40534:	10c00117 	ldw	r3,4(r2)
   40538:	e0bfff17 	ldw	r2,-4(fp)
   4053c:	10800017 	ldw	r2,0(r2)
   40540:	1885c83a 	sub	r2,r3,r2
}
   40544:	e037883a 	mov	sp,fp
   40548:	df000017 	ldw	fp,0(sp)
   4054c:	dec00104 	addi	sp,sp,4
   40550:	f800283a 	ret

00040554 <RectHeight>:

int RectHeight(RECT *rc){
   40554:	defffe04 	addi	sp,sp,-8
   40558:	df000115 	stw	fp,4(sp)
   4055c:	df000104 	addi	fp,sp,4
   40560:	e13fff15 	stw	r4,-4(fp)
    return (rc->bottom-rc->top);
   40564:	e0bfff17 	ldw	r2,-4(fp)
   40568:	10c00317 	ldw	r3,12(r2)
   4056c:	e0bfff17 	ldw	r2,-4(fp)
   40570:	10800217 	ldw	r2,8(r2)
   40574:	1885c83a 	sub	r2,r3,r2
}
   40578:	e037883a 	mov	sp,fp
   4057c:	df000017 	ldw	fp,0(sp)
   40580:	dec00104 	addi	sp,sp,4
   40584:	f800283a 	ret

00040588 <PtDistance>:

int PtDistance(POINT *pt1, POINT *pt2){
   40588:	defff904 	addi	sp,sp,-28
   4058c:	dfc00615 	stw	ra,24(sp)
   40590:	df000515 	stw	fp,20(sp)
   40594:	df000504 	addi	fp,sp,20
   40598:	e13ffe15 	stw	r4,-8(fp)
   4059c:	e17fff15 	stw	r5,-4(fp)
    int nDistance;
    int a, b;
    a = pt1->x - pt2->x;
   405a0:	e0bffe17 	ldw	r2,-8(fp)
   405a4:	10c00017 	ldw	r3,0(r2)
   405a8:	e0bfff17 	ldw	r2,-4(fp)
   405ac:	10800017 	ldw	r2,0(r2)
   405b0:	1885c83a 	sub	r2,r3,r2
   405b4:	e0bffb15 	stw	r2,-20(fp)
    b = pt1->y - pt2->y;
   405b8:	e0bffe17 	ldw	r2,-8(fp)
   405bc:	10c00117 	ldw	r3,4(r2)
   405c0:	e0bfff17 	ldw	r2,-4(fp)
   405c4:	10800117 	ldw	r2,4(r2)
   405c8:	1885c83a 	sub	r2,r3,r2
   405cc:	e0bffc15 	stw	r2,-16(fp)
    nDistance = a*a + b*b;
   405d0:	e0fffb17 	ldw	r3,-20(fp)
   405d4:	e0bffb17 	ldw	r2,-20(fp)
   405d8:	1887383a 	mul	r3,r3,r2
   405dc:	e13ffc17 	ldw	r4,-16(fp)
   405e0:	e0bffc17 	ldw	r2,-16(fp)
   405e4:	2085383a 	mul	r2,r4,r2
   405e8:	1885883a 	add	r2,r3,r2
   405ec:	e0bffd15 	stw	r2,-12(fp)
    nDistance = sqrt(nDistance);
   405f0:	e13ffd17 	ldw	r4,-12(fp)
   405f4:	0049b380 	call	49b38 <__floatsidf>
   405f8:	100b883a 	mov	r5,r2
   405fc:	180d883a 	mov	r6,r3
   40600:	2809883a 	mov	r4,r5
   40604:	300b883a 	mov	r5,r6
   40608:	004738c0 	call	4738c <sqrt>
   4060c:	100b883a 	mov	r5,r2
   40610:	180d883a 	mov	r6,r3
   40614:	2809883a 	mov	r4,r5
   40618:	300b883a 	mov	r5,r6
   4061c:	0049ab80 	call	49ab8 <__fixdfsi>
   40620:	e0bffd15 	stw	r2,-12(fp)
    
    return nDistance;
   40624:	e0bffd17 	ldw	r2,-12(fp)
}
   40628:	e037883a 	mov	sp,fp
   4062c:	dfc00117 	ldw	ra,4(sp)
   40630:	df000017 	ldw	fp,0(sp)
   40634:	dec00204 	addi	sp,sp,8
   40638:	f800283a 	ret

0004063c <PtCopy>:

void PtCopy(POINT *ptDes, POINT *ptSrc){
   4063c:	defffd04 	addi	sp,sp,-12
   40640:	df000215 	stw	fp,8(sp)
   40644:	df000204 	addi	fp,sp,8
   40648:	e13ffe15 	stw	r4,-8(fp)
   4064c:	e17fff15 	stw	r5,-4(fp)
    ptDes->x = ptSrc->x;
   40650:	e0bfff17 	ldw	r2,-4(fp)
   40654:	10c00017 	ldw	r3,0(r2)
   40658:	e0bffe17 	ldw	r2,-8(fp)
   4065c:	10c00015 	stw	r3,0(r2)
    ptDes->y = ptSrc->y;
   40660:	e0bfff17 	ldw	r2,-4(fp)
   40664:	10c00117 	ldw	r3,4(r2)
   40668:	e0bffe17 	ldw	r2,-8(fp)
   4066c:	10c00115 	stw	r3,4(r2)
}
   40670:	e037883a 	mov	sp,fp
   40674:	df000017 	ldw	fp,0(sp)
   40678:	dec00104 	addi	sp,sp,4
   4067c:	f800283a 	ret

00040680 <Delay_Ms>:
#define BLUE 0x001f
#define BLACK  0x0000
#define WHITE 0xffff

void Delay_Ms(alt_u16 count_ms)
{
   40680:	defffd04 	addi	sp,sp,-12
   40684:	dfc00215 	stw	ra,8(sp)
   40688:	df000115 	stw	fp,4(sp)
   4068c:	df000104 	addi	fp,sp,4
   40690:	2005883a 	mov	r2,r4
   40694:	e0bfff0d 	sth	r2,-4(fp)
    while(count_ms--)
   40698:	00000206 	br	406a4 <Delay_Ms+0x24>
    {
        usleep(1000);
   4069c:	0100fa04 	movi	r4,1000
   406a0:	004c0780 	call	4c078 <usleep>
#define BLACK  0x0000
#define WHITE 0xffff

void Delay_Ms(alt_u16 count_ms)
{
    while(count_ms--)
   406a4:	e0bfff0b 	ldhu	r2,-4(fp)
   406a8:	10ffffc4 	addi	r3,r2,-1
   406ac:	e0ffff0d 	sth	r3,-4(fp)
   406b0:	10bfffcc 	andi	r2,r2,65535
   406b4:	103ff91e 	bne	r2,zero,4069c <__alt_data_end+0xfffcab3c>
    {
        usleep(1000);
    }
}
   406b8:	e037883a 	mov	sp,fp
   406bc:	dfc00117 	ldw	ra,4(sp)
   406c0:	df000017 	ldw	fp,0(sp)
   406c4:	dec00204 	addi	sp,sp,8
   406c8:	f800283a 	ret

000406cc <LCD_SetCursor>:


void LCD_SetCursor(alt_u16 Xpos, alt_u16 Ypos)
{
   406cc:	defffd04 	addi	sp,sp,-12
   406d0:	df000215 	stw	fp,8(sp)
   406d4:	df000204 	addi	fp,sp,8
   406d8:	2007883a 	mov	r3,r4
   406dc:	2805883a 	mov	r2,r5
   406e0:	e0fffe0d 	sth	r3,-8(fp)
   406e4:	e0bfff0d 	sth	r2,-4(fp)
	 LCD_WR_REG(0x002A);
   406e8:	00c00a84 	movi	r3,42
   406ec:	00800234 	movhi	r2,8
   406f0:	10842204 	addi	r2,r2,4232
   406f4:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Xpos>>8);
   406f8:	e0bffe0b 	ldhu	r2,-8(fp)
   406fc:	1004d23a 	srli	r2,r2,8
   40700:	10ffffcc 	andi	r3,r2,65535
   40704:	00800234 	movhi	r2,8
   40708:	10842304 	addi	r2,r2,4236
   4070c:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Xpos&0XFF);
   40710:	e0bffe0b 	ldhu	r2,-8(fp)
   40714:	10c03fcc 	andi	r3,r2,255
   40718:	00800234 	movhi	r2,8
   4071c:	10842304 	addi	r2,r2,4236
   40720:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x002B);
   40724:	00c00ac4 	movi	r3,43
   40728:	00800234 	movhi	r2,8
   4072c:	10842204 	addi	r2,r2,4232
   40730:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Ypos>>8);
   40734:	e0bfff0b 	ldhu	r2,-4(fp)
   40738:	1004d23a 	srli	r2,r2,8
   4073c:	10ffffcc 	andi	r3,r2,65535
   40740:	00800234 	movhi	r2,8
   40744:	10842304 	addi	r2,r2,4236
   40748:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Ypos&0XFF);
   4074c:	e0bfff0b 	ldhu	r2,-4(fp)
   40750:	10c03fcc 	andi	r3,r2,255
   40754:	00800234 	movhi	r2,8
   40758:	10842304 	addi	r2,r2,4236
   4075c:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x002C);
   40760:	00c00b04 	movi	r3,44
   40764:	00800234 	movhi	r2,8
   40768:	10842204 	addi	r2,r2,4232
   4076c:	10c00035 	stwio	r3,0(r2)
}
   40770:	e037883a 	mov	sp,fp
   40774:	df000017 	ldw	fp,0(sp)
   40778:	dec00104 	addi	sp,sp,4
   4077c:	f800283a 	ret

00040780 <LCD_Clear>:

void LCD_Clear(alt_u16 Color)
{
   40780:	defffc04 	addi	sp,sp,-16
   40784:	dfc00315 	stw	ra,12(sp)
   40788:	df000215 	stw	fp,8(sp)
   4078c:	df000204 	addi	fp,sp,8
   40790:	2005883a 	mov	r2,r4
   40794:	e0bfff0d 	sth	r2,-4(fp)
        alt_u32 index=0;
   40798:	e03ffe15 	stw	zero,-8(fp)
        LCD_SetCursor(0x00,0x0000);
   4079c:	0009883a 	mov	r4,zero
   407a0:	000b883a 	mov	r5,zero
   407a4:	00406cc0 	call	406cc <LCD_SetCursor>
        LCD_WR_REG(0x002C);
   407a8:	00c00b04 	movi	r3,44
   407ac:	00800234 	movhi	r2,8
   407b0:	10842204 	addi	r2,r2,4232
   407b4:	10c00035 	stwio	r3,0(r2)
        for(index=0;index<76800;index++)
   407b8:	e03ffe15 	stw	zero,-8(fp)
   407bc:	00000706 	br	407dc <LCD_Clear+0x5c>
        {
        	LCD_WR_DATA(Color);
   407c0:	e0ffff0b 	ldhu	r3,-4(fp)
   407c4:	00800234 	movhi	r2,8
   407c8:	10842304 	addi	r2,r2,4236
   407cc:	10c00035 	stwio	r3,0(r2)
void LCD_Clear(alt_u16 Color)
{
        alt_u32 index=0;
        LCD_SetCursor(0x00,0x0000);
        LCD_WR_REG(0x002C);
        for(index=0;index<76800;index++)
   407d0:	e0bffe17 	ldw	r2,-8(fp)
   407d4:	10800044 	addi	r2,r2,1
   407d8:	e0bffe15 	stw	r2,-8(fp)
   407dc:	e0bffe17 	ldw	r2,-8(fp)
   407e0:	00c00074 	movhi	r3,1
   407e4:	18caffc4 	addi	r3,r3,11263
   407e8:	18bff52e 	bgeu	r3,r2,407c0 <__alt_data_end+0xfffcac60>
        {
        	LCD_WR_DATA(Color);
        }
}
   407ec:	e037883a 	mov	sp,fp
   407f0:	dfc00117 	ldw	ra,4(sp)
   407f4:	df000017 	ldw	fp,0(sp)
   407f8:	dec00204 	addi	sp,sp,8
   407fc:	f800283a 	ret

00040800 <LCD_DrawPoint>:

void LCD_DrawPoint(alt_u16 x,alt_u16 y,alt_u16 color )
{
   40800:	defffb04 	addi	sp,sp,-20
   40804:	dfc00415 	stw	ra,16(sp)
   40808:	df000315 	stw	fp,12(sp)
   4080c:	df000304 	addi	fp,sp,12
   40810:	2807883a 	mov	r3,r5
   40814:	3005883a 	mov	r2,r6
   40818:	e13ffd0d 	sth	r4,-12(fp)
   4081c:	e0fffe0d 	sth	r3,-8(fp)
   40820:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(x,y);
   40824:	e0fffd0b 	ldhu	r3,-12(fp)
   40828:	e0bffe0b 	ldhu	r2,-8(fp)
   4082c:	1809883a 	mov	r4,r3
   40830:	100b883a 	mov	r5,r2
   40834:	00406cc0 	call	406cc <LCD_SetCursor>
        LCD_WR_REG(0x002C);
   40838:	00c00b04 	movi	r3,44
   4083c:	00800234 	movhi	r2,8
   40840:	10842204 	addi	r2,r2,4232
   40844:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(color);
   40848:	e0ffff0b 	ldhu	r3,-4(fp)
   4084c:	00800234 	movhi	r2,8
   40850:	10842304 	addi	r2,r2,4236
   40854:	10c00035 	stwio	r3,0(r2)
}
   40858:	e037883a 	mov	sp,fp
   4085c:	dfc00117 	ldw	ra,4(sp)
   40860:	df000017 	ldw	fp,0(sp)
   40864:	dec00204 	addi	sp,sp,8
   40868:	f800283a 	ret

0004086c <LCD_Init>:
void LCD_Init()
{
   4086c:	defffe04 	addi	sp,sp,-8
   40870:	dfc00115 	stw	ra,4(sp)
   40874:	df000015 	stw	fp,0(sp)
   40878:	d839883a 	mov	fp,sp
	alt_u16 data1,data2;
	alt_u16 data3,data4;
	Set_LCD_RST;
   4087c:	00c00044 	movi	r3,1
   40880:	00800234 	movhi	r2,8
   40884:	10841c04 	addi	r2,r2,4208
   40888:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(1);
   4088c:	01000044 	movi	r4,1
   40890:	00406800 	call	40680 <Delay_Ms>
	Clr_LCD_RST;
   40894:	0007883a 	mov	r3,zero
   40898:	00800234 	movhi	r2,8
   4089c:	10841c04 	addi	r2,r2,4208
   408a0:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(10);       // Delay 10ms // This delay time is necessary
   408a4:	01000284 	movi	r4,10
   408a8:	00406800 	call	40680 <Delay_Ms>
	Set_LCD_RST;
   408ac:	00c00044 	movi	r3,1
   408b0:	00800234 	movhi	r2,8
   408b4:	10841c04 	addi	r2,r2,4208
   408b8:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(120);       // Delay 120 ms
   408bc:	01001e04 	movi	r4,120
   408c0:	00406800 	call	40680 <Delay_Ms>
//	Clr_LCD_CS;



	LCD_WR_REG(0x0011); //Exit Sleep
   408c4:	00c00444 	movi	r3,17
   408c8:	00800234 	movhi	r2,8
   408cc:	10842204 	addi	r2,r2,4232
   408d0:	10c00035 	stwio	r3,0(r2)
	LCD_WR_REG(0x00CF);
   408d4:	00c033c4 	movi	r3,207
   408d8:	00800234 	movhi	r2,8
   408dc:	10842204 	addi	r2,r2,4232
   408e0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   408e4:	0007883a 	mov	r3,zero
   408e8:	00800234 	movhi	r2,8
   408ec:	10842304 	addi	r2,r2,4236
   408f0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0081);
   408f4:	00c02044 	movi	r3,129
   408f8:	00800234 	movhi	r2,8
   408fc:	10842304 	addi	r2,r2,4236
   40900:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00c0);
   40904:	00c03004 	movi	r3,192
   40908:	00800234 	movhi	r2,8
   4090c:	10842304 	addi	r2,r2,4236
   40910:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00ED);
   40914:	00c03b44 	movi	r3,237
   40918:	00800234 	movhi	r2,8
   4091c:	10842204 	addi	r2,r2,4232
   40920:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0064);
   40924:	00c01904 	movi	r3,100
   40928:	00800234 	movhi	r2,8
   4092c:	10842304 	addi	r2,r2,4236
   40930:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0003);
   40934:	00c000c4 	movi	r3,3
   40938:	00800234 	movhi	r2,8
   4093c:	10842304 	addi	r2,r2,4236
   40940:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0012);
   40944:	00c00484 	movi	r3,18
   40948:	00800234 	movhi	r2,8
   4094c:	10842304 	addi	r2,r2,4236
   40950:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0081);
   40954:	00c02044 	movi	r3,129
   40958:	00800234 	movhi	r2,8
   4095c:	10842304 	addi	r2,r2,4236
   40960:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E8);
   40964:	00c03a04 	movi	r3,232
   40968:	00800234 	movhi	r2,8
   4096c:	10842204 	addi	r2,r2,4232
   40970:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0085);
   40974:	00c02144 	movi	r3,133
   40978:	00800234 	movhi	r2,8
   4097c:	10842304 	addi	r2,r2,4236
   40980:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
   40984:	00c00044 	movi	r3,1
   40988:	00800234 	movhi	r2,8
   4098c:	10842304 	addi	r2,r2,4236
   40990:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00798);
   40994:	00c1e604 	movi	r3,1944
   40998:	00800234 	movhi	r2,8
   4099c:	10842304 	addi	r2,r2,4236
   409a0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00CB);
   409a4:	00c032c4 	movi	r3,203
   409a8:	00800234 	movhi	r2,8
   409ac:	10842204 	addi	r2,r2,4232
   409b0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0039);
   409b4:	00c00e44 	movi	r3,57
   409b8:	00800234 	movhi	r2,8
   409bc:	10842304 	addi	r2,r2,4236
   409c0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002C);
   409c4:	00c00b04 	movi	r3,44
   409c8:	00800234 	movhi	r2,8
   409cc:	10842304 	addi	r2,r2,4236
   409d0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   409d4:	0007883a 	mov	r3,zero
   409d8:	00800234 	movhi	r2,8
   409dc:	10842304 	addi	r2,r2,4236
   409e0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
   409e4:	00c00d04 	movi	r3,52
   409e8:	00800234 	movhi	r2,8
   409ec:	10842304 	addi	r2,r2,4236
   409f0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0002);
   409f4:	00c00084 	movi	r3,2
   409f8:	00800234 	movhi	r2,8
   409fc:	10842304 	addi	r2,r2,4236
   40a00:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F7);
   40a04:	00c03dc4 	movi	r3,247
   40a08:	00800234 	movhi	r2,8
   40a0c:	10842204 	addi	r2,r2,4232
   40a10:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
   40a14:	00c00804 	movi	r3,32
   40a18:	00800234 	movhi	r2,8
   40a1c:	10842304 	addi	r2,r2,4236
   40a20:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00EA);
   40a24:	00c03a84 	movi	r3,234
   40a28:	00800234 	movhi	r2,8
   40a2c:	10842204 	addi	r2,r2,4232
   40a30:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   40a34:	0007883a 	mov	r3,zero
   40a38:	00800234 	movhi	r2,8
   40a3c:	10842304 	addi	r2,r2,4236
   40a40:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   40a44:	0007883a 	mov	r3,zero
   40a48:	00800234 	movhi	r2,8
   40a4c:	10842304 	addi	r2,r2,4236
   40a50:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B1);
   40a54:	00c02c44 	movi	r3,177
   40a58:	00800234 	movhi	r2,8
   40a5c:	10842204 	addi	r2,r2,4232
   40a60:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   40a64:	0007883a 	mov	r3,zero
   40a68:	00800234 	movhi	r2,8
   40a6c:	10842304 	addi	r2,r2,4236
   40a70:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001b);
   40a74:	00c006c4 	movi	r3,27
   40a78:	00800234 	movhi	r2,8
   40a7c:	10842304 	addi	r2,r2,4236
   40a80:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B6);
   40a84:	00c02d84 	movi	r3,182
   40a88:	00800234 	movhi	r2,8
   40a8c:	10842204 	addi	r2,r2,4232
   40a90:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000A);
   40a94:	00c00284 	movi	r3,10
   40a98:	00800234 	movhi	r2,8
   40a9c:	10842304 	addi	r2,r2,4236
   40aa0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00A2);
   40aa4:	00c02884 	movi	r3,162
   40aa8:	00800234 	movhi	r2,8
   40aac:	10842304 	addi	r2,r2,4236
   40ab0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C0);    //Power control
   40ab4:	00c03004 	movi	r3,192
   40ab8:	00800234 	movhi	r2,8
   40abc:	10842204 	addi	r2,r2,4232
   40ac0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);   //VRH[5:0]
   40ac4:	00c00144 	movi	r3,5
   40ac8:	00800234 	movhi	r2,8
   40acc:	10842304 	addi	r2,r2,4236
   40ad0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C1);    //Power control
   40ad4:	00c03044 	movi	r3,193
   40ad8:	00800234 	movhi	r2,8
   40adc:	10842204 	addi	r2,r2,4232
   40ae0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0011);   //SAP[2:0];BT[3:0]
   40ae4:	00c00444 	movi	r3,17
   40ae8:	00800234 	movhi	r2,8
   40aec:	10842304 	addi	r2,r2,4236
   40af0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C5);    //VCM control
   40af4:	00c03144 	movi	r3,197
   40af8:	00800234 	movhi	r2,8
   40afc:	10842204 	addi	r2,r2,4232
   40b00:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3F
   40b04:	00c01144 	movi	r3,69
   40b08:	00800234 	movhi	r2,8
   40b0c:	10842304 	addi	r2,r2,4236
   40b10:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3C
   40b14:	00c01144 	movi	r3,69
   40b18:	00800234 	movhi	r2,8
   40b1c:	10842304 	addi	r2,r2,4236
   40b20:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x00C7);    //VCM control2
   40b24:	00c031c4 	movi	r3,199
   40b28:	00800234 	movhi	r2,8
   40b2c:	10842204 	addi	r2,r2,4232
   40b30:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(0X00a2);
   40b34:	00c02884 	movi	r3,162
   40b38:	00800234 	movhi	r2,8
   40b3c:	10842304 	addi	r2,r2,4236
   40b40:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0036);    // Memory Access Control
   40b44:	00c00d84 	movi	r3,54
   40b48:	00800234 	movhi	r2,8
   40b4c:	10842204 	addi	r2,r2,4232
   40b50:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);//48
   40b54:	00c00204 	movi	r3,8
   40b58:	00800234 	movhi	r2,8
   40b5c:	10842304 	addi	r2,r2,4236
   40b60:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F2);    // 3Gamma Function Disable
   40b64:	00c03c84 	movi	r3,242
   40b68:	00800234 	movhi	r2,8
   40b6c:	10842204 	addi	r2,r2,4232
   40b70:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   40b74:	0007883a 	mov	r3,zero
   40b78:	00800234 	movhi	r2,8
   40b7c:	10842304 	addi	r2,r2,4236
   40b80:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0026);    //Gamma curve selected
   40b84:	00c00984 	movi	r3,38
   40b88:	00800234 	movhi	r2,8
   40b8c:	10842204 	addi	r2,r2,4232
   40b90:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
   40b94:	00c00044 	movi	r3,1
   40b98:	00800234 	movhi	r2,8
   40b9c:	10842304 	addi	r2,r2,4236
   40ba0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E0);    //Set Gamma
   40ba4:	00c03804 	movi	r3,224
   40ba8:	00800234 	movhi	r2,8
   40bac:	10842204 	addi	r2,r2,4232
   40bb0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000F);
   40bb4:	00c003c4 	movi	r3,15
   40bb8:	00800234 	movhi	r2,8
   40bbc:	10842304 	addi	r2,r2,4236
   40bc0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0026);
   40bc4:	00c00984 	movi	r3,38
   40bc8:	00800234 	movhi	r2,8
   40bcc:	10842304 	addi	r2,r2,4236
   40bd0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0024);
   40bd4:	00c00904 	movi	r3,36
   40bd8:	00800234 	movhi	r2,8
   40bdc:	10842304 	addi	r2,r2,4236
   40be0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
   40be4:	00c002c4 	movi	r3,11
   40be8:	00800234 	movhi	r2,8
   40bec:	10842304 	addi	r2,r2,4236
   40bf0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000E);
   40bf4:	00c00384 	movi	r3,14
   40bf8:	00800234 	movhi	r2,8
   40bfc:	10842304 	addi	r2,r2,4236
   40c00:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
   40c04:	00c00204 	movi	r3,8
   40c08:	00800234 	movhi	r2,8
   40c0c:	10842304 	addi	r2,r2,4236
   40c10:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x004b);
   40c14:	00c012c4 	movi	r3,75
   40c18:	00800234 	movhi	r2,8
   40c1c:	10842304 	addi	r2,r2,4236
   40c20:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00a8);
   40c24:	00c02a04 	movi	r3,168
   40c28:	00800234 	movhi	r2,8
   40c2c:	10842304 	addi	r2,r2,4236
   40c30:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003b);
   40c34:	00c00ec4 	movi	r3,59
   40c38:	00800234 	movhi	r2,8
   40c3c:	10842304 	addi	r2,r2,4236
   40c40:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000a);
   40c44:	00c00284 	movi	r3,10
   40c48:	00800234 	movhi	r2,8
   40c4c:	10842304 	addi	r2,r2,4236
   40c50:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0014);
   40c54:	00c00504 	movi	r3,20
   40c58:	00800234 	movhi	r2,8
   40c5c:	10842304 	addi	r2,r2,4236
   40c60:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0006);
   40c64:	00c00184 	movi	r3,6
   40c68:	00800234 	movhi	r2,8
   40c6c:	10842304 	addi	r2,r2,4236
   40c70:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
   40c74:	00c00404 	movi	r3,16
   40c78:	00800234 	movhi	r2,8
   40c7c:	10842304 	addi	r2,r2,4236
   40c80:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
   40c84:	00c00244 	movi	r3,9
   40c88:	00800234 	movhi	r2,8
   40c8c:	10842304 	addi	r2,r2,4236
   40c90:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   40c94:	0007883a 	mov	r3,zero
   40c98:	00800234 	movhi	r2,8
   40c9c:	10842304 	addi	r2,r2,4236
   40ca0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0X00E1);    //Set Gamma
   40ca4:	00c03844 	movi	r3,225
   40ca8:	00800234 	movhi	r2,8
   40cac:	10842204 	addi	r2,r2,4232
   40cb0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   40cb4:	0007883a 	mov	r3,zero
   40cb8:	00800234 	movhi	r2,8
   40cbc:	10842304 	addi	r2,r2,4236
   40cc0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001c);
   40cc4:	00c00704 	movi	r3,28
   40cc8:	00800234 	movhi	r2,8
   40ccc:	10842304 	addi	r2,r2,4236
   40cd0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
   40cd4:	00c00804 	movi	r3,32
   40cd8:	00800234 	movhi	r2,8
   40cdc:	10842304 	addi	r2,r2,4236
   40ce0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0004);
   40ce4:	00c00104 	movi	r3,4
   40ce8:	00800234 	movhi	r2,8
   40cec:	10842304 	addi	r2,r2,4236
   40cf0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
   40cf4:	00c00404 	movi	r3,16
   40cf8:	00800234 	movhi	r2,8
   40cfc:	10842304 	addi	r2,r2,4236
   40d00:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
   40d04:	00c00204 	movi	r3,8
   40d08:	00800234 	movhi	r2,8
   40d0c:	10842304 	addi	r2,r2,4236
   40d10:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
   40d14:	00c00d04 	movi	r3,52
   40d18:	00800234 	movhi	r2,8
   40d1c:	10842304 	addi	r2,r2,4236
   40d20:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0047);
   40d24:	00c011c4 	movi	r3,71
   40d28:	00800234 	movhi	r2,8
   40d2c:	10842304 	addi	r2,r2,4236
   40d30:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0044);
   40d34:	00c01104 	movi	r3,68
   40d38:	00800234 	movhi	r2,8
   40d3c:	10842304 	addi	r2,r2,4236
   40d40:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);
   40d44:	00c00144 	movi	r3,5
   40d48:	00800234 	movhi	r2,8
   40d4c:	10842304 	addi	r2,r2,4236
   40d50:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
   40d54:	00c002c4 	movi	r3,11
   40d58:	00800234 	movhi	r2,8
   40d5c:	10842304 	addi	r2,r2,4236
   40d60:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
   40d64:	00c00244 	movi	r3,9
   40d68:	00800234 	movhi	r2,8
   40d6c:	10842304 	addi	r2,r2,4236
   40d70:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002f);
   40d74:	00c00bc4 	movi	r3,47
   40d78:	00800234 	movhi	r2,8
   40d7c:	10842304 	addi	r2,r2,4236
   40d80:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0036);
   40d84:	00c00d84 	movi	r3,54
   40d88:	00800234 	movhi	r2,8
   40d8c:	10842304 	addi	r2,r2,4236
   40d90:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000f);
   40d94:	00c003c4 	movi	r3,15
   40d98:	00800234 	movhi	r2,8
   40d9c:	10842304 	addi	r2,r2,4236
   40da0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002A);
   40da4:	00c00a84 	movi	r3,42
   40da8:	00800234 	movhi	r2,8
   40dac:	10842204 	addi	r2,r2,4232
   40db0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   40db4:	0007883a 	mov	r3,zero
   40db8:	00800234 	movhi	r2,8
   40dbc:	10842304 	addi	r2,r2,4236
   40dc0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   40dc4:	0007883a 	mov	r3,zero
   40dc8:	00800234 	movhi	r2,8
   40dcc:	10842304 	addi	r2,r2,4236
   40dd0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   40dd4:	0007883a 	mov	r3,zero
   40dd8:	00800234 	movhi	r2,8
   40ddc:	10842304 	addi	r2,r2,4236
   40de0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00ef);
   40de4:	00c03bc4 	movi	r3,239
   40de8:	00800234 	movhi	r2,8
   40dec:	10842304 	addi	r2,r2,4236
   40df0:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x002B);
   40df4:	00c00ac4 	movi	r3,43
   40df8:	00800234 	movhi	r2,8
   40dfc:	10842204 	addi	r2,r2,4232
   40e00:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   40e04:	0007883a 	mov	r3,zero
   40e08:	00800234 	movhi	r2,8
   40e0c:	10842304 	addi	r2,r2,4236
   40e10:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   40e14:	0007883a 	mov	r3,zero
   40e18:	00800234 	movhi	r2,8
   40e1c:	10842304 	addi	r2,r2,4236
   40e20:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
   40e24:	00c00044 	movi	r3,1
   40e28:	00800234 	movhi	r2,8
   40e2c:	10842304 	addi	r2,r2,4236
   40e30:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003f);
   40e34:	00c00fc4 	movi	r3,63
   40e38:	00800234 	movhi	r2,8
   40e3c:	10842304 	addi	r2,r2,4236
   40e40:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x003A);
   40e44:	00c00e84 	movi	r3,58
   40e48:	00800234 	movhi	r2,8
   40e4c:	10842204 	addi	r2,r2,4232
   40e50:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0055);
   40e54:	00c01544 	movi	r3,85
   40e58:	00800234 	movhi	r2,8
   40e5c:	10842304 	addi	r2,r2,4236
   40e60:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00f6);
   40e64:	00c03d84 	movi	r3,246
   40e68:	00800234 	movhi	r2,8
   40e6c:	10842204 	addi	r2,r2,4232
   40e70:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
   40e74:	00c00044 	movi	r3,1
   40e78:	00800234 	movhi	r2,8
   40e7c:	10842304 	addi	r2,r2,4236
   40e80:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0030);
   40e84:	00c00c04 	movi	r3,48
   40e88:	00800234 	movhi	r2,8
   40e8c:	10842304 	addi	r2,r2,4236
   40e90:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   40e94:	0007883a 	mov	r3,zero
   40e98:	00800234 	movhi	r2,8
   40e9c:	10842304 	addi	r2,r2,4236
   40ea0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0029); //display on
   40ea4:	00c00a44 	movi	r3,41
   40ea8:	00800234 	movhi	r2,8
   40eac:	10842204 	addi	r2,r2,4232
   40eb0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002c);    // 0x2C
   40eb4:	00c00b04 	movi	r3,44
   40eb8:	00800234 	movhi	r2,8
   40ebc:	10842204 	addi	r2,r2,4232
   40ec0:	10c00035 	stwio	r3,0(r2)

}
   40ec4:	e037883a 	mov	sp,fp
   40ec8:	dfc00117 	ldw	ra,4(sp)
   40ecc:	df000017 	ldw	fp,0(sp)
   40ed0:	dec00204 	addi	sp,sp,8
   40ed4:	f800283a 	ret

00040ed8 <LCD_Pattern_Horizon>:


void LCD_Pattern_Horizon(void)
{
   40ed8:	defffc04 	addi	sp,sp,-16
   40edc:	dfc00315 	stw	ra,12(sp)
   40ee0:	df000215 	stw	fp,8(sp)
   40ee4:	df000204 	addi	fp,sp,8
        alt_u32 index=0;
   40ee8:	e03ffe15 	stw	zero,-8(fp)
        alt_u16  data=0;
   40eec:	e03fff0d 	sth	zero,-4(fp)
        LCD_SetCursor(0x00,0x0000);
   40ef0:	0009883a 	mov	r4,zero
   40ef4:	000b883a 	mov	r5,zero
   40ef8:	00406cc0 	call	406cc <LCD_SetCursor>
        data=0x0000;
   40efc:	e03fff0d 	sth	zero,-4(fp)
        for(index=0;index<240*80;index++)
   40f00:	e03ffe15 	stw	zero,-8(fp)
   40f04:	00000706 	br	40f24 <LCD_Pattern_Horizon+0x4c>
        {
        	LCD_WR_DATA(data);
   40f08:	e0ffff0b 	ldhu	r3,-4(fp)
   40f0c:	00800234 	movhi	r2,8
   40f10:	10842304 	addi	r2,r2,4236
   40f14:	10c00035 	stwio	r3,0(r2)
{
        alt_u32 index=0;
        alt_u16  data=0;
        LCD_SetCursor(0x00,0x0000);
        data=0x0000;
        for(index=0;index<240*80;index++)
   40f18:	e0bffe17 	ldw	r2,-8(fp)
   40f1c:	10800044 	addi	r2,r2,1
   40f20:	e0bffe15 	stw	r2,-8(fp)
   40f24:	e0bffe17 	ldw	r2,-8(fp)
   40f28:	1092c030 	cmpltui	r2,r2,19200
   40f2c:	103ff61e 	bne	r2,zero,40f08 <__alt_data_end+0xfffcb3a8>
        {
        	LCD_WR_DATA(data);
        }
        LCD_SetCursor(0x00,80);
   40f30:	0009883a 	mov	r4,zero
   40f34:	01401404 	movi	r5,80
   40f38:	00406cc0 	call	406cc <LCD_SetCursor>
        data=RED;
   40f3c:	00be0004 	movi	r2,-2048
   40f40:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
   40f44:	e03ffe15 	stw	zero,-8(fp)
   40f48:	00000706 	br	40f68 <LCD_Pattern_Horizon+0x90>
		{
			LCD_WR_DATA(data);
   40f4c:	e0ffff0b 	ldhu	r3,-4(fp)
   40f50:	00800234 	movhi	r2,8
   40f54:	10842304 	addi	r2,r2,4236
   40f58:	10c00035 	stwio	r3,0(r2)
        {
        	LCD_WR_DATA(data);
        }
        LCD_SetCursor(0x00,80);
        data=RED;
		for(index=0;index<240*80;index++)
   40f5c:	e0bffe17 	ldw	r2,-8(fp)
   40f60:	10800044 	addi	r2,r2,1
   40f64:	e0bffe15 	stw	r2,-8(fp)
   40f68:	e0bffe17 	ldw	r2,-8(fp)
   40f6c:	1092c030 	cmpltui	r2,r2,19200
   40f70:	103ff61e 	bne	r2,zero,40f4c <__alt_data_end+0xfffcb3ec>
		{
			LCD_WR_DATA(data);
		}
	    LCD_SetCursor(0x00,160);
   40f74:	0009883a 	mov	r4,zero
   40f78:	01402804 	movi	r5,160
   40f7c:	00406cc0 	call	406cc <LCD_SetCursor>
		data=GREEN;
   40f80:	0081f804 	movi	r2,2016
   40f84:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
   40f88:	e03ffe15 	stw	zero,-8(fp)
   40f8c:	00000706 	br	40fac <LCD_Pattern_Horizon+0xd4>
		{
			LCD_WR_DATA(data);
   40f90:	e0ffff0b 	ldhu	r3,-4(fp)
   40f94:	00800234 	movhi	r2,8
   40f98:	10842304 	addi	r2,r2,4236
   40f9c:	10c00035 	stwio	r3,0(r2)
		{
			LCD_WR_DATA(data);
		}
	    LCD_SetCursor(0x00,160);
		data=GREEN;
		for(index=0;index<240*80;index++)
   40fa0:	e0bffe17 	ldw	r2,-8(fp)
   40fa4:	10800044 	addi	r2,r2,1
   40fa8:	e0bffe15 	stw	r2,-8(fp)
   40fac:	e0bffe17 	ldw	r2,-8(fp)
   40fb0:	1092c030 	cmpltui	r2,r2,19200
   40fb4:	103ff61e 	bne	r2,zero,40f90 <__alt_data_end+0xfffcb430>
		{
			LCD_WR_DATA(data);
		}
		LCD_SetCursor(0x00,240);
   40fb8:	0009883a 	mov	r4,zero
   40fbc:	01403c04 	movi	r5,240
   40fc0:	00406cc0 	call	406cc <LCD_SetCursor>
		data=BLUE;
   40fc4:	008007c4 	movi	r2,31
   40fc8:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
   40fcc:	e03ffe15 	stw	zero,-8(fp)
   40fd0:	00000706 	br	40ff0 <LCD_Pattern_Horizon+0x118>
		{
			LCD_WR_DATA(data);
   40fd4:	e0ffff0b 	ldhu	r3,-4(fp)
   40fd8:	00800234 	movhi	r2,8
   40fdc:	10842304 	addi	r2,r2,4236
   40fe0:	10c00035 	stwio	r3,0(r2)
		{
			LCD_WR_DATA(data);
		}
		LCD_SetCursor(0x00,240);
		data=BLUE;
		for(index=0;index<240*80;index++)
   40fe4:	e0bffe17 	ldw	r2,-8(fp)
   40fe8:	10800044 	addi	r2,r2,1
   40fec:	e0bffe15 	stw	r2,-8(fp)
   40ff0:	e0bffe17 	ldw	r2,-8(fp)
   40ff4:	1092c030 	cmpltui	r2,r2,19200
   40ff8:	103ff61e 	bne	r2,zero,40fd4 <__alt_data_end+0xfffcb474>
		{
			LCD_WR_DATA(data);
		}
}
   40ffc:	e037883a 	mov	sp,fp
   41000:	dfc00117 	ldw	ra,4(sp)
   41004:	df000017 	ldw	fp,0(sp)
   41008:	dec00204 	addi	sp,sp,8
   4100c:	f800283a 	ret

00041010 <LCD_Pattern_Vertical>:

void LCD_Pattern_Vertical(void)
{
   41010:	defff804 	addi	sp,sp,-32
   41014:	dfc00715 	stw	ra,28(sp)
   41018:	df000615 	stw	fp,24(sp)
   4101c:	df000604 	addi	fp,sp,24
        int i,j,m;
        alt_u16  data=0;
   41020:	e03ffd0d 	sth	zero,-12(fp)
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
   41024:	00bfffc4 	movi	r2,-1
   41028:	e0bffd8d 	sth	r2,-10(fp)
   4102c:	008007c4 	movi	r2,31
   41030:	e0bffe0d 	sth	r2,-8(fp)
   41034:	0081f804 	movi	r2,2016
   41038:	e0bffe8d 	sth	r2,-6(fp)
   4103c:	00be0004 	movi	r2,-2048
   41040:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(0x00,0x0000);
   41044:	0009883a 	mov	r4,zero
   41048:	000b883a 	mov	r5,zero
   4104c:	00406cc0 	call	406cc <LCD_SetCursor>
        for(m=0;m<320;m++)
   41050:	e03ffc15 	stw	zero,-16(fp)
   41054:	00001e06 	br	410d0 <LCD_Pattern_Vertical+0xc0>
        {
			for(i=0;i<4;i++)
   41058:	e03ffa15 	stw	zero,-24(fp)
   4105c:	00001606 	br	410b8 <LCD_Pattern_Vertical+0xa8>
			{
				data=color[i];
   41060:	e0bffa17 	ldw	r2,-24(fp)
   41064:	1085883a 	add	r2,r2,r2
   41068:	e0fffa04 	addi	r3,fp,-24
   4106c:	1885883a 	add	r2,r3,r2
   41070:	10800384 	addi	r2,r2,14
   41074:	1080000b 	ldhu	r2,0(r2)
   41078:	e0bffd0d 	sth	r2,-12(fp)
				for(j=0;j<60;j++)
   4107c:	e03ffb15 	stw	zero,-20(fp)
   41080:	00000706 	br	410a0 <LCD_Pattern_Vertical+0x90>
				{
					LCD_WR_DATA(data);
   41084:	e0fffd0b 	ldhu	r3,-12(fp)
   41088:	00800234 	movhi	r2,8
   4108c:	10842304 	addi	r2,r2,4236
   41090:	10c00035 	stwio	r3,0(r2)
        for(m=0;m<320;m++)
        {
			for(i=0;i<4;i++)
			{
				data=color[i];
				for(j=0;j<60;j++)
   41094:	e0bffb17 	ldw	r2,-20(fp)
   41098:	10800044 	addi	r2,r2,1
   4109c:	e0bffb15 	stw	r2,-20(fp)
   410a0:	e0bffb17 	ldw	r2,-20(fp)
   410a4:	10800f10 	cmplti	r2,r2,60
   410a8:	103ff61e 	bne	r2,zero,41084 <__alt_data_end+0xfffcb524>
        alt_u16  data=0;
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
        LCD_SetCursor(0x00,0x0000);
        for(m=0;m<320;m++)
        {
			for(i=0;i<4;i++)
   410ac:	e0bffa17 	ldw	r2,-24(fp)
   410b0:	10800044 	addi	r2,r2,1
   410b4:	e0bffa15 	stw	r2,-24(fp)
   410b8:	e0bffa17 	ldw	r2,-24(fp)
   410bc:	10800110 	cmplti	r2,r2,4
   410c0:	103fe71e 	bne	r2,zero,41060 <__alt_data_end+0xfffcb500>
{
        int i,j,m;
        alt_u16  data=0;
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
        LCD_SetCursor(0x00,0x0000);
        for(m=0;m<320;m++)
   410c4:	e0bffc17 	ldw	r2,-16(fp)
   410c8:	10800044 	addi	r2,r2,1
   410cc:	e0bffc15 	stw	r2,-16(fp)
   410d0:	e0bffc17 	ldw	r2,-16(fp)
   410d4:	10805010 	cmplti	r2,r2,320
   410d8:	103fdf1e 	bne	r2,zero,41058 <__alt_data_end+0xfffcb4f8>
				{
					LCD_WR_DATA(data);
				}
			}
        }
}
   410dc:	e037883a 	mov	sp,fp
   410e0:	dfc00117 	ldw	ra,4(sp)
   410e4:	df000017 	ldw	fp,0(sp)
   410e8:	dec00204 	addi	sp,sp,8
   410ec:	f800283a 	ret

000410f0 <vid_clean_screen>:
#include "ILI9341.h"
#endif


// richard add
void vid_clean_screen(alt_video_display* display, int color){
   410f0:	defffa04 	addi	sp,sp,-24
   410f4:	dfc00515 	stw	ra,20(sp)
   410f8:	df000415 	stw	fp,16(sp)
   410fc:	df000404 	addi	fp,sp,16
   41100:	e13ffe15 	stw	r4,-8(fp)
   41104:	e17fff15 	stw	r5,-4(fp)
    vid_paint_block(0 , 0,display->width, display->height, color, display);
   41108:	e0bffe17 	ldw	r2,-8(fp)
   4110c:	10c00117 	ldw	r3,4(r2)
   41110:	e0bffe17 	ldw	r2,-8(fp)
   41114:	10800217 	ldw	r2,8(r2)
   41118:	e13fff17 	ldw	r4,-4(fp)
   4111c:	d9000015 	stw	r4,0(sp)
   41120:	e13ffe17 	ldw	r4,-8(fp)
   41124:	d9000115 	stw	r4,4(sp)
   41128:	0009883a 	mov	r4,zero
   4112c:	000b883a 	mov	r5,zero
   41130:	180d883a 	mov	r6,r3
   41134:	100f883a 	mov	r7,r2
   41138:	0041c6c0 	call	41c6c <vid_paint_block>
}
   4113c:	e037883a 	mov	sp,fp
   41140:	dfc00117 	ldw	ra,4(sp)
   41144:	df000017 	ldw	fp,0(sp)
   41148:	dec00204 	addi	sp,sp,8
   4114c:	f800283a 	ret

00041150 <vid_draw_line>:
*           vid_draw_horiz_line(), which is much faster than 
*           vid_draw_sloped_line.
*
******************************************************************/
__inline__ void vid_draw_line(int horiz_start, int vert_start, int horiz_end, int vert_end, int width, int color, alt_video_display* display)
{
   41150:	defff704 	addi	sp,sp,-36
   41154:	dfc00815 	stw	ra,32(sp)
   41158:	df000715 	stw	fp,28(sp)
   4115c:	df000704 	addi	fp,sp,28
   41160:	e13ffc15 	stw	r4,-16(fp)
   41164:	e17ffd15 	stw	r5,-12(fp)
   41168:	e1bffe15 	stw	r6,-8(fp)
   4116c:	e1ffff15 	stw	r7,-4(fp)
 
  if( vert_start == vert_end )
   41170:	e0fffd17 	ldw	r3,-12(fp)
   41174:	e0bfff17 	ldw	r2,-4(fp)
   41178:	1880111e 	bne	r3,r2,411c0 <vid_draw_line+0x70>
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
   4117c:	e0bffc17 	ldw	r2,-16(fp)
   41180:	113fffcc 	andi	r4,r2,65535
   41184:	2120001c 	xori	r4,r4,32768
   41188:	21200004 	addi	r4,r4,-32768
   4118c:	e0bffe17 	ldw	r2,-8(fp)
   41190:	10ffffcc 	andi	r3,r2,65535
   41194:	18e0001c 	xori	r3,r3,32768
   41198:	18e00004 	addi	r3,r3,-32768
                         (unsigned short)horiz_end, 
                         (unsigned short)vert_start,
   4119c:	e0bffd17 	ldw	r2,-12(fp)
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
   411a0:	10bfffcc 	andi	r2,r2,65535
   411a4:	e1400417 	ldw	r5,16(fp)
   411a8:	d9400015 	stw	r5,0(sp)
   411ac:	180b883a 	mov	r5,r3
   411b0:	100d883a 	mov	r6,r2
   411b4:	e1c00317 	ldw	r7,12(fp)
   411b8:	0041d000 	call	41d00 <vid_draw_horiz_line>
   411bc:	00001206 	br	41208 <vid_draw_line+0xb8>
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
   411c0:	e0bffc17 	ldw	r2,-16(fp)
   411c4:	113fffcc 	andi	r4,r2,65535
                          (unsigned short)vert_start, 
   411c8:	e0bffd17 	ldw	r2,-12(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
   411cc:	117fffcc 	andi	r5,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
   411d0:	e0bffe17 	ldw	r2,-8(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
   411d4:	10ffffcc 	andi	r3,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
   411d8:	e0bfff17 	ldw	r2,-4(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
   411dc:	10bfffcc 	andi	r2,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
   411e0:	e1800217 	ldw	r6,8(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
   411e4:	31bfffcc 	andi	r6,r6,65535
   411e8:	d9800015 	stw	r6,0(sp)
   411ec:	e1800317 	ldw	r6,12(fp)
   411f0:	d9800115 	stw	r6,4(sp)
   411f4:	e1800417 	ldw	r6,16(fp)
   411f8:	d9800215 	stw	r6,8(sp)
   411fc:	180d883a 	mov	r6,r3
   41200:	100f883a 	mov	r7,r2
   41204:	0041f100 	call	41f10 <vid_draw_sloped_line>
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
  }
}
   41208:	e037883a 	mov	sp,fp
   4120c:	dfc00117 	ldw	ra,4(sp)
   41210:	df000017 	ldw	fp,0(sp)
   41214:	dec00204 	addi	sp,sp,8
   41218:	f800283a 	ret

0004121c <vid_scroll_string_quit>:



void vid_scroll_string_quit(vid_text_scroll_struct* scroll)
{
   4121c:	defffd04 	addi	sp,sp,-12
   41220:	dfc00215 	stw	ra,8(sp)
   41224:	df000115 	stw	fp,4(sp)
   41228:	df000104 	addi	fp,sp,4
   4122c:	e13fff15 	stw	r4,-4(fp)
  free(scroll->string);
   41230:	e0bfff17 	ldw	r2,-4(fp)
   41234:	10800517 	ldw	r2,20(r2)
   41238:	1009883a 	mov	r4,r2
   4123c:	0049cd80 	call	49cd8 <free>
  free(scroll);
   41240:	e13fff17 	ldw	r4,-4(fp)
   41244:	0049cd80 	call	49cd8 <free>
}
   41248:	e037883a 	mov	sp,fp
   4124c:	dfc00117 	ldw	ra,4(sp)
   41250:	df000017 	ldw	fp,0(sp)
   41254:	dec00204 	addi	sp,sp,8
   41258:	f800283a 	ret

0004125c <vid_scroll_string_init>:

vid_text_scroll_struct* vid_scroll_string_init(int hbegin, int vbegin, int hend, int f_color, int b_color, char* font, int ms_delay, char *string)
{
   4125c:	defff904 	addi	sp,sp,-28
   41260:	dfc00615 	stw	ra,24(sp)
   41264:	df000515 	stw	fp,20(sp)
   41268:	df000504 	addi	fp,sp,20
   4126c:	e13ffc15 	stw	r4,-16(fp)
   41270:	e17ffd15 	stw	r5,-12(fp)
   41274:	e1bffe15 	stw	r6,-8(fp)
   41278:	e1ffff15 	stw	r7,-4(fp)
  vid_text_scroll_struct* scroll;
  scroll = malloc(sizeof (vid_text_scroll_struct));
   4127c:	01000f04 	movi	r4,60
   41280:	0049cc40 	call	49cc4 <malloc>
   41284:	e0bffb15 	stw	r2,-20(fp)
  
  scroll->hbegin = hbegin;
   41288:	e0bffb17 	ldw	r2,-20(fp)
   4128c:	e0fffc17 	ldw	r3,-16(fp)
   41290:	10c00015 	stw	r3,0(r2)
  scroll->vbegin = vbegin;
   41294:	e0bffb17 	ldw	r2,-20(fp)
   41298:	e0fffd17 	ldw	r3,-12(fp)
   4129c:	10c00115 	stw	r3,4(r2)
  scroll->hend = hend;
   412a0:	e0bffb17 	ldw	r2,-20(fp)
   412a4:	e0fffe17 	ldw	r3,-8(fp)
   412a8:	10c00215 	stw	r3,8(r2)
  scroll->f_color = f_color;
   412ac:	e0bffb17 	ldw	r2,-20(fp)
   412b0:	e0ffff17 	ldw	r3,-4(fp)
   412b4:	10c00315 	stw	r3,12(r2)
  scroll->b_color = b_color;
   412b8:	e0bffb17 	ldw	r2,-20(fp)
   412bc:	e0c00217 	ldw	r3,8(fp)
   412c0:	10c00415 	stw	r3,16(r2)
  scroll->string = malloc(strlen(string)+2);
   412c4:	e1000517 	ldw	r4,20(fp)
   412c8:	004a61c0 	call	4a61c <strlen>
   412cc:	10800084 	addi	r2,r2,2
   412d0:	1009883a 	mov	r4,r2
   412d4:	0049cc40 	call	49cc4 <malloc>
   412d8:	1007883a 	mov	r3,r2
   412dc:	e0bffb17 	ldw	r2,-20(fp)
   412e0:	10c00515 	stw	r3,20(r2)
  strcpy(scroll->string, string);
   412e4:	e0bffb17 	ldw	r2,-20(fp)
   412e8:	10800517 	ldw	r2,20(r2)
   412ec:	1009883a 	mov	r4,r2
   412f0:	e1400517 	ldw	r5,20(fp)
   412f4:	004a5fc0 	call	4a5fc <strcpy>
  scroll->font = font;
   412f8:	e0bffb17 	ldw	r2,-20(fp)
   412fc:	e0c00317 	ldw	r3,12(fp)
   41300:	10c00615 	stw	r3,24(r2)
  scroll->ms_delay = ms_delay;
   41304:	e0bffb17 	ldw	r2,-20(fp)
   41308:	e0c00417 	ldw	r3,16(fp)
   4130c:	10c00715 	stw	r3,28(r2)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   41310:	008001f4 	movhi	r2,7
   41314:	10afa504 	addi	r2,r2,-16748
   41318:	10800017 	ldw	r2,0(r2)
  scroll->ticks_at_last_move = alt_nticks();
   4131c:	1007883a 	mov	r3,r2
   41320:	e0bffb17 	ldw	r2,-20(fp)
   41324:	10c00815 	stw	r3,32(r2)
  scroll->text_scroll_index = 0;
   41328:	e0bffb17 	ldw	r2,-20(fp)
   4132c:	10000915 	stw	zero,36(r2)
  scroll->text_scroll_started = 0;
   41330:	e0bffb17 	ldw	r2,-20(fp)
   41334:	10000a05 	stb	zero,40(r2)
  scroll->window_width = scroll->hend - scroll->hbegin;
   41338:	e0bffb17 	ldw	r2,-20(fp)
   4133c:	10c00217 	ldw	r3,8(r2)
   41340:	e0bffb17 	ldw	r2,-20(fp)
   41344:	10800017 	ldw	r2,0(r2)
   41348:	1887c83a 	sub	r3,r3,r2
   4134c:	e0bffb17 	ldw	r2,-20(fp)
   41350:	10c00b15 	stw	r3,44(r2)
  scroll->length_of_string = strlen(string);
   41354:	e1000517 	ldw	r4,20(fp)
   41358:	004a61c0 	call	4a61c <strlen>
   4135c:	1007883a 	mov	r3,r2
   41360:	e0bffb17 	ldw	r2,-20(fp)
   41364:	10c00c15 	stw	r3,48(r2)
  scroll->string_points = scroll->length_of_string * 8;
   41368:	e0bffb17 	ldw	r2,-20(fp)
   4136c:	10800c17 	ldw	r2,48(r2)
   41370:	100690fa 	slli	r3,r2,3
   41374:	e0bffb17 	ldw	r2,-20(fp)
   41378:	10c00e15 	stw	r3,56(r2)
  scroll->scroll_points = (scroll->window_width + scroll->string_points);
   4137c:	e0bffb17 	ldw	r2,-20(fp)
   41380:	10c00b17 	ldw	r3,44(r2)
   41384:	e0bffb17 	ldw	r2,-20(fp)
   41388:	10800e17 	ldw	r2,56(r2)
   4138c:	1887883a 	add	r3,r3,r2
   41390:	e0bffb17 	ldw	r2,-20(fp)
   41394:	10c00d15 	stw	r3,52(r2)
 
  return(scroll);
   41398:	e0bffb17 	ldw	r2,-20(fp)
  
}
   4139c:	e037883a 	mov	sp,fp
   413a0:	dfc00117 	ldw	ra,4(sp)
   413a4:	df000017 	ldw	fp,0(sp)
   413a8:	dec00204 	addi	sp,sp,8
   413ac:	f800283a 	ret

000413b0 <vid_scroll_string>:


int vid_scroll_string(vid_text_scroll_struct* scroll, alt_video_display* display)
{
   413b0:	deffec04 	addi	sp,sp,-80
   413b4:	dfc01315 	stw	ra,76(sp)
   413b8:	df001215 	stw	fp,72(sp)
   413bc:	dc401115 	stw	r17,68(sp)
   413c0:	dc001015 	stw	r16,64(sp)
   413c4:	df001204 	addi	fp,sp,72
   413c8:	e13ffc15 	stw	r4,-16(fp)
   413cc:	e17ffd15 	stw	r5,-12(fp)

  int x_start, x_end, x_index, string_x_index, string_char_index, char_row, char_column;
  char character, column_mask;
  char* font_char_ptr;
  char pixels_to_move_by = 1;
   413d0:	00800044 	movi	r2,1
   413d4:	e0bff605 	stb	r2,-40(fp)
   413d8:	008001f4 	movhi	r2,7
   413dc:	10afa504 	addi	r2,r2,-16748
   413e0:	10800017 	ldw	r2,0(r2)

  // If it's time to move the scroll..
  if (alt_nticks() >= (scroll->ticks_at_last_move + ((alt_ticks_per_second() * (scroll->ms_delay)) / 1000))) {
   413e4:	1021883a 	mov	r16,r2
   413e8:	e0bffc17 	ldw	r2,-16(fp)
   413ec:	10800817 	ldw	r2,32(r2)
   413f0:	1023883a 	mov	r17,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   413f4:	008001f4 	movhi	r2,7
   413f8:	10afa404 	addi	r2,r2,-16752
   413fc:	10800017 	ldw	r2,0(r2)
   41400:	1007883a 	mov	r3,r2
   41404:	e0bffc17 	ldw	r2,-16(fp)
   41408:	10800717 	ldw	r2,28(r2)
   4140c:	1885383a 	mul	r2,r3,r2
   41410:	1009883a 	mov	r4,r2
   41414:	0140fa04 	movi	r5,1000
   41418:	00478f80 	call	478f8 <__udivsi3>
   4141c:	8885883a 	add	r2,r17,r2
   41420:	8080bb36 	bltu	r16,r2,41710 <vid_scroll_string+0x360>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   41424:	008001f4 	movhi	r2,7
   41428:	10afa504 	addi	r2,r2,-16748
   4142c:	10800017 	ldw	r2,0(r2)
    scroll->ticks_at_last_move = alt_nticks();
   41430:	1007883a 	mov	r3,r2
   41434:	e0bffc17 	ldw	r2,-16(fp)
   41438:	10c00815 	stw	r3,32(r2)
    
    // Track where we are in the scroll.
    if(scroll->text_scroll_started == 0) {
   4143c:	e0bffc17 	ldw	r2,-16(fp)
   41440:	10800a03 	ldbu	r2,40(r2)
   41444:	10803fcc 	andi	r2,r2,255
   41448:	1080201c 	xori	r2,r2,128
   4144c:	10bfe004 	addi	r2,r2,-128
   41450:	1000061e 	bne	r2,zero,4146c <vid_scroll_string+0xbc>
      scroll->text_scroll_index = 0;
   41454:	e0bffc17 	ldw	r2,-16(fp)
   41458:	10000915 	stw	zero,36(r2)
      scroll->text_scroll_started = 1;
   4145c:	e0bffc17 	ldw	r2,-16(fp)
   41460:	00c00044 	movi	r3,1
   41464:	10c00a05 	stb	r3,40(r2)
   41468:	00000e06 	br	414a4 <vid_scroll_string+0xf4>
    } else if(scroll->text_scroll_index >= scroll->scroll_points)  {
   4146c:	e0bffc17 	ldw	r2,-16(fp)
   41470:	10c00917 	ldw	r3,36(r2)
   41474:	e0bffc17 	ldw	r2,-16(fp)
   41478:	10800d17 	ldw	r2,52(r2)
   4147c:	18800316 	blt	r3,r2,4148c <vid_scroll_string+0xdc>
      scroll->text_scroll_started = 0;
   41480:	e0bffc17 	ldw	r2,-16(fp)
   41484:	10000a05 	stb	zero,40(r2)
   41488:	00000606 	br	414a4 <vid_scroll_string+0xf4>
    } else {
      scroll->text_scroll_index += pixels_to_move_by;
   4148c:	e0bffc17 	ldw	r2,-16(fp)
   41490:	10c00917 	ldw	r3,36(r2)
   41494:	e0bff607 	ldb	r2,-40(fp)
   41498:	1887883a 	add	r3,r3,r2
   4149c:	e0bffc17 	ldw	r2,-16(fp)
   414a0:	10c00915 	stw	r3,36(r2)
    }
    
    //Find out where we start
    if (scroll->text_scroll_index < scroll->window_width) {
   414a4:	e0bffc17 	ldw	r2,-16(fp)
   414a8:	10c00917 	ldw	r3,36(r2)
   414ac:	e0bffc17 	ldw	r2,-16(fp)
   414b0:	10800b17 	ldw	r2,44(r2)
   414b4:	18800a0e 	bge	r3,r2,414e0 <vid_scroll_string+0x130>
      x_start = scroll->hbegin + scroll->window_width - scroll->text_scroll_index;
   414b8:	e0bffc17 	ldw	r2,-16(fp)
   414bc:	10c00017 	ldw	r3,0(r2)
   414c0:	e0bffc17 	ldw	r2,-16(fp)
   414c4:	10800b17 	ldw	r2,44(r2)
   414c8:	1887883a 	add	r3,r3,r2
   414cc:	e0bffc17 	ldw	r2,-16(fp)
   414d0:	10800917 	ldw	r2,36(r2)
   414d4:	1885c83a 	sub	r2,r3,r2
   414d8:	e0bff115 	stw	r2,-60(fp)
   414dc:	00000306 	br	414ec <vid_scroll_string+0x13c>
    } else {
      x_start = scroll->hbegin;
   414e0:	e0bffc17 	ldw	r2,-16(fp)
   414e4:	10800017 	ldw	r2,0(r2)
   414e8:	e0bff115 	stw	r2,-60(fp)
    }
    //Find out where we end
    if (scroll->string_points > scroll->text_scroll_index) {
   414ec:	e0bffc17 	ldw	r2,-16(fp)
   414f0:	10800e17 	ldw	r2,56(r2)
   414f4:	e0fffc17 	ldw	r3,-16(fp)
   414f8:	18c00917 	ldw	r3,36(r3)
   414fc:	1880040e 	bge	r3,r2,41510 <vid_scroll_string+0x160>
      x_end = scroll->hend;
   41500:	e0bffc17 	ldw	r2,-16(fp)
   41504:	10800217 	ldw	r2,8(r2)
   41508:	e0bff215 	stw	r2,-56(fp)
   4150c:	00000906 	br	41534 <vid_scroll_string+0x184>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
   41510:	e0bffc17 	ldw	r2,-16(fp)
   41514:	10c00217 	ldw	r3,8(r2)
   41518:	e0bffc17 	ldw	r2,-16(fp)
   4151c:	10800917 	ldw	r2,36(r2)
   41520:	1887c83a 	sub	r3,r3,r2
   41524:	e0bffc17 	ldw	r2,-16(fp)
   41528:	10800e17 	ldw	r2,56(r2)
   4152c:	1885883a 	add	r2,r3,r2
   41530:	e0bff215 	stw	r2,-56(fp)
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
   41534:	e0bff117 	ldw	r2,-60(fp)
   41538:	e0bff315 	stw	r2,-52(fp)
   4153c:	00006006 	br	416c0 <vid_scroll_string+0x310>
      // Find the x index we're at within the string
      // If first part of string hasnt yet reached left side of scroll window
      if (scroll->text_scroll_index < scroll->window_width) {
   41540:	e0bffc17 	ldw	r2,-16(fp)
   41544:	10c00917 	ldw	r3,36(r2)
   41548:	e0bffc17 	ldw	r2,-16(fp)
   4154c:	10800b17 	ldw	r2,44(r2)
   41550:	1880050e 	bge	r3,r2,41568 <vid_scroll_string+0x1b8>
        string_x_index = (x_index - x_start);
   41554:	e0fff317 	ldw	r3,-52(fp)
   41558:	e0bff117 	ldw	r2,-60(fp)
   4155c:	1885c83a 	sub	r2,r3,r2
   41560:	e0bff415 	stw	r2,-48(fp)
   41564:	00000a06 	br	41590 <vid_scroll_string+0x1e0>
      } else {
        string_x_index = scroll->text_scroll_index - scroll->window_width + x_index - x_start;
   41568:	e0bffc17 	ldw	r2,-16(fp)
   4156c:	10c00917 	ldw	r3,36(r2)
   41570:	e0bffc17 	ldw	r2,-16(fp)
   41574:	10800b17 	ldw	r2,44(r2)
   41578:	1887c83a 	sub	r3,r3,r2
   4157c:	e0bff317 	ldw	r2,-52(fp)
   41580:	1887883a 	add	r3,r3,r2
   41584:	e0bff117 	ldw	r2,-60(fp)
   41588:	1885c83a 	sub	r2,r3,r2
   4158c:	e0bff415 	stw	r2,-48(fp)
      }
      //Find the character we're supposed to be writing
      string_char_index = (string_x_index / 8);
   41590:	e0bff417 	ldw	r2,-48(fp)
   41594:	1000010e 	bge	r2,zero,4159c <vid_scroll_string+0x1ec>
   41598:	108001c4 	addi	r2,r2,7
   4159c:	1005d0fa 	srai	r2,r2,3
   415a0:	e0bff715 	stw	r2,-36(fp)
      character = scroll->string[string_char_index];
   415a4:	e0bffc17 	ldw	r2,-16(fp)
   415a8:	10c00517 	ldw	r3,20(r2)
   415ac:	e0bff717 	ldw	r2,-36(fp)
   415b0:	1885883a 	add	r2,r3,r2
   415b4:	10800003 	ldbu	r2,0(r2)
   415b8:	e0bff805 	stb	r2,-32(fp)
      char_column = (string_x_index % 8);
   415bc:	e0fff417 	ldw	r3,-48(fp)
   415c0:	00a00034 	movhi	r2,32768
   415c4:	108001c4 	addi	r2,r2,7
   415c8:	1884703a 	and	r2,r3,r2
   415cc:	1000040e 	bge	r2,zero,415e0 <vid_scroll_string+0x230>
   415d0:	10bfffc4 	addi	r2,r2,-1
   415d4:	00fffe04 	movi	r3,-8
   415d8:	10c4b03a 	or	r2,r2,r3
   415dc:	10800044 	addi	r2,r2,1
   415e0:	e0bff915 	stw	r2,-28(fp)
      column_mask = (((unsigned int)0x80) >> char_column);
   415e4:	00c02004 	movi	r3,128
   415e8:	e0bff917 	ldw	r2,-28(fp)
   415ec:	1884d83a 	srl	r2,r3,r2
   415f0:	e0bffa05 	stb	r2,-24(fp)
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
   415f4:	e0bffc17 	ldw	r2,-16(fp)
   415f8:	10c00617 	ldw	r3,24(r2)
   415fc:	e0bff807 	ldb	r2,-32(fp)
   41600:	10bff804 	addi	r2,r2,-32
   41604:	108002e4 	muli	r2,r2,11
   41608:	1885883a 	add	r2,r3,r2
   4160c:	e0bffb15 	stw	r2,-20(fp)
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
   41610:	e03ff515 	stw	zero,-44(fp)
   41614:	00002406 	br	416a8 <vid_scroll_string+0x2f8>
        // If the font table says this pixel is on, then set it to the foreground color
        if (*(font_char_ptr + char_row) & column_mask) {
   41618:	e0bff517 	ldw	r2,-44(fp)
   4161c:	e0fffb17 	ldw	r3,-20(fp)
   41620:	1885883a 	add	r2,r3,r2
   41624:	10c00003 	ldbu	r3,0(r2)
   41628:	e0bffa03 	ldbu	r2,-24(fp)
   4162c:	1884703a 	and	r2,r3,r2
   41630:	10803fcc 	andi	r2,r2,255
   41634:	1080201c 	xori	r2,r2,128
   41638:	10bfe004 	addi	r2,r2,-128
   4163c:	10000c26 	beq	r2,zero,41670 <vid_scroll_string+0x2c0>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->f_color, display); 
   41640:	e0bffc17 	ldw	r2,-16(fp)
   41644:	10c00117 	ldw	r3,4(r2)
   41648:	e0bff517 	ldw	r2,-44(fp)
   4164c:	1887883a 	add	r3,r3,r2
   41650:	e0bffc17 	ldw	r2,-16(fp)
   41654:	10800317 	ldw	r2,12(r2)
   41658:	e13ff317 	ldw	r4,-52(fp)
   4165c:	180b883a 	mov	r5,r3
   41660:	100d883a 	mov	r6,r2
   41664:	e1fffd17 	ldw	r7,-12(fp)
   41668:	0041b940 	call	41b94 <vid_set_pixel>
   4166c:	00000b06 	br	4169c <vid_scroll_string+0x2ec>
        // Otherwise, set it to the background color.
        } else {
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
   41670:	e0bffc17 	ldw	r2,-16(fp)
   41674:	10c00117 	ldw	r3,4(r2)
   41678:	e0bff517 	ldw	r2,-44(fp)
   4167c:	1887883a 	add	r3,r3,r2
   41680:	e0bffc17 	ldw	r2,-16(fp)
   41684:	10800417 	ldw	r2,16(r2)
   41688:	e13ff317 	ldw	r4,-52(fp)
   4168c:	180b883a 	mov	r5,r3
   41690:	100d883a 	mov	r6,r2
   41694:	e1fffd17 	ldw	r7,-12(fp)
   41698:	0041b940 	call	41b94 <vid_set_pixel>
      character = scroll->string[string_char_index];
      char_column = (string_x_index % 8);
      column_mask = (((unsigned int)0x80) >> char_column);
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
   4169c:	e0bff517 	ldw	r2,-44(fp)
   416a0:	10800044 	addi	r2,r2,1
   416a4:	e0bff515 	stw	r2,-44(fp)
   416a8:	e0bff517 	ldw	r2,-44(fp)
   416ac:	108002d0 	cmplti	r2,r2,11
   416b0:	103fd91e 	bne	r2,zero,41618 <__alt_data_end+0xfffcbab8>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
   416b4:	e0bff317 	ldw	r2,-52(fp)
   416b8:	10800044 	addi	r2,r2,1
   416bc:	e0bff315 	stw	r2,-52(fp)
   416c0:	e0fff317 	ldw	r3,-52(fp)
   416c4:	e0bff217 	ldw	r2,-56(fp)
   416c8:	18bf9d16 	blt	r3,r2,41540 <__alt_data_end+0xfffcb9e0>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
        }
      }
    }
    // Erase the leftover column (x) of the last string we wrote.
    vid_draw_line(x_end, scroll->vbegin, x_end, scroll->vbegin + 10, 1, scroll->b_color, display);
   416cc:	e0bffc17 	ldw	r2,-16(fp)
   416d0:	10c00117 	ldw	r3,4(r2)
   416d4:	e0bffc17 	ldw	r2,-16(fp)
   416d8:	10800117 	ldw	r2,4(r2)
   416dc:	10800284 	addi	r2,r2,10
   416e0:	e13ffc17 	ldw	r4,-16(fp)
   416e4:	21000417 	ldw	r4,16(r4)
   416e8:	01400044 	movi	r5,1
   416ec:	d9400015 	stw	r5,0(sp)
   416f0:	d9000115 	stw	r4,4(sp)
   416f4:	e13ffd17 	ldw	r4,-12(fp)
   416f8:	d9000215 	stw	r4,8(sp)
   416fc:	e13ff217 	ldw	r4,-56(fp)
   41700:	180b883a 	mov	r5,r3
   41704:	e1bff217 	ldw	r6,-56(fp)
   41708:	100f883a 	mov	r7,r2
   4170c:	00411500 	call	41150 <vid_draw_line>
    // Log what time we moved the scroll.
  }
  return(0);
   41710:	0005883a 	mov	r2,zero
}
   41714:	e6fffe04 	addi	sp,fp,-8
   41718:	dfc00317 	ldw	ra,12(sp)
   4171c:	df000217 	ldw	fp,8(sp)
   41720:	dc400117 	ldw	r17,4(sp)
   41724:	dc000017 	ldw	r16,0(sp)
   41728:	dec00404 	addi	sp,sp,16
   4172c:	f800283a 	ret

00041730 <vid_move_block>:
*           the backfill_color parameter.
*
******************************************************************/

int vid_move_block(int xbegin, int ybegin, int xend, int yend, int x_distance, int y_distance, int backfill_color, alt_video_display* display)
{
   41730:	defff504 	addi	sp,sp,-44
   41734:	dfc00a15 	stw	ra,40(sp)
   41738:	df000915 	stw	fp,36(sp)
   4173c:	df000904 	addi	fp,sp,36
   41740:	e13ffc15 	stw	r4,-16(fp)
   41744:	e17ffd15 	stw	r5,-12(fp)
   41748:	e1bffe15 	stw	r6,-8(fp)
   4174c:	e1ffff15 	stw	r7,-4(fp)
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
   41750:	e0800217 	ldw	r2,8(fp)
   41754:	00803716 	blt	zero,r2,41834 <vid_move_block+0x104>
   41758:	e0800317 	ldw	r2,12(fp)
   4175c:	00803516 	blt	zero,r2,41834 <vid_move_block+0x104>
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
   41760:	e0bffd17 	ldw	r2,-12(fp)
   41764:	e0bff815 	stw	r2,-32(fp)
   41768:	00002f06 	br	41828 <vid_move_block+0xf8>
      write_y = read_y + y_distance;
   4176c:	e0fff817 	ldw	r3,-32(fp)
   41770:	e0800317 	ldw	r2,12(fp)
   41774:	1885883a 	add	r2,r3,r2
   41778:	e0bff915 	stw	r2,-28(fp)
      for(read_x = xbegin; read_x < xend; read_x++) {
   4177c:	e0bffc17 	ldw	r2,-16(fp)
   41780:	e0bff715 	stw	r2,-36(fp)
   41784:	00002206 	br	41810 <vid_move_block+0xe0>
        write_x = read_x + x_distance;
   41788:	e0fff717 	ldw	r3,-36(fp)
   4178c:	e0800217 	ldw	r2,8(fp)
   41790:	1885883a 	add	r2,r3,r2
   41794:	e0bffa15 	stw	r2,-24(fp)
        temp_pixel = vid_get_pixel(read_x, read_y, display);
   41798:	e13ff717 	ldw	r4,-36(fp)
   4179c:	e17ff817 	ldw	r5,-32(fp)
   417a0:	e1800517 	ldw	r6,20(fp)
   417a4:	0041c300 	call	41c30 <vid_get_pixel>
   417a8:	e0bffb0d 	sth	r2,-20(fp)
        vid_set_pixel(write_x, write_y, temp_pixel, display);
   417ac:	e0bffb0f 	ldh	r2,-20(fp)
   417b0:	e13ffa17 	ldw	r4,-24(fp)
   417b4:	e17ff917 	ldw	r5,-28(fp)
   417b8:	100d883a 	mov	r6,r2
   417bc:	e1c00517 	ldw	r7,20(fp)
   417c0:	0041b940 	call	41b94 <vid_set_pixel>
        if(read_x >= xend + x_distance || read_y >= yend + y_distance) 
   417c4:	e0fffe17 	ldw	r3,-8(fp)
   417c8:	e0800217 	ldw	r2,8(fp)
   417cc:	1885883a 	add	r2,r3,r2
   417d0:	e0fff717 	ldw	r3,-36(fp)
   417d4:	1880050e 	bge	r3,r2,417ec <vid_move_block+0xbc>
   417d8:	e0ffff17 	ldw	r3,-4(fp)
   417dc:	e0800317 	ldw	r2,12(fp)
   417e0:	1885883a 	add	r2,r3,r2
   417e4:	e0fff817 	ldw	r3,-32(fp)
   417e8:	18800616 	blt	r3,r2,41804 <vid_move_block+0xd4>
        {
	        vid_set_pixel(read_x, read_y, backfill_color, display);
   417ec:	e0800417 	ldw	r2,16(fp)
   417f0:	e13ff717 	ldw	r4,-36(fp)
   417f4:	e17ff817 	ldw	r5,-32(fp)
   417f8:	100d883a 	mov	r6,r2
   417fc:	e1c00517 	ldw	r7,20(fp)
   41800:	0041b940 	call	41b94 <vid_set_pixel>
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
      write_y = read_y + y_distance;
      for(read_x = xbegin; read_x < xend; read_x++) {
   41804:	e0bff717 	ldw	r2,-36(fp)
   41808:	10800044 	addi	r2,r2,1
   4180c:	e0bff715 	stw	r2,-36(fp)
   41810:	e0fff717 	ldw	r3,-36(fp)
   41814:	e0bffe17 	ldw	r2,-8(fp)
   41818:	18bfdb16 	blt	r3,r2,41788 <__alt_data_end+0xfffcbc28>
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
   4181c:	e0bff817 	ldw	r2,-32(fp)
   41820:	10800044 	addi	r2,r2,1
   41824:	e0bff815 	stw	r2,-32(fp)
   41828:	e0fff817 	ldw	r3,-32(fp)
   4182c:	e0bfff17 	ldw	r2,-4(fp)
   41830:	18bfce16 	blt	r3,r2,4176c <__alt_data_end+0xfffcbc0c>
	        vid_set_pixel(read_x, read_y, backfill_color, display);
        }
      }
    }
  }
  return (0);
   41834:	0005883a 	mov	r2,zero
}
   41838:	e037883a 	mov	sp,fp
   4183c:	dfc00117 	ldw	ra,4(sp)
   41840:	df000017 	ldw	fp,0(sp)
   41844:	dec00204 	addi	sp,sp,8
   41848:	f800283a 	ret

0004184c <vid_print_string>:
*           using the specified font and color.
*           Calls vid_print_char
*
******************************************************************/
int vid_print_string(int horiz_offset, int vert_offset, int color, char *font, alt_video_display* display, char string[])
{
   4184c:	defff604 	addi	sp,sp,-40
   41850:	dfc00915 	stw	ra,36(sp)
   41854:	df000815 	stw	fp,32(sp)
   41858:	df000804 	addi	fp,sp,32
   4185c:	e13ffc15 	stw	r4,-16(fp)
   41860:	e17ffd15 	stw	r5,-12(fp)
   41864:	e1bffe15 	stw	r6,-8(fp)
   41868:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
   4186c:	e03ffa15 	stw	zero,-24(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
   41870:	e0bffc17 	ldw	r2,-16(fp)
   41874:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
   41878:	00002806 	br	4191c <vid_print_string+0xd0>
    //Handle newline char here.
    if (string[i] == '\n') {
   4187c:	e0bffa17 	ldw	r2,-24(fp)
   41880:	e0c00317 	ldw	r3,12(fp)
   41884:	1885883a 	add	r2,r3,r2
   41888:	10800003 	ldbu	r2,0(r2)
   4188c:	10803fcc 	andi	r2,r2,255
   41890:	1080201c 	xori	r2,r2,128
   41894:	10bfe004 	addi	r2,r2,-128
   41898:	10800298 	cmpnei	r2,r2,10
   4189c:	1000091e 	bne	r2,zero,418c4 <vid_print_string+0x78>
      horiz_offset = original_horiz_offset;
   418a0:	e0bffb17 	ldw	r2,-20(fp)
   418a4:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += 12;
   418a8:	e0bffd17 	ldw	r2,-12(fp)
   418ac:	10800304 	addi	r2,r2,12
   418b0:	e0bffd15 	stw	r2,-12(fp)
      i++;
   418b4:	e0bffa17 	ldw	r2,-24(fp)
   418b8:	10800044 	addi	r2,r2,1
   418bc:	e0bffa15 	stw	r2,-24(fp)
      continue;
   418c0:	00001606 	br	4191c <vid_print_string+0xd0>
    }
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
   418c4:	e0bffa17 	ldw	r2,-24(fp)
   418c8:	e0c00317 	ldw	r3,12(fp)
   418cc:	1885883a 	add	r2,r3,r2
   418d0:	10800003 	ldbu	r2,0(r2)
   418d4:	10803fcc 	andi	r2,r2,255
   418d8:	1080201c 	xori	r2,r2,128
   418dc:	10bfe004 	addi	r2,r2,-128
   418e0:	e0ffff17 	ldw	r3,-4(fp)
   418e4:	d8c00015 	stw	r3,0(sp)
   418e8:	e0c00217 	ldw	r3,8(fp)
   418ec:	d8c00115 	stw	r3,4(sp)
   418f0:	e13ffc17 	ldw	r4,-16(fp)
   418f4:	e17ffd17 	ldw	r5,-12(fp)
   418f8:	e1bffe17 	ldw	r6,-8(fp)
   418fc:	100f883a 	mov	r7,r2
   41900:	0041aa40 	call	41aa4 <vid_print_char>
    i++;
   41904:	e0bffa17 	ldw	r2,-24(fp)
   41908:	10800044 	addi	r2,r2,1
   4190c:	e0bffa15 	stw	r2,-24(fp)
    horiz_offset += 8;
   41910:	e0bffc17 	ldw	r2,-16(fp)
   41914:	10800204 	addi	r2,r2,8
   41918:	e0bffc15 	stw	r2,-16(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
   4191c:	e0bffa17 	ldw	r2,-24(fp)
   41920:	e0c00317 	ldw	r3,12(fp)
   41924:	1885883a 	add	r2,r3,r2
   41928:	10800003 	ldbu	r2,0(r2)
   4192c:	10803fcc 	andi	r2,r2,255
   41930:	1080201c 	xori	r2,r2,128
   41934:	10bfe004 	addi	r2,r2,-128
   41938:	103fd01e 	bne	r2,zero,4187c <__alt_data_end+0xfffcbd1c>
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
    i++;
    horiz_offset += 8;
  }
  return (0);
   4193c:	0005883a 	mov	r2,zero
}
   41940:	e037883a 	mov	sp,fp
   41944:	dfc00117 	ldw	ra,4(sp)
   41948:	df000017 	ldw	fp,0(sp)
   4194c:	dec00204 	addi	sp,sp,8
   41950:	f800283a 	ret

00041954 <vid_draw_box>:
*  points.  The fill parameter tells the function whether or not
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_box (int horiz_start, int vert_start, int horiz_end, int vert_end, int color, int fill, alt_video_display* display)
{
   41954:	defff704 	addi	sp,sp,-36
   41958:	dfc00815 	stw	ra,32(sp)
   4195c:	df000715 	stw	fp,28(sp)
   41960:	df000704 	addi	fp,sp,28
   41964:	e13ffc15 	stw	r4,-16(fp)
   41968:	e17ffd15 	stw	r5,-12(fp)
   4196c:	e1bffe15 	stw	r6,-8(fp)
   41970:	e1ffff15 	stw	r7,-4(fp)

  // If we want to fill in our box
  if (fill) {
   41974:	e0800317 	ldw	r2,12(fp)
   41978:	10000a26 	beq	r2,zero,419a4 <vid_draw_box+0x50>
     vid_paint_block (horiz_start, vert_start, horiz_end, vert_end, color, display);
   4197c:	e0800217 	ldw	r2,8(fp)
   41980:	d8800015 	stw	r2,0(sp)
   41984:	e0800417 	ldw	r2,16(fp)
   41988:	d8800115 	stw	r2,4(sp)
   4198c:	e13ffc17 	ldw	r4,-16(fp)
   41990:	e17ffd17 	ldw	r5,-12(fp)
   41994:	e1bffe17 	ldw	r6,-8(fp)
   41998:	e1ffff17 	ldw	r7,-4(fp)
   4199c:	0041c6c0 	call	41c6c <vid_paint_block>
   419a0:	00003a06 	br	41a8c <vid_draw_box+0x138>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start, horiz_start, vert_end-1, 1, color, display);
   419a4:	e0bfff17 	ldw	r2,-4(fp)
   419a8:	10bfffc4 	addi	r2,r2,-1
   419ac:	00c00044 	movi	r3,1
   419b0:	d8c00015 	stw	r3,0(sp)
   419b4:	e0c00217 	ldw	r3,8(fp)
   419b8:	d8c00115 	stw	r3,4(sp)
   419bc:	e0c00417 	ldw	r3,16(fp)
   419c0:	d8c00215 	stw	r3,8(sp)
   419c4:	e13ffc17 	ldw	r4,-16(fp)
   419c8:	e17ffd17 	ldw	r5,-12(fp)
   419cc:	e1bffc17 	ldw	r6,-16(fp)
   419d0:	100f883a 	mov	r7,r2
   419d4:	00411500 	call	41150 <vid_draw_line>
    vid_draw_line(horiz_end-1, vert_start, horiz_end-1, vert_end-1, 1, color, display);
   419d8:	e0bffe17 	ldw	r2,-8(fp)
   419dc:	113fffc4 	addi	r4,r2,-1
   419e0:	e0bffe17 	ldw	r2,-8(fp)
   419e4:	10ffffc4 	addi	r3,r2,-1
   419e8:	e0bfff17 	ldw	r2,-4(fp)
   419ec:	10bfffc4 	addi	r2,r2,-1
   419f0:	01400044 	movi	r5,1
   419f4:	d9400015 	stw	r5,0(sp)
   419f8:	e1400217 	ldw	r5,8(fp)
   419fc:	d9400115 	stw	r5,4(sp)
   41a00:	e1400417 	ldw	r5,16(fp)
   41a04:	d9400215 	stw	r5,8(sp)
   41a08:	e17ffd17 	ldw	r5,-12(fp)
   41a0c:	180d883a 	mov	r6,r3
   41a10:	100f883a 	mov	r7,r2
   41a14:	00411500 	call	41150 <vid_draw_line>
    vid_draw_line(horiz_start, vert_start, horiz_end-1, vert_start, 1, color, display);
   41a18:	e0bffe17 	ldw	r2,-8(fp)
   41a1c:	10bfffc4 	addi	r2,r2,-1
   41a20:	00c00044 	movi	r3,1
   41a24:	d8c00015 	stw	r3,0(sp)
   41a28:	e0c00217 	ldw	r3,8(fp)
   41a2c:	d8c00115 	stw	r3,4(sp)
   41a30:	e0c00417 	ldw	r3,16(fp)
   41a34:	d8c00215 	stw	r3,8(sp)
   41a38:	e13ffc17 	ldw	r4,-16(fp)
   41a3c:	e17ffd17 	ldw	r5,-12(fp)
   41a40:	100d883a 	mov	r6,r2
   41a44:	e1fffd17 	ldw	r7,-12(fp)
   41a48:	00411500 	call	41150 <vid_draw_line>
    vid_draw_line(horiz_start, vert_end-1, horiz_end-1, vert_end-1, 1, color, display);
   41a4c:	e0bfff17 	ldw	r2,-4(fp)
   41a50:	117fffc4 	addi	r5,r2,-1
   41a54:	e0bffe17 	ldw	r2,-8(fp)
   41a58:	10ffffc4 	addi	r3,r2,-1
   41a5c:	e0bfff17 	ldw	r2,-4(fp)
   41a60:	10bfffc4 	addi	r2,r2,-1
   41a64:	01000044 	movi	r4,1
   41a68:	d9000015 	stw	r4,0(sp)
   41a6c:	e1000217 	ldw	r4,8(fp)
   41a70:	d9000115 	stw	r4,4(sp)
   41a74:	e1000417 	ldw	r4,16(fp)
   41a78:	d9000215 	stw	r4,8(sp)
   41a7c:	e13ffc17 	ldw	r4,-16(fp)
   41a80:	180d883a 	mov	r6,r3
   41a84:	100f883a 	mov	r7,r2
   41a88:	00411500 	call	41150 <vid_draw_line>
  }

  return (0);
   41a8c:	0005883a 	mov	r2,zero
}
   41a90:	e037883a 	mov	sp,fp
   41a94:	dfc00117 	ldw	ra,4(sp)
   41a98:	df000017 	ldw	fp,0(sp)
   41a9c:	dec00204 	addi	sp,sp,8
   41aa0:	f800283a 	ret

00041aa4 <vid_print_char>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char (int horiz_offset, int vert_offset, int color, char character, char *font, alt_video_display* display)
{
   41aa4:	defff704 	addi	sp,sp,-36
   41aa8:	dfc00815 	stw	ra,32(sp)
   41aac:	df000715 	stw	fp,28(sp)
   41ab0:	df000704 	addi	fp,sp,28
   41ab4:	e13ffc15 	stw	r4,-16(fp)
   41ab8:	e17ffd15 	stw	r5,-12(fp)
   41abc:	e1bffe15 	stw	r6,-8(fp)
   41ac0:	3805883a 	mov	r2,r7
   41ac4:	e0bfff05 	stb	r2,-4(fp)
  int i, j;
  
  char temp_char, char_row;

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);
   41ac8:	e0bfff03 	ldbu	r2,-4(fp)
   41acc:	10bff804 	addi	r2,r2,-32
   41ad0:	e0bffb05 	stb	r2,-20(fp)

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
   41ad4:	e03ff915 	stw	zero,-28(fp)
   41ad8:	00002506 	br	41b70 <vid_print_char+0xcc>
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
   41adc:	e0bffb07 	ldb	r2,-20(fp)
   41ae0:	108002e4 	muli	r2,r2,11
   41ae4:	1007883a 	mov	r3,r2
   41ae8:	e0bff917 	ldw	r2,-28(fp)
   41aec:	1885883a 	add	r2,r3,r2
   41af0:	e0c00217 	ldw	r3,8(fp)
   41af4:	1885883a 	add	r2,r3,r2
   41af8:	10800003 	ldbu	r2,0(r2)
   41afc:	e0bffb45 	stb	r2,-19(fp)
    for (j = 0; j < 8; j++) {
   41b00:	e03ffa15 	stw	zero,-24(fp)
   41b04:	00001406 	br	41b58 <vid_print_char+0xb4>
      //If the font table says the pixel in this location is on for this character, then set it.
      if (char_row & (((unsigned char)0x80) >> j)) {
   41b08:	e0fffb47 	ldb	r3,-19(fp)
   41b0c:	01002004 	movi	r4,128
   41b10:	e0bffa17 	ldw	r2,-24(fp)
   41b14:	2085d83a 	sra	r2,r4,r2
   41b18:	1884703a 	and	r2,r3,r2
   41b1c:	10000b26 	beq	r2,zero,41b4c <vid_print_char+0xa8>
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
   41b20:	e0fffc17 	ldw	r3,-16(fp)
   41b24:	e0bffa17 	ldw	r2,-24(fp)
   41b28:	1889883a 	add	r4,r3,r2
   41b2c:	e0fffd17 	ldw	r3,-12(fp)
   41b30:	e0bff917 	ldw	r2,-28(fp)
   41b34:	1887883a 	add	r3,r3,r2
   41b38:	e0bffe17 	ldw	r2,-8(fp)
   41b3c:	180b883a 	mov	r5,r3
   41b40:	100d883a 	mov	r6,r2
   41b44:	e1c00317 	ldw	r7,12(fp)
   41b48:	0041b940 	call	41b94 <vid_set_pixel>
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
    for (j = 0; j < 8; j++) {
   41b4c:	e0bffa17 	ldw	r2,-24(fp)
   41b50:	10800044 	addi	r2,r2,1
   41b54:	e0bffa15 	stw	r2,-24(fp)
   41b58:	e0bffa17 	ldw	r2,-24(fp)
   41b5c:	10800210 	cmplti	r2,r2,8
   41b60:	103fe91e 	bne	r2,zero,41b08 <__alt_data_end+0xfffcbfa8>

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
   41b64:	e0bff917 	ldw	r2,-28(fp)
   41b68:	10800044 	addi	r2,r2,1
   41b6c:	e0bff915 	stw	r2,-28(fp)
   41b70:	e0bff917 	ldw	r2,-28(fp)
   41b74:	108002d0 	cmplti	r2,r2,11
   41b78:	103fd81e 	bne	r2,zero,41adc <__alt_data_end+0xfffcbf7c>
      if (char_row & (((unsigned char)0x80) >> j)) {
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
      }
    }
  }
  return(0);
   41b7c:	0005883a 	mov	r2,zero
}
   41b80:	e037883a 	mov	sp,fp
   41b84:	dfc00117 	ldw	ra,4(sp)
   41b88:	df000017 	ldw	fp,0(sp)
   41b8c:	dec00204 	addi	sp,sp,8
   41b90:	f800283a 	ret

00041b94 <vid_set_pixel>:
*           efficient when painting large areas of the screen.
*
******************************************************************/

void vid_set_pixel(int horiz, int vert, unsigned int color, alt_video_display* display)
{
   41b94:	defff904 	addi	sp,sp,-28
   41b98:	dfc00615 	stw	ra,24(sp)
   41b9c:	df000515 	stw	fp,20(sp)
   41ba0:	df000504 	addi	fp,sp,20
   41ba4:	e13ffc15 	stw	r4,-16(fp)
   41ba8:	e17ffd15 	stw	r5,-12(fp)
   41bac:	e1bffe15 	stw	r6,-8(fp)
   41bb0:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	alt_u16 color16;


	// encode to RGB  5 6 5
	color16 = (color & 0xFF) >> 3; // blue
   41bb4:	e0bffe17 	ldw	r2,-8(fp)
   41bb8:	10803fcc 	andi	r2,r2,255
   41bbc:	1004d0fa 	srli	r2,r2,3
   41bc0:	e0bffb0d 	sth	r2,-20(fp)
	color16 |= (color & 0xFC00) >> 5; // green
   41bc4:	e0bffe17 	ldw	r2,-8(fp)
   41bc8:	10bf000c 	andi	r2,r2,64512
   41bcc:	1004d17a 	srli	r2,r2,5
   41bd0:	1007883a 	mov	r3,r2
   41bd4:	e0bffb0b 	ldhu	r2,-20(fp)
   41bd8:	1884b03a 	or	r2,r3,r2
   41bdc:	e0bffb0d 	sth	r2,-20(fp)
	color16 |= (color & 0xF80000) >> 8; // blue
   41be0:	e0bffe17 	ldw	r2,-8(fp)
   41be4:	10803e2c 	andhi	r2,r2,248
   41be8:	1004d23a 	srli	r2,r2,8
   41bec:	1007883a 	mov	r3,r2
   41bf0:	e0bffb0b 	ldhu	r2,-20(fp)
   41bf4:	1884b03a 	or	r2,r3,r2
   41bf8:	e0bffb0d 	sth	r2,-20(fp)
	LCD_DrawPoint(horiz, vert, color16);
   41bfc:	e0bffc17 	ldw	r2,-16(fp)
   41c00:	113fffcc 	andi	r4,r2,65535
   41c04:	e0bffd17 	ldw	r2,-12(fp)
   41c08:	10ffffcc 	andi	r3,r2,65535
   41c0c:	e0bffb0b 	ldhu	r2,-20(fp)
   41c10:	180b883a 	mov	r5,r3
   41c14:	100d883a 	mov	r6,r2
   41c18:	00408000 	call	40800 <LCD_DrawPoint>
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  	IOWR_16DIRECT( addr, 0, (int)(color));
	}
#endif

}
   41c1c:	e037883a 	mov	sp,fp
   41c20:	dfc00117 	ldw	ra,4(sp)
   41c24:	df000017 	ldw	fp,0(sp)
   41c28:	dec00204 	addi	sp,sp,8
   41c2c:	f800283a 	ret

00041c30 <vid_get_pixel>:
*  Purpose: Reads the color of the pixel at the given coordinates
*
******************************************************************/

short vid_get_pixel(int horiz, int vert, alt_video_display* display)
{
   41c30:	defffb04 	addi	sp,sp,-20
   41c34:	dfc00415 	stw	ra,16(sp)
   41c38:	df000315 	stw	fp,12(sp)
   41c3c:	df000304 	addi	fp,sp,12
   41c40:	e13ffd15 	stw	r4,-12(fp)
   41c44:	e17ffe15 	stw	r5,-8(fp)
   41c48:	e1bfff15 	stw	r6,-4(fp)
#ifdef LT24
	printf("vid_get_pixel is not implemented\r\n");
   41c4c:	010001b4 	movhi	r4,6
   41c50:	211d2e04 	addi	r4,r4,29880
   41c54:	004a4bc0 	call	4a4bc <puts>
  int addr;
  
  addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  return(IORD_16DIRECT(addr, 0));
#endif
}
   41c58:	e037883a 	mov	sp,fp
   41c5c:	dfc00117 	ldw	ra,4(sp)
   41c60:	df000017 	ldw	fp,0(sp)
   41c64:	dec00204 	addi	sp,sp,8
   41c68:	f800283a 	ret

00041c6c <vid_paint_block>:
*           The color parameter must contain two pixel's worth
*           (32 bits).
*
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
   41c6c:	defff804 	addi	sp,sp,-32
   41c70:	dfc00715 	stw	ra,28(sp)
   41c74:	df000615 	stw	fp,24(sp)
   41c78:	df000604 	addi	fp,sp,24
   41c7c:	e13ffc15 	stw	r4,-16(fp)
   41c80:	e17ffd15 	stw	r5,-12(fp)
   41c84:	e1bffe15 	stw	r6,-8(fp)
   41c88:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
   41c8c:	e0bffd17 	ldw	r2,-12(fp)
   41c90:	e0bffb15 	stw	r2,-20(fp)
   41c94:	00001206 	br	41ce0 <vid_paint_block+0x74>
		for(x=Hstart;x<Hend;x++){
   41c98:	e0bffc17 	ldw	r2,-16(fp)
   41c9c:	e0bffa15 	stw	r2,-24(fp)
   41ca0:	00000906 	br	41cc8 <vid_paint_block+0x5c>
			vid_set_pixel(x, y, color, display);
   41ca4:	e0800217 	ldw	r2,8(fp)
   41ca8:	e13ffa17 	ldw	r4,-24(fp)
   41cac:	e17ffb17 	ldw	r5,-20(fp)
   41cb0:	100d883a 	mov	r6,r2
   41cb4:	e1c00317 	ldw	r7,12(fp)
   41cb8:	0041b940 	call	41b94 <vid_set_pixel>
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
		for(x=Hstart;x<Hend;x++){
   41cbc:	e0bffa17 	ldw	r2,-24(fp)
   41cc0:	10800044 	addi	r2,r2,1
   41cc4:	e0bffa15 	stw	r2,-24(fp)
   41cc8:	e0fffa17 	ldw	r3,-24(fp)
   41ccc:	e0bffe17 	ldw	r2,-8(fp)
   41cd0:	18bff416 	blt	r3,r2,41ca4 <__alt_data_end+0xfffcc144>
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
   41cd4:	e0bffb17 	ldw	r2,-20(fp)
   41cd8:	10800044 	addi	r2,r2,1
   41cdc:	e0bffb15 	stw	r2,-20(fp)
   41ce0:	e0fffb17 	ldw	r3,-20(fp)
   41ce4:	e0bfff17 	ldw	r2,-4(fp)
   41ce8:	18bfeb16 	blt	r3,r2,41c98 <__alt_data_end+0xfffcc138>
    memcpy( (void*)addr, line, bytes_per_line );
    addr += (display->width * bytes_per_pixel);
  }
  free (line);
#endif
}
   41cec:	e037883a 	mov	sp,fp
   41cf0:	dfc00117 	ldw	ra,4(sp)
   41cf4:	df000017 	ldw	fp,0(sp)
   41cf8:	dec00204 	addi	sp,sp,8
   41cfc:	f800283a 	ret

00041d00 <vid_draw_horiz_line>:
*  Purpose: Draws a horizontal line on the screen quickly.
*           Good for filling stuff.
*
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
   41d00:	defff904 	addi	sp,sp,-28
   41d04:	dfc00615 	stw	ra,24(sp)
   41d08:	df000515 	stw	fp,20(sp)
   41d0c:	df000504 	addi	fp,sp,20
   41d10:	2007883a 	mov	r3,r4
   41d14:	2805883a 	mov	r2,r5
   41d18:	e1bffe15 	stw	r6,-8(fp)
   41d1c:	e1ffff15 	stw	r7,-4(fp)
   41d20:	e0fffc0d 	sth	r3,-16(fp)
   41d24:	e0bffd0d 	sth	r2,-12(fp)
#ifdef LT24
	int x;
	for(x=Hstart;x<Hend;x++){
   41d28:	e0bffc0f 	ldh	r2,-16(fp)
   41d2c:	e0bffb15 	stw	r2,-20(fp)
   41d30:	00000906 	br	41d58 <vid_draw_horiz_line+0x58>
		vid_set_pixel(x, V, color, display);
   41d34:	e0bfff17 	ldw	r2,-4(fp)
   41d38:	e13ffb17 	ldw	r4,-20(fp)
   41d3c:	e17ffe17 	ldw	r5,-8(fp)
   41d40:	100d883a 	mov	r6,r2
   41d44:	e1c00217 	ldw	r7,8(fp)
   41d48:	0041b940 	call	41b94 <vid_set_pixel>
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
#ifdef LT24
	int x;
	for(x=Hstart;x<Hend;x++){
   41d4c:	e0bffb17 	ldw	r2,-20(fp)
   41d50:	10800044 	addi	r2,r2,1
   41d54:	e0bffb15 	stw	r2,-20(fp)
   41d58:	e0bffd0f 	ldh	r2,-12(fp)
   41d5c:	e0fffb17 	ldw	r3,-20(fp)
   41d60:	18bff416 	blt	r3,r2,41d34 <__alt_data_end+0xfffcc1d4>
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
  }
  free(fast_buffer);
#endif

}
   41d64:	e037883a 	mov	sp,fp
   41d68:	dfc00117 	ldw	ra,4(sp)
   41d6c:	df000017 	ldw	fp,0(sp)
   41d70:	dec00204 	addi	sp,sp,8
   41d74:	f800283a 	ret

00041d78 <vid_merge_colors>:
*  Purpose: Takes 5-bit color values for each red, green, and blue
*           and merges them into one 16-bit color value.
*
******************************************************************/
int vid_merge_colors(int red, int green, int blue)
{
   41d78:	defffc04 	addi	sp,sp,-16
   41d7c:	df000315 	stw	fp,12(sp)
   41d80:	df000304 	addi	fp,sp,12
   41d84:	e13ffd15 	stw	r4,-12(fp)
   41d88:	e17ffe15 	stw	r5,-8(fp)
   41d8c:	e1bfff15 	stw	r6,-4(fp)
  // Green actually has 6-bits, but we'll make it's LSB 1 to be consistent.
  return ((blue) | (((green << 1) | 0x1) << 5) | (red << 11));
   41d90:	e0bffe17 	ldw	r2,-8(fp)
   41d94:	1085883a 	add	r2,r2,r2
   41d98:	10800054 	ori	r2,r2,1
   41d9c:	1006917a 	slli	r3,r2,5
   41da0:	e0bfff17 	ldw	r2,-4(fp)
   41da4:	1886b03a 	or	r3,r3,r2
   41da8:	e0bffd17 	ldw	r2,-12(fp)
   41dac:	100492fa 	slli	r2,r2,11
   41db0:	1884b03a 	or	r2,r3,r2
}
   41db4:	e037883a 	mov	sp,fp
   41db8:	df000017 	ldw	fp,0(sp)
   41dbc:	dec00104 	addi	sp,sp,4
   41dc0:	f800283a 	ret

00041dc4 <vid_color_convert24_16>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
unsigned short vid_color_convert24_16(char* color24)
{
   41dc4:	defffc04 	addi	sp,sp,-16
   41dc8:	df000315 	stw	fp,12(sp)
   41dcc:	df000304 	addi	fp,sp,12
   41dd0:	e13fff15 	stw	r4,-4(fp)
	unsigned char red, green, blue;
	unsigned short output;
	
	red = *(color24 + 0) & 0xF8;
   41dd4:	e0bfff17 	ldw	r2,-4(fp)
   41dd8:	10800003 	ldbu	r2,0(r2)
   41ddc:	1007883a 	mov	r3,r2
   41de0:	00bffe04 	movi	r2,-8
   41de4:	1884703a 	and	r2,r3,r2
   41de8:	e0bffd05 	stb	r2,-12(fp)
	green = *(color24 + 1) & 0xFC; // green is actualy 6 bits
   41dec:	e0bfff17 	ldw	r2,-4(fp)
   41df0:	10800044 	addi	r2,r2,1
   41df4:	10800003 	ldbu	r2,0(r2)
   41df8:	1007883a 	mov	r3,r2
   41dfc:	00bfff04 	movi	r2,-4
   41e00:	1884703a 	and	r2,r3,r2
   41e04:	e0bffd45 	stb	r2,-11(fp)
	blue = *(color24 + 2) & 0xF8;
   41e08:	e0bfff17 	ldw	r2,-4(fp)
   41e0c:	10800084 	addi	r2,r2,2
   41e10:	10800003 	ldbu	r2,0(r2)
   41e14:	1007883a 	mov	r3,r2
   41e18:	00bffe04 	movi	r2,-8
   41e1c:	1884703a 	and	r2,r3,r2
   41e20:	e0bffd85 	stb	r2,-10(fp)

	output = ((blue >> 3) | (green << 3) | (red << 8));  
   41e24:	e0bffd83 	ldbu	r2,-10(fp)
   41e28:	1004d0fa 	srli	r2,r2,3
   41e2c:	10c03fcc 	andi	r3,r2,255
   41e30:	e0bffd43 	ldbu	r2,-11(fp)
   41e34:	100490fa 	slli	r2,r2,3
   41e38:	1884b03a 	or	r2,r3,r2
   41e3c:	1007883a 	mov	r3,r2
   41e40:	e0bffd03 	ldbu	r2,-12(fp)
   41e44:	1004923a 	slli	r2,r2,8
   41e48:	1884b03a 	or	r2,r3,r2
   41e4c:	e0bffe0d 	sth	r2,-8(fp)
	return output;
   41e50:	e0bffe0b 	ldhu	r2,-8(fp)
}
   41e54:	e037883a 	mov	sp,fp
   41e58:	df000017 	ldw	fp,0(sp)
   41e5c:	dec00104 	addi	sp,sp,4
   41e60:	f800283a 	ret

00041e64 <vid_color_convert16_24>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
int vid_color_convert16_24(unsigned short color16, char* color24)
{
   41e64:	defffd04 	addi	sp,sp,-12
   41e68:	df000215 	stw	fp,8(sp)
   41e6c:	df000204 	addi	fp,sp,8
   41e70:	2005883a 	mov	r2,r4
   41e74:	e17fff15 	stw	r5,-4(fp)
   41e78:	e0bffe0d 	sth	r2,-8(fp)
	*(color24 + 0) = color16 >> 11;
   41e7c:	e0bffe0b 	ldhu	r2,-8(fp)
   41e80:	1004d2fa 	srli	r2,r2,11
   41e84:	1007883a 	mov	r3,r2
   41e88:	e0bfff17 	ldw	r2,-4(fp)
   41e8c:	10c00005 	stb	r3,0(r2)
	*(color24 + 1) = ((color16 & 0x3E) >> 5);
   41e90:	e0bfff17 	ldw	r2,-4(fp)
   41e94:	10800044 	addi	r2,r2,1
   41e98:	e0fffe0b 	ldhu	r3,-8(fp)
   41e9c:	18c00f8c 	andi	r3,r3,62
   41ea0:	1807d17a 	srai	r3,r3,5
   41ea4:	10c00005 	stb	r3,0(r2)
	*(color24 + 2) = (color16 & 0x1F);
   41ea8:	e0bfff17 	ldw	r2,-4(fp)
   41eac:	10800084 	addi	r2,r2,2
   41eb0:	e0fffe0b 	ldhu	r3,-8(fp)
   41eb4:	18c007cc 	andi	r3,r3,31
   41eb8:	10c00005 	stb	r3,0(r2)
	
	return (0);
   41ebc:	0005883a 	mov	r2,zero
}
   41ec0:	e037883a 	mov	sp,fp
   41ec4:	df000017 	ldw	fp,0(sp)
   41ec8:	dec00104 	addi	sp,sp,4
   41ecc:	f800283a 	ret

00041ed0 <vid_copy_line_to_frame_buffer>:
*           the specified coordinates.  Converts color depth if
*           necessary.
*
******************************************************************/
int vid_copy_line_to_frame_buffer( int x, int y, char* buffer, int num_pixels, int source_color_depth, alt_video_display* display )
{
   41ed0:	defffa04 	addi	sp,sp,-24
   41ed4:	dfc00515 	stw	ra,20(sp)
   41ed8:	df000415 	stw	fp,16(sp)
   41edc:	df000404 	addi	fp,sp,16
   41ee0:	e13ffc15 	stw	r4,-16(fp)
   41ee4:	e17ffd15 	stw	r5,-12(fp)
   41ee8:	e1bffe15 	stw	r6,-8(fp)
   41eec:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	printf("vid_copy_line_to_frame_buffer is not implemented!\r\n");
   41ef0:	010001b4 	movhi	r4,6
   41ef4:	211d3704 	addi	r4,r4,29916
   41ef8:	004a4bc0 	call	4a4bc <puts>
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
    }
  }
  return(0);
#endif
}
   41efc:	e037883a 	mov	sp,fp
   41f00:	dfc00117 	ldw	ra,4(sp)
   41f04:	df000017 	ldw	fp,0(sp)
   41f08:	dec00204 	addi	sp,sp,8
   41f0c:	f800283a 	ret

00041f10 <vid_draw_sloped_line>:
                           unsigned short horiz_end, 
                           unsigned short vert_end, 
                           unsigned short width, 
                           int color, 
                           alt_video_display* display)
{
   41f10:	deffef04 	addi	sp,sp,-68
   41f14:	dfc01015 	stw	ra,64(sp)
   41f18:	df000f15 	stw	fp,60(sp)
   41f1c:	df000f04 	addi	fp,sp,60
   41f20:	2011883a 	mov	r8,r4
   41f24:	3009883a 	mov	r4,r6
   41f28:	3807883a 	mov	r3,r7
   41f2c:	e0800217 	ldw	r2,8(fp)
   41f30:	e23ffb0d 	sth	r8,-20(fp)
   41f34:	e17ffc0d 	sth	r5,-16(fp)
   41f38:	e13ffd0d 	sth	r4,-12(fp)
   41f3c:	e0fffe0d 	sth	r3,-8(fp)
   41f40:	e0bfff0d 	sth	r2,-4(fp)
  // Find the vertical and horizontal distance between the two points
  int horiz_delta = abs(horiz_end-horiz_start);
   41f44:	e0fffd0b 	ldhu	r3,-12(fp)
   41f48:	e0bffb0b 	ldhu	r2,-20(fp)
   41f4c:	1885c83a 	sub	r2,r3,r2
   41f50:	1000010e 	bge	r2,zero,41f58 <vid_draw_sloped_line+0x48>
   41f54:	0085c83a 	sub	r2,zero,r2
   41f58:	e0bff115 	stw	r2,-60(fp)
  int vert_delta = abs(vert_end-vert_start);
   41f5c:	e0fffe0b 	ldhu	r3,-8(fp)
   41f60:	e0bffc0b 	ldhu	r2,-16(fp)
   41f64:	1885c83a 	sub	r2,r3,r2
   41f68:	1000010e 	bge	r2,zero,41f70 <vid_draw_sloped_line+0x60>
   41f6c:	0085c83a 	sub	r2,zero,r2
   41f70:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  int horiz_incr, vert_incr;
  if (horiz_start > horiz_end) { horiz_incr=-1; } else { horiz_incr=1; }
   41f74:	e0bffb0b 	ldhu	r2,-20(fp)
   41f78:	e0fffd0b 	ldhu	r3,-12(fp)
   41f7c:	1880032e 	bgeu	r3,r2,41f8c <vid_draw_sloped_line+0x7c>
   41f80:	00bfffc4 	movi	r2,-1
   41f84:	e0bff315 	stw	r2,-52(fp)
   41f88:	00000206 	br	41f94 <vid_draw_sloped_line+0x84>
   41f8c:	00800044 	movi	r2,1
   41f90:	e0bff315 	stw	r2,-52(fp)
  if (vert_start > vert_end) { vert_incr=-1; } else { vert_incr=1; }
   41f94:	e0bffc0b 	ldhu	r2,-16(fp)
   41f98:	e0fffe0b 	ldhu	r3,-8(fp)
   41f9c:	1880032e 	bgeu	r3,r2,41fac <vid_draw_sloped_line+0x9c>
   41fa0:	00bfffc4 	movi	r2,-1
   41fa4:	e0bff415 	stw	r2,-48(fp)
   41fa8:	00000206 	br	41fb4 <vid_draw_sloped_line+0xa4>
   41fac:	00800044 	movi	r2,1
   41fb0:	e0bff415 	stw	r2,-48(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (horiz_delta >= vert_delta) {
   41fb4:	e0fff117 	ldw	r3,-60(fp)
   41fb8:	e0bff217 	ldw	r2,-56(fp)
   41fbc:	18803416 	blt	r3,r2,42090 <vid_draw_sloped_line+0x180>
    int dPr   = vert_delta<<1;
   41fc0:	e0bff217 	ldw	r2,-56(fp)
   41fc4:	1085883a 	add	r2,r2,r2
   41fc8:	e0bff715 	stw	r2,-36(fp)
    int dPru  = dPr - (horiz_delta<<1);
   41fcc:	e0bff117 	ldw	r2,-60(fp)
   41fd0:	1085883a 	add	r2,r2,r2
   41fd4:	e0fff717 	ldw	r3,-36(fp)
   41fd8:	1885c83a 	sub	r2,r3,r2
   41fdc:	e0bff815 	stw	r2,-32(fp)
    int P     = dPr - horiz_delta;
   41fe0:	e0fff717 	ldw	r3,-36(fp)
   41fe4:	e0bff117 	ldw	r2,-60(fp)
   41fe8:	1885c83a 	sub	r2,r3,r2
   41fec:	e0bff515 	stw	r2,-44(fp)

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
   41ff0:	00002406 	br	42084 <vid_draw_sloped_line+0x174>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
   41ff4:	e13ffb0b 	ldhu	r4,-20(fp)
   41ff8:	e0fffc0b 	ldhu	r3,-16(fp)
   41ffc:	e0800317 	ldw	r2,12(fp)
   42000:	180b883a 	mov	r5,r3
   42004:	100d883a 	mov	r6,r2
   42008:	e1c00417 	ldw	r7,16(fp)
   4200c:	0041b940 	call	41b94 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
   42010:	e0bff517 	ldw	r2,-44(fp)
   42014:	00800f0e 	bge	zero,r2,42054 <vid_draw_sloped_line+0x144>
        horiz_start+=horiz_incr;
   42018:	e0bff317 	ldw	r2,-52(fp)
   4201c:	1007883a 	mov	r3,r2
   42020:	e0bffb0b 	ldhu	r2,-20(fp)
   42024:	1885883a 	add	r2,r3,r2
   42028:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
   4202c:	e0bff417 	ldw	r2,-48(fp)
   42030:	1007883a 	mov	r3,r2
   42034:	e0bffc0b 	ldhu	r2,-16(fp)
   42038:	1885883a 	add	r2,r3,r2
   4203c:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
   42040:	e0fff517 	ldw	r3,-44(fp)
   42044:	e0bff817 	ldw	r2,-32(fp)
   42048:	1885883a 	add	r2,r3,r2
   4204c:	e0bff515 	stw	r2,-44(fp)
   42050:	00000906 	br	42078 <vid_draw_sloped_line+0x168>
      } else {
        horiz_start+=horiz_incr;
   42054:	e0bff317 	ldw	r2,-52(fp)
   42058:	1007883a 	mov	r3,r2
   4205c:	e0bffb0b 	ldhu	r2,-20(fp)
   42060:	1885883a 	add	r2,r3,r2
   42064:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPr;
   42068:	e0fff517 	ldw	r3,-44(fp)
   4206c:	e0bff717 	ldw	r2,-36(fp)
   42070:	1885883a 	add	r2,r3,r2
   42074:	e0bff515 	stw	r2,-44(fp)
    int dPr   = vert_delta<<1;
    int dPru  = dPr - (horiz_delta<<1);
    int P     = dPr - horiz_delta;

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
   42078:	e0bff117 	ldw	r2,-60(fp)
   4207c:	10bfffc4 	addi	r2,r2,-1
   42080:	e0bff115 	stw	r2,-60(fp)
   42084:	e0bff117 	ldw	r2,-60(fp)
   42088:	103fda0e 	bge	r2,zero,41ff4 <__alt_data_end+0xfffcc494>
   4208c:	00003306 	br	4215c <vid_draw_sloped_line+0x24c>
        P+=dPr;
      }
    }
  // If it's the vertical axis
  } else {
    int dPr   = horiz_delta<<1;
   42090:	e0bff117 	ldw	r2,-60(fp)
   42094:	1085883a 	add	r2,r2,r2
   42098:	e0bff915 	stw	r2,-28(fp)
    int dPru  = dPr - (vert_delta<<1);
   4209c:	e0bff217 	ldw	r2,-56(fp)
   420a0:	1085883a 	add	r2,r2,r2
   420a4:	e0fff917 	ldw	r3,-28(fp)
   420a8:	1885c83a 	sub	r2,r3,r2
   420ac:	e0bffa15 	stw	r2,-24(fp)
    int P     = dPr - vert_delta;
   420b0:	e0fff917 	ldw	r3,-28(fp)
   420b4:	e0bff217 	ldw	r2,-56(fp)
   420b8:	1885c83a 	sub	r2,r3,r2
   420bc:	e0bff615 	stw	r2,-40(fp)

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
   420c0:	00002406 	br	42154 <vid_draw_sloped_line+0x244>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
   420c4:	e13ffb0b 	ldhu	r4,-20(fp)
   420c8:	e0fffc0b 	ldhu	r3,-16(fp)
   420cc:	e0800317 	ldw	r2,12(fp)
   420d0:	180b883a 	mov	r5,r3
   420d4:	100d883a 	mov	r6,r2
   420d8:	e1c00417 	ldw	r7,16(fp)
   420dc:	0041b940 	call	41b94 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
   420e0:	e0bff617 	ldw	r2,-40(fp)
   420e4:	00800f0e 	bge	zero,r2,42124 <vid_draw_sloped_line+0x214>
        horiz_start+=horiz_incr;
   420e8:	e0bff317 	ldw	r2,-52(fp)
   420ec:	1007883a 	mov	r3,r2
   420f0:	e0bffb0b 	ldhu	r2,-20(fp)
   420f4:	1885883a 	add	r2,r3,r2
   420f8:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
   420fc:	e0bff417 	ldw	r2,-48(fp)
   42100:	1007883a 	mov	r3,r2
   42104:	e0bffc0b 	ldhu	r2,-16(fp)
   42108:	1885883a 	add	r2,r3,r2
   4210c:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
   42110:	e0fff617 	ldw	r3,-40(fp)
   42114:	e0bffa17 	ldw	r2,-24(fp)
   42118:	1885883a 	add	r2,r3,r2
   4211c:	e0bff615 	stw	r2,-40(fp)
   42120:	00000906 	br	42148 <vid_draw_sloped_line+0x238>
      } else {
        vert_start+=vert_incr;
   42124:	e0bff417 	ldw	r2,-48(fp)
   42128:	1007883a 	mov	r3,r2
   4212c:	e0bffc0b 	ldhu	r2,-16(fp)
   42130:	1885883a 	add	r2,r3,r2
   42134:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPr;
   42138:	e0fff617 	ldw	r3,-40(fp)
   4213c:	e0bff917 	ldw	r2,-28(fp)
   42140:	1885883a 	add	r2,r3,r2
   42144:	e0bff615 	stw	r2,-40(fp)
    int dPr   = horiz_delta<<1;
    int dPru  = dPr - (vert_delta<<1);
    int P     = dPr - vert_delta;

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
   42148:	e0bff217 	ldw	r2,-56(fp)
   4214c:	10bfffc4 	addi	r2,r2,-1
   42150:	e0bff215 	stw	r2,-56(fp)
   42154:	e0bff217 	ldw	r2,-56(fp)
   42158:	103fda0e 	bge	r2,zero,420c4 <__alt_data_end+0xfffcc564>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
   4215c:	e037883a 	mov	sp,fp
   42160:	dfc00117 	ldw	ra,4(sp)
   42164:	df000017 	ldw	fp,0(sp)
   42168:	dec00204 	addi	sp,sp,8
   4216c:	f800283a 	ret

00042170 <vid_draw_circle>:
*  tells the function whether or not to fill in the box.  1 = fill,
*  0 = do not fill.
*
******************************************************************/
int vid_draw_circle(int Hcenter, int Vcenter, int radius, int color, char fill, alt_video_display* display)
{
   42170:	defff104 	addi	sp,sp,-60
   42174:	dfc00e15 	stw	ra,56(sp)
   42178:	df000d15 	stw	fp,52(sp)
   4217c:	df000d04 	addi	fp,sp,52
   42180:	e13ffb15 	stw	r4,-20(fp)
   42184:	e17ffc15 	stw	r5,-16(fp)
   42188:	e1bffd15 	stw	r6,-12(fp)
   4218c:	e1fffe15 	stw	r7,-8(fp)
   42190:	e0800217 	ldw	r2,8(fp)
   42194:	e0bfff05 	stb	r2,-4(fp)
  int x = 0;
   42198:	e03ff815 	stw	zero,-32(fp)
  int y = radius;
   4219c:	e0bffd17 	ldw	r2,-12(fp)
   421a0:	e0bff915 	stw	r2,-28(fp)
  int p = (5 - radius*4)/4;
   421a4:	e0bffd17 	ldw	r2,-12(fp)
   421a8:	10bfff24 	muli	r2,r2,-4
   421ac:	10800144 	addi	r2,r2,5
   421b0:	1000010e 	bge	r2,zero,421b8 <vid_draw_circle+0x48>
   421b4:	108000c4 	addi	r2,r2,3
   421b8:	1005d0ba 	srai	r2,r2,2
   421bc:	e0bffa15 	stw	r2,-24(fp)

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
   421c0:	e0bfff07 	ldb	r2,-4(fp)
   421c4:	d8000015 	stw	zero,0(sp)
   421c8:	d8000115 	stw	zero,4(sp)
   421cc:	e0fffe17 	ldw	r3,-8(fp)
   421d0:	d8c00215 	stw	r3,8(sp)
   421d4:	d8800315 	stw	r2,12(sp)
   421d8:	e0800317 	ldw	r2,12(fp)
   421dc:	d8800415 	stw	r2,16(sp)
   421e0:	e13ffb17 	ldw	r4,-20(fp)
   421e4:	e17ffc17 	ldw	r5,-16(fp)
   421e8:	e1bff817 	ldw	r6,-32(fp)
   421ec:	e1fff917 	ldw	r7,-28(fp)
   421f0:	00426640 	call	42664 <vid_round_corner_points>

  // Now start moving out from those points until the lines meet
  while (x < y) {
   421f4:	00002406 	br	42288 <vid_draw_circle+0x118>
    x++;
   421f8:	e0bff817 	ldw	r2,-32(fp)
   421fc:	10800044 	addi	r2,r2,1
   42200:	e0bff815 	stw	r2,-32(fp)
    if (p < 0) {
   42204:	e0bffa17 	ldw	r2,-24(fp)
   42208:	1000070e 	bge	r2,zero,42228 <vid_draw_circle+0xb8>
      p += 2*x+1;
   4220c:	e0bff817 	ldw	r2,-32(fp)
   42210:	1085883a 	add	r2,r2,r2
   42214:	10800044 	addi	r2,r2,1
   42218:	e0fffa17 	ldw	r3,-24(fp)
   4221c:	1885883a 	add	r2,r3,r2
   42220:	e0bffa15 	stw	r2,-24(fp)
   42224:	00000b06 	br	42254 <vid_draw_circle+0xe4>
    } else {
      y--;
   42228:	e0bff917 	ldw	r2,-28(fp)
   4222c:	10bfffc4 	addi	r2,r2,-1
   42230:	e0bff915 	stw	r2,-28(fp)
      p += 2*(x-y)+1;
   42234:	e0fff817 	ldw	r3,-32(fp)
   42238:	e0bff917 	ldw	r2,-28(fp)
   4223c:	1885c83a 	sub	r2,r3,r2
   42240:	1085883a 	add	r2,r2,r2
   42244:	10800044 	addi	r2,r2,1
   42248:	e0fffa17 	ldw	r3,-24(fp)
   4224c:	1885883a 	add	r2,r3,r2
   42250:	e0bffa15 	stw	r2,-24(fp)
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
   42254:	e0bfff07 	ldb	r2,-4(fp)
   42258:	d8000015 	stw	zero,0(sp)
   4225c:	d8000115 	stw	zero,4(sp)
   42260:	e0fffe17 	ldw	r3,-8(fp)
   42264:	d8c00215 	stw	r3,8(sp)
   42268:	d8800315 	stw	r2,12(sp)
   4226c:	e0800317 	ldw	r2,12(fp)
   42270:	d8800415 	stw	r2,16(sp)
   42274:	e13ffb17 	ldw	r4,-20(fp)
   42278:	e17ffc17 	ldw	r5,-16(fp)
   4227c:	e1bff817 	ldw	r6,-32(fp)
   42280:	e1fff917 	ldw	r7,-28(fp)
   42284:	00426640 	call	42664 <vid_round_corner_points>

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);

  // Now start moving out from those points until the lines meet
  while (x < y) {
   42288:	e0fff817 	ldw	r3,-32(fp)
   4228c:	e0bff917 	ldw	r2,-28(fp)
   42290:	18bfd916 	blt	r3,r2,421f8 <__alt_data_end+0xfffcc698>
      y--;
      p += 2*(x-y)+1;
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
  }
  return (0);
   42294:	0005883a 	mov	r2,zero
}
   42298:	e037883a 	mov	sp,fp
   4229c:	dfc00117 	ldw	ra,4(sp)
   422a0:	df000017 	ldw	fp,0(sp)
   422a4:	dec00204 	addi	sp,sp,8
   422a8:	f800283a 	ret

000422ac <vid_draw_round_corner_box>:
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_round_corner_box ( int horiz_start, int vert_start, int horiz_end, int vert_end, 
                                int radius, int color, int fill, alt_video_display* display)
{
   422ac:	deffec04 	addi	sp,sp,-80
   422b0:	dfc01315 	stw	ra,76(sp)
   422b4:	df001215 	stw	fp,72(sp)
   422b8:	df001204 	addi	fp,sp,72
   422bc:	e13ffc15 	stw	r4,-16(fp)
   422c0:	e17ffd15 	stw	r5,-12(fp)
   422c4:	e1bffe15 	stw	r6,-8(fp)
   422c8:	e1ffff15 	stw	r7,-4(fp)
  int diameter;
  int temp;
  unsigned int width, height, straight_width, straight_height;

  // Make sure the start point us up and left of the end point
  if( horiz_start > horiz_end )
   422cc:	e0bffc17 	ldw	r2,-16(fp)
   422d0:	e0fffe17 	ldw	r3,-8(fp)
   422d4:	1880060e 	bge	r3,r2,422f0 <vid_draw_round_corner_box+0x44>
  {
    temp = horiz_end;
   422d8:	e0bffe17 	ldw	r2,-8(fp)
   422dc:	e0bff615 	stw	r2,-40(fp)
    horiz_end = horiz_start;
   422e0:	e0bffc17 	ldw	r2,-16(fp)
   422e4:	e0bffe15 	stw	r2,-8(fp)
    horiz_start = temp;
   422e8:	e0bff617 	ldw	r2,-40(fp)
   422ec:	e0bffc15 	stw	r2,-16(fp)
  }
  
  if( vert_start > vert_end )
   422f0:	e0bffd17 	ldw	r2,-12(fp)
   422f4:	e0ffff17 	ldw	r3,-4(fp)
   422f8:	1880060e 	bge	r3,r2,42314 <vid_draw_round_corner_box+0x68>
  {
    temp = vert_end;
   422fc:	e0bfff17 	ldw	r2,-4(fp)
   42300:	e0bff615 	stw	r2,-40(fp)
    vert_end = vert_start;
   42304:	e0bffd17 	ldw	r2,-12(fp)
   42308:	e0bfff15 	stw	r2,-4(fp)
    vert_start = temp;
   4230c:	e0bff617 	ldw	r2,-40(fp)
   42310:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // These are the overall dimensions of the box
  width = horiz_end - horiz_start;
   42314:	e0fffe17 	ldw	r3,-8(fp)
   42318:	e0bffc17 	ldw	r2,-16(fp)
   4231c:	1885c83a 	sub	r2,r3,r2
   42320:	e0bff715 	stw	r2,-36(fp)
  height = vert_end - vert_start;
   42324:	e0ffff17 	ldw	r3,-4(fp)
   42328:	e0bffd17 	ldw	r2,-12(fp)
   4232c:	1885c83a 	sub	r2,r3,r2
   42330:	e0bff815 	stw	r2,-32(fp)

  // Make sure our radius isnt more than the shortest dimension 
  // of the box, or it'll screw us all up
  if( radius > ( width / 2 ))
   42334:	e0800217 	ldw	r2,8(fp)
   42338:	e0fff717 	ldw	r3,-36(fp)
   4233c:	1806d07a 	srli	r3,r3,1
   42340:	1880032e 	bgeu	r3,r2,42350 <vid_draw_round_corner_box+0xa4>
    radius = width / 2;
   42344:	e0bff717 	ldw	r2,-36(fp)
   42348:	1004d07a 	srli	r2,r2,1
   4234c:	e0800215 	stw	r2,8(fp)

  if( radius > ( height / 2 ))
   42350:	e0800217 	ldw	r2,8(fp)
   42354:	e0fff817 	ldw	r3,-32(fp)
   42358:	1806d07a 	srli	r3,r3,1
   4235c:	1880032e 	bgeu	r3,r2,4236c <vid_draw_round_corner_box+0xc0>
    radius = height / 2;
   42360:	e0bff817 	ldw	r2,-32(fp)
   42364:	1004d07a 	srli	r2,r2,1
   42368:	e0800215 	stw	r2,8(fp)
  
  // We use the diameter for some calculations, so we'll pre calculate it here.
  diameter = ( radius * 2 );
   4236c:	e0800217 	ldw	r2,8(fp)
   42370:	1085883a 	add	r2,r2,r2
   42374:	e0bff915 	stw	r2,-28(fp)

  // These are the lengths of the straight portions of the box edges.
  straight_width = width - diameter;
   42378:	e0bff917 	ldw	r2,-28(fp)
   4237c:	e0fff717 	ldw	r3,-36(fp)
   42380:	1885c83a 	sub	r2,r3,r2
   42384:	e0bffa15 	stw	r2,-24(fp)
  straight_height = height - diameter;
   42388:	e0bff917 	ldw	r2,-28(fp)
   4238c:	e0fff817 	ldw	r3,-32(fp)
   42390:	1885c83a 	sub	r2,r3,r2
   42394:	e0bffb15 	stw	r2,-20(fp)

  x = 0;
   42398:	e03ff315 	stw	zero,-52(fp)
  y = radius;
   4239c:	e0800217 	ldw	r2,8(fp)
   423a0:	e0bff415 	stw	r2,-48(fp)
  p = (5 - radius*4)/4;
   423a4:	e0800217 	ldw	r2,8(fp)
   423a8:	10bfff24 	muli	r2,r2,-4
   423ac:	10800144 	addi	r2,r2,5
   423b0:	1000010e 	bge	r2,zero,423b8 <vid_draw_round_corner_box+0x10c>
   423b4:	108000c4 	addi	r2,r2,3
   423b8:	1005d0ba 	srai	r2,r2,2
   423bc:	e0bff515 	stw	r2,-44(fp)
   
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
   423c0:	e0fffc17 	ldw	r3,-16(fp)
   423c4:	e0800217 	ldw	r2,8(fp)
   423c8:	1889883a 	add	r4,r3,r2
   423cc:	e0fffd17 	ldw	r3,-12(fp)
   423d0:	e0800217 	ldw	r2,8(fp)
   423d4:	188b883a 	add	r5,r3,r2
   423d8:	e0fff317 	ldw	r3,-52(fp)
   423dc:	e0bff417 	ldw	r2,-48(fp)
   423e0:	e23ffa17 	ldw	r8,-24(fp)
   423e4:	e1fffb17 	ldw	r7,-20(fp)
   423e8:	e1800417 	ldw	r6,16(fp)
   423ec:	31803fcc 	andi	r6,r6,255
   423f0:	3180201c 	xori	r6,r6,128
   423f4:	31bfe004 	addi	r6,r6,-128
   423f8:	da000015 	stw	r8,0(sp)
   423fc:	d9c00115 	stw	r7,4(sp)
   42400:	e1c00317 	ldw	r7,12(fp)
   42404:	d9c00215 	stw	r7,8(sp)
   42408:	d9800315 	stw	r6,12(sp)
   4240c:	e1800517 	ldw	r6,20(fp)
   42410:	d9800415 	stw	r6,16(sp)
   42414:	180d883a 	mov	r6,r3
   42418:	100f883a 	mov	r7,r2
   4241c:	00426640 	call	42664 <vid_round_corner_points>
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
   42420:	00003106 	br	424e8 <vid_draw_round_corner_box+0x23c>
    x++;
   42424:	e0bff317 	ldw	r2,-52(fp)
   42428:	10800044 	addi	r2,r2,1
   4242c:	e0bff315 	stw	r2,-52(fp)
    if (p < 0) {
   42430:	e0bff517 	ldw	r2,-44(fp)
   42434:	1000080e 	bge	r2,zero,42458 <vid_draw_round_corner_box+0x1ac>
      p += 2*x+1;
   42438:	e0bff317 	ldw	r2,-52(fp)
   4243c:	1085883a 	add	r2,r2,r2
   42440:	1007883a 	mov	r3,r2
   42444:	e0bff517 	ldw	r2,-44(fp)
   42448:	1885883a 	add	r2,r3,r2
   4244c:	10800044 	addi	r2,r2,1
   42450:	e0bff515 	stw	r2,-44(fp)
   42454:	00000c06 	br	42488 <vid_draw_round_corner_box+0x1dc>
    } else {
      y--;
   42458:	e0bff417 	ldw	r2,-48(fp)
   4245c:	10bfffc4 	addi	r2,r2,-1
   42460:	e0bff415 	stw	r2,-48(fp)
      p += 2*(x-y)+1;
   42464:	e0fff317 	ldw	r3,-52(fp)
   42468:	e0bff417 	ldw	r2,-48(fp)
   4246c:	1885c83a 	sub	r2,r3,r2
   42470:	1085883a 	add	r2,r2,r2
   42474:	1007883a 	mov	r3,r2
   42478:	e0bff517 	ldw	r2,-44(fp)
   4247c:	1885883a 	add	r2,r3,r2
   42480:	10800044 	addi	r2,r2,1
   42484:	e0bff515 	stw	r2,-44(fp)
    }
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
   42488:	e0fffc17 	ldw	r3,-16(fp)
   4248c:	e0800217 	ldw	r2,8(fp)
   42490:	1889883a 	add	r4,r3,r2
   42494:	e0fffd17 	ldw	r3,-12(fp)
   42498:	e0800217 	ldw	r2,8(fp)
   4249c:	188b883a 	add	r5,r3,r2
   424a0:	e0fff317 	ldw	r3,-52(fp)
   424a4:	e0bff417 	ldw	r2,-48(fp)
   424a8:	e23ffa17 	ldw	r8,-24(fp)
   424ac:	e1fffb17 	ldw	r7,-20(fp)
   424b0:	e1800417 	ldw	r6,16(fp)
   424b4:	31803fcc 	andi	r6,r6,255
   424b8:	3180201c 	xori	r6,r6,128
   424bc:	31bfe004 	addi	r6,r6,-128
   424c0:	da000015 	stw	r8,0(sp)
   424c4:	d9c00115 	stw	r7,4(sp)
   424c8:	e1c00317 	ldw	r7,12(fp)
   424cc:	d9c00215 	stw	r7,8(sp)
   424d0:	d9800315 	stw	r6,12(sp)
   424d4:	e1800517 	ldw	r6,20(fp)
   424d8:	d9800415 	stw	r6,16(sp)
   424dc:	180d883a 	mov	r6,r3
   424e0:	100f883a 	mov	r7,r2
   424e4:	00426640 	call	42664 <vid_round_corner_points>
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
   424e8:	e0fff317 	ldw	r3,-52(fp)
   424ec:	e0bff417 	ldw	r2,-48(fp)
   424f0:	18bfcc36 	bltu	r3,r2,42424 <__alt_data_end+0xfffcc8c4>
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                             straight_width, straight_height, color, fill, display);
  }

  // If we want to fill in our box
  if (fill) {
   424f4:	e0800417 	ldw	r2,16(fp)
   424f8:	10001026 	beq	r2,zero,4253c <vid_draw_round_corner_box+0x290>
     vid_paint_block (horiz_start, vert_start + radius, horiz_end, vert_end - radius, color, display);
   424fc:	e0fffd17 	ldw	r3,-12(fp)
   42500:	e0800217 	ldw	r2,8(fp)
   42504:	1887883a 	add	r3,r3,r2
   42508:	e13fff17 	ldw	r4,-4(fp)
   4250c:	e0800217 	ldw	r2,8(fp)
   42510:	2085c83a 	sub	r2,r4,r2
   42514:	e1000317 	ldw	r4,12(fp)
   42518:	d9000015 	stw	r4,0(sp)
   4251c:	e1000517 	ldw	r4,20(fp)
   42520:	d9000115 	stw	r4,4(sp)
   42524:	e13ffc17 	ldw	r4,-16(fp)
   42528:	180b883a 	mov	r5,r3
   4252c:	e1bffe17 	ldw	r6,-8(fp)
   42530:	100f883a 	mov	r7,r2
   42534:	0041c6c0 	call	41c6c <vid_paint_block>
   42538:	00004406 	br	4264c <vid_draw_round_corner_box+0x3a0>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start + radius, horiz_start, vert_end - radius , 1, color, display); //left
   4253c:	e0fffd17 	ldw	r3,-12(fp)
   42540:	e0800217 	ldw	r2,8(fp)
   42544:	1887883a 	add	r3,r3,r2
   42548:	e13fff17 	ldw	r4,-4(fp)
   4254c:	e0800217 	ldw	r2,8(fp)
   42550:	2085c83a 	sub	r2,r4,r2
   42554:	01000044 	movi	r4,1
   42558:	d9000015 	stw	r4,0(sp)
   4255c:	e1000317 	ldw	r4,12(fp)
   42560:	d9000115 	stw	r4,4(sp)
   42564:	e1000517 	ldw	r4,20(fp)
   42568:	d9000215 	stw	r4,8(sp)
   4256c:	e13ffc17 	ldw	r4,-16(fp)
   42570:	180b883a 	mov	r5,r3
   42574:	e1bffc17 	ldw	r6,-16(fp)
   42578:	100f883a 	mov	r7,r2
   4257c:	00411500 	call	41150 <vid_draw_line>
    vid_draw_line(horiz_end, vert_start + radius, horiz_end, vert_end - radius , 1, color, display); //right
   42580:	e0fffd17 	ldw	r3,-12(fp)
   42584:	e0800217 	ldw	r2,8(fp)
   42588:	1887883a 	add	r3,r3,r2
   4258c:	e13fff17 	ldw	r4,-4(fp)
   42590:	e0800217 	ldw	r2,8(fp)
   42594:	2085c83a 	sub	r2,r4,r2
   42598:	01000044 	movi	r4,1
   4259c:	d9000015 	stw	r4,0(sp)
   425a0:	e1000317 	ldw	r4,12(fp)
   425a4:	d9000115 	stw	r4,4(sp)
   425a8:	e1000517 	ldw	r4,20(fp)
   425ac:	d9000215 	stw	r4,8(sp)
   425b0:	e13ffe17 	ldw	r4,-8(fp)
   425b4:	180b883a 	mov	r5,r3
   425b8:	e1bffe17 	ldw	r6,-8(fp)
   425bc:	100f883a 	mov	r7,r2
   425c0:	00411500 	call	41150 <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_start, horiz_end - radius , vert_start, 1, color, display); //top
   425c4:	e0fffc17 	ldw	r3,-16(fp)
   425c8:	e0800217 	ldw	r2,8(fp)
   425cc:	1887883a 	add	r3,r3,r2
   425d0:	e13ffe17 	ldw	r4,-8(fp)
   425d4:	e0800217 	ldw	r2,8(fp)
   425d8:	2085c83a 	sub	r2,r4,r2
   425dc:	01000044 	movi	r4,1
   425e0:	d9000015 	stw	r4,0(sp)
   425e4:	e1000317 	ldw	r4,12(fp)
   425e8:	d9000115 	stw	r4,4(sp)
   425ec:	e1000517 	ldw	r4,20(fp)
   425f0:	d9000215 	stw	r4,8(sp)
   425f4:	1809883a 	mov	r4,r3
   425f8:	e17ffd17 	ldw	r5,-12(fp)
   425fc:	100d883a 	mov	r6,r2
   42600:	e1fffd17 	ldw	r7,-12(fp)
   42604:	00411500 	call	41150 <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_end, horiz_end - radius , vert_end, 1, color, display); //bottom
   42608:	e0fffc17 	ldw	r3,-16(fp)
   4260c:	e0800217 	ldw	r2,8(fp)
   42610:	1887883a 	add	r3,r3,r2
   42614:	e13ffe17 	ldw	r4,-8(fp)
   42618:	e0800217 	ldw	r2,8(fp)
   4261c:	2085c83a 	sub	r2,r4,r2
   42620:	01000044 	movi	r4,1
   42624:	d9000015 	stw	r4,0(sp)
   42628:	e1000317 	ldw	r4,12(fp)
   4262c:	d9000115 	stw	r4,4(sp)
   42630:	e1000517 	ldw	r4,20(fp)
   42634:	d9000215 	stw	r4,8(sp)
   42638:	1809883a 	mov	r4,r3
   4263c:	e17fff17 	ldw	r5,-4(fp)
   42640:	100d883a 	mov	r6,r2
   42644:	e1ffff17 	ldw	r7,-4(fp)
   42648:	00411500 	call	41150 <vid_draw_line>
  }

  return (0);
   4264c:	0005883a 	mov	r2,zero
}
   42650:	e037883a 	mov	sp,fp
   42654:	dfc00117 	ldw	ra,4(sp)
   42658:	df000017 	ldw	fp,0(sp)
   4265c:	dec00204 	addi	sp,sp,8
   42660:	f800283a 	ret

00042664 <vid_round_corner_points>:
******************************************************************/

void vid_round_corner_points( int cx, int cy, int x, int y, 
                              int straight_width, int straight_height, int color, 
                              char fill, alt_video_display* display)
{
   42664:	defff604 	addi	sp,sp,-40
   42668:	dfc00915 	stw	ra,36(sp)
   4266c:	df000815 	stw	fp,32(sp)
   42670:	df000804 	addi	fp,sp,32
   42674:	e13ffb15 	stw	r4,-20(fp)
   42678:	e17ffc15 	stw	r5,-16(fp)
   4267c:	e1bffd15 	stw	r6,-12(fp)
   42680:	e1fffe15 	stw	r7,-8(fp)
   42684:	e0800517 	ldw	r2,20(fp)
   42688:	e0bfff05 	stb	r2,-4(fp)

    // If we're directly above, below, left and right of center (0 degrees), plot those 4 pixels
    if (x == 0) {
   4268c:	e0bffd17 	ldw	r2,-12(fp)
   42690:	1000861e 	bne	r2,zero,428ac <vid_round_corner_points+0x248>
        // bottom
        vid_set_pixel(cx, cy + y + straight_height, color, display);
   42694:	e0fffc17 	ldw	r3,-16(fp)
   42698:	e0bffe17 	ldw	r2,-8(fp)
   4269c:	1887883a 	add	r3,r3,r2
   426a0:	e0800317 	ldw	r2,12(fp)
   426a4:	1887883a 	add	r3,r3,r2
   426a8:	e0800417 	ldw	r2,16(fp)
   426ac:	e13ffb17 	ldw	r4,-20(fp)
   426b0:	180b883a 	mov	r5,r3
   426b4:	100d883a 	mov	r6,r2
   426b8:	e1c00617 	ldw	r7,24(fp)
   426bc:	0041b940 	call	41b94 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy + y + straight_height, color, display);
   426c0:	e0fffb17 	ldw	r3,-20(fp)
   426c4:	e0800217 	ldw	r2,8(fp)
   426c8:	1889883a 	add	r4,r3,r2
   426cc:	e0fffc17 	ldw	r3,-16(fp)
   426d0:	e0bffe17 	ldw	r2,-8(fp)
   426d4:	1887883a 	add	r3,r3,r2
   426d8:	e0800317 	ldw	r2,12(fp)
   426dc:	1887883a 	add	r3,r3,r2
   426e0:	e0800417 	ldw	r2,16(fp)
   426e4:	180b883a 	mov	r5,r3
   426e8:	100d883a 	mov	r6,r2
   426ec:	e1c00617 	ldw	r7,24(fp)
   426f0:	0041b940 	call	41b94 <vid_set_pixel>
        // top
        vid_set_pixel(cx, cy - y, color, display);
   426f4:	e0fffc17 	ldw	r3,-16(fp)
   426f8:	e0bffe17 	ldw	r2,-8(fp)
   426fc:	1887c83a 	sub	r3,r3,r2
   42700:	e0800417 	ldw	r2,16(fp)
   42704:	e13ffb17 	ldw	r4,-20(fp)
   42708:	180b883a 	mov	r5,r3
   4270c:	100d883a 	mov	r6,r2
   42710:	e1c00617 	ldw	r7,24(fp)
   42714:	0041b940 	call	41b94 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy - y, color, display);
   42718:	e0fffb17 	ldw	r3,-20(fp)
   4271c:	e0800217 	ldw	r2,8(fp)
   42720:	1889883a 	add	r4,r3,r2
   42724:	e0fffc17 	ldw	r3,-16(fp)
   42728:	e0bffe17 	ldw	r2,-8(fp)
   4272c:	1887c83a 	sub	r3,r3,r2
   42730:	e0800417 	ldw	r2,16(fp)
   42734:	180b883a 	mov	r5,r3
   42738:	100d883a 	mov	r6,r2
   4273c:	e1c00617 	ldw	r7,24(fp)
   42740:	0041b940 	call	41b94 <vid_set_pixel>

        if(fill) {
   42744:	e0bfff07 	ldb	r2,-4(fp)
   42748:	10002b26 	beq	r2,zero,427f8 <vid_round_corner_points+0x194>
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
   4274c:	e0fffb17 	ldw	r3,-20(fp)
   42750:	e0bffe17 	ldw	r2,-8(fp)
   42754:	1887c83a 	sub	r3,r3,r2
   42758:	e13ffb17 	ldw	r4,-20(fp)
   4275c:	e0bffe17 	ldw	r2,-8(fp)
   42760:	2089883a 	add	r4,r4,r2
   42764:	e0800217 	ldw	r2,8(fp)
   42768:	2085883a 	add	r2,r4,r2
   4276c:	01000044 	movi	r4,1
   42770:	d9000015 	stw	r4,0(sp)
   42774:	e1000417 	ldw	r4,16(fp)
   42778:	d9000115 	stw	r4,4(sp)
   4277c:	e1000617 	ldw	r4,24(fp)
   42780:	d9000215 	stw	r4,8(sp)
   42784:	1809883a 	mov	r4,r3
   42788:	e17ffc17 	ldw	r5,-16(fp)
   4278c:	100d883a 	mov	r6,r2
   42790:	e1fffc17 	ldw	r7,-16(fp)
   42794:	00411500 	call	41150 <vid_draw_line>
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
   42798:	e0fffb17 	ldw	r3,-20(fp)
   4279c:	e0bffe17 	ldw	r2,-8(fp)
   427a0:	1889c83a 	sub	r4,r3,r2
   427a4:	e0fffc17 	ldw	r3,-16(fp)
   427a8:	e0800317 	ldw	r2,12(fp)
   427ac:	188b883a 	add	r5,r3,r2
   427b0:	e0fffb17 	ldw	r3,-20(fp)
   427b4:	e0bffe17 	ldw	r2,-8(fp)
   427b8:	1887883a 	add	r3,r3,r2
   427bc:	e0800217 	ldw	r2,8(fp)
   427c0:	1887883a 	add	r3,r3,r2
   427c4:	e1bffc17 	ldw	r6,-16(fp)
   427c8:	e0800317 	ldw	r2,12(fp)
   427cc:	3085883a 	add	r2,r6,r2
   427d0:	01800044 	movi	r6,1
   427d4:	d9800015 	stw	r6,0(sp)
   427d8:	e1800417 	ldw	r6,16(fp)
   427dc:	d9800115 	stw	r6,4(sp)
   427e0:	e1800617 	ldw	r6,24(fp)
   427e4:	d9800215 	stw	r6,8(sp)
   427e8:	180d883a 	mov	r6,r3
   427ec:	100f883a 	mov	r7,r2
   427f0:	00411500 	call	41150 <vid_draw_line>
   427f4:	00016c06 	br	42da8 <vid_round_corner_points+0x744>
        } else {
          //right
          vid_set_pixel(cx + y + straight_width, cy, color, display);
   427f8:	e0fffb17 	ldw	r3,-20(fp)
   427fc:	e0bffe17 	ldw	r2,-8(fp)
   42800:	1887883a 	add	r3,r3,r2
   42804:	e0800217 	ldw	r2,8(fp)
   42808:	1887883a 	add	r3,r3,r2
   4280c:	e0800417 	ldw	r2,16(fp)
   42810:	1809883a 	mov	r4,r3
   42814:	e17ffc17 	ldw	r5,-16(fp)
   42818:	100d883a 	mov	r6,r2
   4281c:	e1c00617 	ldw	r7,24(fp)
   42820:	0041b940 	call	41b94 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + straight_height, color, display);
   42824:	e0fffb17 	ldw	r3,-20(fp)
   42828:	e0bffe17 	ldw	r2,-8(fp)
   4282c:	1887883a 	add	r3,r3,r2
   42830:	e0800217 	ldw	r2,8(fp)
   42834:	1889883a 	add	r4,r3,r2
   42838:	e0fffc17 	ldw	r3,-16(fp)
   4283c:	e0800317 	ldw	r2,12(fp)
   42840:	1887883a 	add	r3,r3,r2
   42844:	e0800417 	ldw	r2,16(fp)
   42848:	180b883a 	mov	r5,r3
   4284c:	100d883a 	mov	r6,r2
   42850:	e1c00617 	ldw	r7,24(fp)
   42854:	0041b940 	call	41b94 <vid_set_pixel>
          //left
          vid_set_pixel(cx - y, cy, color, display);
   42858:	e0fffb17 	ldw	r3,-20(fp)
   4285c:	e0bffe17 	ldw	r2,-8(fp)
   42860:	1887c83a 	sub	r3,r3,r2
   42864:	e0800417 	ldw	r2,16(fp)
   42868:	1809883a 	mov	r4,r3
   4286c:	e17ffc17 	ldw	r5,-16(fp)
   42870:	100d883a 	mov	r6,r2
   42874:	e1c00617 	ldw	r7,24(fp)
   42878:	0041b940 	call	41b94 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
   4287c:	e0fffb17 	ldw	r3,-20(fp)
   42880:	e0bffe17 	ldw	r2,-8(fp)
   42884:	1889c83a 	sub	r4,r3,r2
   42888:	e0fffc17 	ldw	r3,-16(fp)
   4288c:	e0800317 	ldw	r2,12(fp)
   42890:	1887883a 	add	r3,r3,r2
   42894:	e0800417 	ldw	r2,16(fp)
   42898:	180b883a 	mov	r5,r3
   4289c:	100d883a 	mov	r6,r2
   428a0:	e1c00617 	ldw	r7,24(fp)
   428a4:	0041b940 	call	41b94 <vid_set_pixel>
   428a8:	00013f06 	br	42da8 <vid_round_corner_points+0x744>
        }

    } else
    // If we've reached the 45 degree points (x=y), plot those 4 pixels
    if (x == y) {
   428ac:	e0fffd17 	ldw	r3,-12(fp)
   428b0:	e0bffe17 	ldw	r2,-8(fp)
   428b4:	18806a1e 	bne	r3,r2,42a60 <vid_round_corner_points+0x3fc>
      if(fill) {
   428b8:	e0bfff07 	ldb	r2,-4(fp)
   428bc:	10003326 	beq	r2,zero,4298c <vid_round_corner_points+0x328>
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
   428c0:	e0fffb17 	ldw	r3,-20(fp)
   428c4:	e0bffd17 	ldw	r2,-12(fp)
   428c8:	1889c83a 	sub	r4,r3,r2
   428cc:	e0fffc17 	ldw	r3,-16(fp)
   428d0:	e0bffe17 	ldw	r2,-8(fp)
   428d4:	1887883a 	add	r3,r3,r2
   428d8:	e0800317 	ldw	r2,12(fp)
   428dc:	188b883a 	add	r5,r3,r2
   428e0:	e0fffb17 	ldw	r3,-20(fp)
   428e4:	e0bffd17 	ldw	r2,-12(fp)
   428e8:	1887883a 	add	r3,r3,r2
   428ec:	e0800217 	ldw	r2,8(fp)
   428f0:	1887883a 	add	r3,r3,r2
   428f4:	e1bffc17 	ldw	r6,-16(fp)
   428f8:	e0bffe17 	ldw	r2,-8(fp)
   428fc:	308d883a 	add	r6,r6,r2
   42900:	e0800317 	ldw	r2,12(fp)
   42904:	3085883a 	add	r2,r6,r2
   42908:	01800044 	movi	r6,1
   4290c:	d9800015 	stw	r6,0(sp)
   42910:	e1800417 	ldw	r6,16(fp)
   42914:	d9800115 	stw	r6,4(sp)
   42918:	e1800617 	ldw	r6,24(fp)
   4291c:	d9800215 	stw	r6,8(sp)
   42920:	180d883a 	mov	r6,r3
   42924:	100f883a 	mov	r7,r2
   42928:	00411500 	call	41150 <vid_draw_line>
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
   4292c:	e0fffb17 	ldw	r3,-20(fp)
   42930:	e0bffd17 	ldw	r2,-12(fp)
   42934:	1889c83a 	sub	r4,r3,r2
   42938:	e0fffc17 	ldw	r3,-16(fp)
   4293c:	e0bffe17 	ldw	r2,-8(fp)
   42940:	188bc83a 	sub	r5,r3,r2
   42944:	e0fffb17 	ldw	r3,-20(fp)
   42948:	e0bffd17 	ldw	r2,-12(fp)
   4294c:	1887883a 	add	r3,r3,r2
   42950:	e0800217 	ldw	r2,8(fp)
   42954:	1887883a 	add	r3,r3,r2
   42958:	e1bffc17 	ldw	r6,-16(fp)
   4295c:	e0bffe17 	ldw	r2,-8(fp)
   42960:	3085c83a 	sub	r2,r6,r2
   42964:	01800044 	movi	r6,1
   42968:	d9800015 	stw	r6,0(sp)
   4296c:	e1800417 	ldw	r6,16(fp)
   42970:	d9800115 	stw	r6,4(sp)
   42974:	e1800617 	ldw	r6,24(fp)
   42978:	d9800215 	stw	r6,8(sp)
   4297c:	180d883a 	mov	r6,r3
   42980:	100f883a 	mov	r7,r2
   42984:	00411500 	call	41150 <vid_draw_line>
   42988:	00010706 	br	42da8 <vid_round_corner_points+0x744>
        
      } else {
        vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display); // bottom right
   4298c:	e0fffb17 	ldw	r3,-20(fp)
   42990:	e0bffd17 	ldw	r2,-12(fp)
   42994:	1887883a 	add	r3,r3,r2
   42998:	e0800217 	ldw	r2,8(fp)
   4299c:	1889883a 	add	r4,r3,r2
   429a0:	e0fffc17 	ldw	r3,-16(fp)
   429a4:	e0bffe17 	ldw	r2,-8(fp)
   429a8:	1887883a 	add	r3,r3,r2
   429ac:	e0800317 	ldw	r2,12(fp)
   429b0:	1887883a 	add	r3,r3,r2
   429b4:	e0800417 	ldw	r2,16(fp)
   429b8:	180b883a 	mov	r5,r3
   429bc:	100d883a 	mov	r6,r2
   429c0:	e1c00617 	ldw	r7,24(fp)
   429c4:	0041b940 	call	41b94 <vid_set_pixel>
        vid_set_pixel(cx - x, cy + y + straight_height, color, display); // bottom left
   429c8:	e0fffb17 	ldw	r3,-20(fp)
   429cc:	e0bffd17 	ldw	r2,-12(fp)
   429d0:	1889c83a 	sub	r4,r3,r2
   429d4:	e0fffc17 	ldw	r3,-16(fp)
   429d8:	e0bffe17 	ldw	r2,-8(fp)
   429dc:	1887883a 	add	r3,r3,r2
   429e0:	e0800317 	ldw	r2,12(fp)
   429e4:	1887883a 	add	r3,r3,r2
   429e8:	e0800417 	ldw	r2,16(fp)
   429ec:	180b883a 	mov	r5,r3
   429f0:	100d883a 	mov	r6,r2
   429f4:	e1c00617 	ldw	r7,24(fp)
   429f8:	0041b940 	call	41b94 <vid_set_pixel>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
   429fc:	e0fffb17 	ldw	r3,-20(fp)
   42a00:	e0bffd17 	ldw	r2,-12(fp)
   42a04:	1887883a 	add	r3,r3,r2
   42a08:	e0800217 	ldw	r2,8(fp)
   42a0c:	1889883a 	add	r4,r3,r2
   42a10:	e0fffc17 	ldw	r3,-16(fp)
   42a14:	e0bffe17 	ldw	r2,-8(fp)
   42a18:	1887c83a 	sub	r3,r3,r2
   42a1c:	e0800417 	ldw	r2,16(fp)
   42a20:	180b883a 	mov	r5,r3
   42a24:	100d883a 	mov	r6,r2
   42a28:	e1c00617 	ldw	r7,24(fp)
   42a2c:	0041b940 	call	41b94 <vid_set_pixel>
        vid_set_pixel(cx - x, cy - y, color, display); // top left
   42a30:	e0fffb17 	ldw	r3,-20(fp)
   42a34:	e0bffd17 	ldw	r2,-12(fp)
   42a38:	1889c83a 	sub	r4,r3,r2
   42a3c:	e0fffc17 	ldw	r3,-16(fp)
   42a40:	e0bffe17 	ldw	r2,-8(fp)
   42a44:	1887c83a 	sub	r3,r3,r2
   42a48:	e0800417 	ldw	r2,16(fp)
   42a4c:	180b883a 	mov	r5,r3
   42a50:	100d883a 	mov	r6,r2
   42a54:	e1c00617 	ldw	r7,24(fp)
   42a58:	0041b940 	call	41b94 <vid_set_pixel>
   42a5c:	0000d206 	br	42da8 <vid_round_corner_points+0x744>
      }
    } else
    // If we're between 0 and 45 degrees plot 8 pixels.
    if (x < y) {
   42a60:	e0fffd17 	ldw	r3,-12(fp)
   42a64:	e0bffe17 	ldw	r2,-8(fp)
   42a68:	1880cf0e 	bge	r3,r2,42da8 <vid_round_corner_points+0x744>
        if(fill) {
   42a6c:	e0bfff07 	ldb	r2,-4(fp)
   42a70:	10006526 	beq	r2,zero,42c08 <vid_round_corner_points+0x5a4>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
   42a74:	e0fffb17 	ldw	r3,-20(fp)
   42a78:	e0bffd17 	ldw	r2,-12(fp)
   42a7c:	1889c83a 	sub	r4,r3,r2
   42a80:	e0fffc17 	ldw	r3,-16(fp)
   42a84:	e0bffe17 	ldw	r2,-8(fp)
   42a88:	1887883a 	add	r3,r3,r2
   42a8c:	e0800317 	ldw	r2,12(fp)
   42a90:	188b883a 	add	r5,r3,r2
   42a94:	e0fffb17 	ldw	r3,-20(fp)
   42a98:	e0bffd17 	ldw	r2,-12(fp)
   42a9c:	1887883a 	add	r3,r3,r2
   42aa0:	e0800217 	ldw	r2,8(fp)
   42aa4:	1887883a 	add	r3,r3,r2
   42aa8:	e1bffc17 	ldw	r6,-16(fp)
   42aac:	e0bffe17 	ldw	r2,-8(fp)
   42ab0:	308d883a 	add	r6,r6,r2
   42ab4:	e0800317 	ldw	r2,12(fp)
   42ab8:	3085883a 	add	r2,r6,r2
   42abc:	01800044 	movi	r6,1
   42ac0:	d9800015 	stw	r6,0(sp)
   42ac4:	e1800417 	ldw	r6,16(fp)
   42ac8:	d9800115 	stw	r6,4(sp)
   42acc:	e1800617 	ldw	r6,24(fp)
   42ad0:	d9800215 	stw	r6,8(sp)
   42ad4:	180d883a 	mov	r6,r3
   42ad8:	100f883a 	mov	r7,r2
   42adc:	00411500 	call	41150 <vid_draw_line>
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
   42ae0:	e0fffb17 	ldw	r3,-20(fp)
   42ae4:	e0bffe17 	ldw	r2,-8(fp)
   42ae8:	1889c83a 	sub	r4,r3,r2
   42aec:	e0fffc17 	ldw	r3,-16(fp)
   42af0:	e0bffd17 	ldw	r2,-12(fp)
   42af4:	1887883a 	add	r3,r3,r2
   42af8:	e0800317 	ldw	r2,12(fp)
   42afc:	188b883a 	add	r5,r3,r2
   42b00:	e0fffb17 	ldw	r3,-20(fp)
   42b04:	e0bffe17 	ldw	r2,-8(fp)
   42b08:	1887883a 	add	r3,r3,r2
   42b0c:	e0800217 	ldw	r2,8(fp)
   42b10:	1887883a 	add	r3,r3,r2
   42b14:	e1bffc17 	ldw	r6,-16(fp)
   42b18:	e0bffd17 	ldw	r2,-12(fp)
   42b1c:	308d883a 	add	r6,r6,r2
   42b20:	e0800317 	ldw	r2,12(fp)
   42b24:	3085883a 	add	r2,r6,r2
   42b28:	01800044 	movi	r6,1
   42b2c:	d9800015 	stw	r6,0(sp)
   42b30:	e1800417 	ldw	r6,16(fp)
   42b34:	d9800115 	stw	r6,4(sp)
   42b38:	e1800617 	ldw	r6,24(fp)
   42b3c:	d9800215 	stw	r6,8(sp)
   42b40:	180d883a 	mov	r6,r3
   42b44:	100f883a 	mov	r7,r2
   42b48:	00411500 	call	41150 <vid_draw_line>
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
   42b4c:	e0fffb17 	ldw	r3,-20(fp)
   42b50:	e0bffe17 	ldw	r2,-8(fp)
   42b54:	1889c83a 	sub	r4,r3,r2
   42b58:	e0fffc17 	ldw	r3,-16(fp)
   42b5c:	e0bffd17 	ldw	r2,-12(fp)
   42b60:	188bc83a 	sub	r5,r3,r2
   42b64:	e0fffb17 	ldw	r3,-20(fp)
   42b68:	e0bffe17 	ldw	r2,-8(fp)
   42b6c:	1887883a 	add	r3,r3,r2
   42b70:	e0800217 	ldw	r2,8(fp)
   42b74:	1887883a 	add	r3,r3,r2
   42b78:	e1bffc17 	ldw	r6,-16(fp)
   42b7c:	e0bffd17 	ldw	r2,-12(fp)
   42b80:	3085c83a 	sub	r2,r6,r2
   42b84:	01800044 	movi	r6,1
   42b88:	d9800015 	stw	r6,0(sp)
   42b8c:	e1800417 	ldw	r6,16(fp)
   42b90:	d9800115 	stw	r6,4(sp)
   42b94:	e1800617 	ldw	r6,24(fp)
   42b98:	d9800215 	stw	r6,8(sp)
   42b9c:	180d883a 	mov	r6,r3
   42ba0:	100f883a 	mov	r7,r2
   42ba4:	00411500 	call	41150 <vid_draw_line>
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
   42ba8:	e0fffb17 	ldw	r3,-20(fp)
   42bac:	e0bffd17 	ldw	r2,-12(fp)
   42bb0:	1889c83a 	sub	r4,r3,r2
   42bb4:	e0fffc17 	ldw	r3,-16(fp)
   42bb8:	e0bffe17 	ldw	r2,-8(fp)
   42bbc:	188bc83a 	sub	r5,r3,r2
   42bc0:	e0fffb17 	ldw	r3,-20(fp)
   42bc4:	e0bffd17 	ldw	r2,-12(fp)
   42bc8:	1887883a 	add	r3,r3,r2
   42bcc:	e0800217 	ldw	r2,8(fp)
   42bd0:	1887883a 	add	r3,r3,r2
   42bd4:	e1bffc17 	ldw	r6,-16(fp)
   42bd8:	e0bffe17 	ldw	r2,-8(fp)
   42bdc:	3085c83a 	sub	r2,r6,r2
   42be0:	01800044 	movi	r6,1
   42be4:	d9800015 	stw	r6,0(sp)
   42be8:	e1800417 	ldw	r6,16(fp)
   42bec:	d9800115 	stw	r6,4(sp)
   42bf0:	e1800617 	ldw	r6,24(fp)
   42bf4:	d9800215 	stw	r6,8(sp)
   42bf8:	180d883a 	mov	r6,r3
   42bfc:	100f883a 	mov	r7,r2
   42c00:	00411500 	call	41150 <vid_draw_line>
   42c04:	00006806 	br	42da8 <vid_round_corner_points+0x744>
        } else {
          vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display);
   42c08:	e0fffb17 	ldw	r3,-20(fp)
   42c0c:	e0bffd17 	ldw	r2,-12(fp)
   42c10:	1887883a 	add	r3,r3,r2
   42c14:	e0800217 	ldw	r2,8(fp)
   42c18:	1889883a 	add	r4,r3,r2
   42c1c:	e0fffc17 	ldw	r3,-16(fp)
   42c20:	e0bffe17 	ldw	r2,-8(fp)
   42c24:	1887883a 	add	r3,r3,r2
   42c28:	e0800317 	ldw	r2,12(fp)
   42c2c:	1887883a 	add	r3,r3,r2
   42c30:	e0800417 	ldw	r2,16(fp)
   42c34:	180b883a 	mov	r5,r3
   42c38:	100d883a 	mov	r6,r2
   42c3c:	e1c00617 	ldw	r7,24(fp)
   42c40:	0041b940 	call	41b94 <vid_set_pixel>
          vid_set_pixel(cx - x, cy + y + straight_height, color, display);
   42c44:	e0fffb17 	ldw	r3,-20(fp)
   42c48:	e0bffd17 	ldw	r2,-12(fp)
   42c4c:	1889c83a 	sub	r4,r3,r2
   42c50:	e0fffc17 	ldw	r3,-16(fp)
   42c54:	e0bffe17 	ldw	r2,-8(fp)
   42c58:	1887883a 	add	r3,r3,r2
   42c5c:	e0800317 	ldw	r2,12(fp)
   42c60:	1887883a 	add	r3,r3,r2
   42c64:	e0800417 	ldw	r2,16(fp)
   42c68:	180b883a 	mov	r5,r3
   42c6c:	100d883a 	mov	r6,r2
   42c70:	e1c00617 	ldw	r7,24(fp)
   42c74:	0041b940 	call	41b94 <vid_set_pixel>
          vid_set_pixel(cx + x + straight_width, cy - y, color, display);
   42c78:	e0fffb17 	ldw	r3,-20(fp)
   42c7c:	e0bffd17 	ldw	r2,-12(fp)
   42c80:	1887883a 	add	r3,r3,r2
   42c84:	e0800217 	ldw	r2,8(fp)
   42c88:	1889883a 	add	r4,r3,r2
   42c8c:	e0fffc17 	ldw	r3,-16(fp)
   42c90:	e0bffe17 	ldw	r2,-8(fp)
   42c94:	1887c83a 	sub	r3,r3,r2
   42c98:	e0800417 	ldw	r2,16(fp)
   42c9c:	180b883a 	mov	r5,r3
   42ca0:	100d883a 	mov	r6,r2
   42ca4:	e1c00617 	ldw	r7,24(fp)
   42ca8:	0041b940 	call	41b94 <vid_set_pixel>
          vid_set_pixel(cx - x, cy - y, color, display);
   42cac:	e0fffb17 	ldw	r3,-20(fp)
   42cb0:	e0bffd17 	ldw	r2,-12(fp)
   42cb4:	1889c83a 	sub	r4,r3,r2
   42cb8:	e0fffc17 	ldw	r3,-16(fp)
   42cbc:	e0bffe17 	ldw	r2,-8(fp)
   42cc0:	1887c83a 	sub	r3,r3,r2
   42cc4:	e0800417 	ldw	r2,16(fp)
   42cc8:	180b883a 	mov	r5,r3
   42ccc:	100d883a 	mov	r6,r2
   42cd0:	e1c00617 	ldw	r7,24(fp)
   42cd4:	0041b940 	call	41b94 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + x + straight_height, color, display);
   42cd8:	e0fffb17 	ldw	r3,-20(fp)
   42cdc:	e0bffe17 	ldw	r2,-8(fp)
   42ce0:	1887883a 	add	r3,r3,r2
   42ce4:	e0800217 	ldw	r2,8(fp)
   42ce8:	1889883a 	add	r4,r3,r2
   42cec:	e0fffc17 	ldw	r3,-16(fp)
   42cf0:	e0bffd17 	ldw	r2,-12(fp)
   42cf4:	1887883a 	add	r3,r3,r2
   42cf8:	e0800317 	ldw	r2,12(fp)
   42cfc:	1887883a 	add	r3,r3,r2
   42d00:	e0800417 	ldw	r2,16(fp)
   42d04:	180b883a 	mov	r5,r3
   42d08:	100d883a 	mov	r6,r2
   42d0c:	e1c00617 	ldw	r7,24(fp)
   42d10:	0041b940 	call	41b94 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
   42d14:	e0fffb17 	ldw	r3,-20(fp)
   42d18:	e0bffe17 	ldw	r2,-8(fp)
   42d1c:	1889c83a 	sub	r4,r3,r2
   42d20:	e0fffc17 	ldw	r3,-16(fp)
   42d24:	e0bffd17 	ldw	r2,-12(fp)
   42d28:	1887883a 	add	r3,r3,r2
   42d2c:	e0800317 	ldw	r2,12(fp)
   42d30:	1887883a 	add	r3,r3,r2
   42d34:	e0800417 	ldw	r2,16(fp)
   42d38:	180b883a 	mov	r5,r3
   42d3c:	100d883a 	mov	r6,r2
   42d40:	e1c00617 	ldw	r7,24(fp)
   42d44:	0041b940 	call	41b94 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
   42d48:	e0fffb17 	ldw	r3,-20(fp)
   42d4c:	e0bffe17 	ldw	r2,-8(fp)
   42d50:	1887883a 	add	r3,r3,r2
   42d54:	e0800217 	ldw	r2,8(fp)
   42d58:	1889883a 	add	r4,r3,r2
   42d5c:	e0fffc17 	ldw	r3,-16(fp)
   42d60:	e0bffd17 	ldw	r2,-12(fp)
   42d64:	1887c83a 	sub	r3,r3,r2
   42d68:	e0800417 	ldw	r2,16(fp)
   42d6c:	180b883a 	mov	r5,r3
   42d70:	100d883a 	mov	r6,r2
   42d74:	e1c00617 	ldw	r7,24(fp)
   42d78:	0041b940 	call	41b94 <vid_set_pixel>
          vid_set_pixel(cx - y, cy - x, color, display);
   42d7c:	e0fffb17 	ldw	r3,-20(fp)
   42d80:	e0bffe17 	ldw	r2,-8(fp)
   42d84:	1889c83a 	sub	r4,r3,r2
   42d88:	e0fffc17 	ldw	r3,-16(fp)
   42d8c:	e0bffd17 	ldw	r2,-12(fp)
   42d90:	1887c83a 	sub	r3,r3,r2
   42d94:	e0800417 	ldw	r2,16(fp)
   42d98:	180b883a 	mov	r5,r3
   42d9c:	100d883a 	mov	r6,r2
   42da0:	e1c00617 	ldw	r7,24(fp)
   42da4:	0041b940 	call	41b94 <vid_set_pixel>
        }
    }
}
   42da8:	e037883a 	mov	sp,fp
   42dac:	dfc00117 	ldw	ra,4(sp)
   42db0:	df000017 	ldw	fp,0(sp)
   42db4:	dec00204 	addi	sp,sp,8
   42db8:	f800283a 	ret

00042dbc <max3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes
*
******************************************************************/
__inline__ int max3( int a, int b, int c )
{
   42dbc:	defffc04 	addi	sp,sp,-16
   42dc0:	df000315 	stw	fp,12(sp)
   42dc4:	df000304 	addi	fp,sp,12
   42dc8:	e13ffd15 	stw	r4,-12(fp)
   42dcc:	e17ffe15 	stw	r5,-8(fp)
   42dd0:	e1bfff15 	stw	r6,-4(fp)
  if( a < b )
   42dd4:	e0fffd17 	ldw	r3,-12(fp)
   42dd8:	e0bffe17 	ldw	r2,-8(fp)
   42ddc:	1880020e 	bge	r3,r2,42de8 <max3+0x2c>
    a = b;
   42de0:	e0bffe17 	ldw	r2,-8(fp)
   42de4:	e0bffd15 	stw	r2,-12(fp)
  if( a < c )
   42de8:	e0fffd17 	ldw	r3,-12(fp)
   42dec:	e0bfff17 	ldw	r2,-4(fp)
   42df0:	1880020e 	bge	r3,r2,42dfc <max3+0x40>
    a = c;
   42df4:	e0bfff17 	ldw	r2,-4(fp)
   42df8:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
   42dfc:	e0bffd17 	ldw	r2,-12(fp)
}
   42e00:	e037883a 	mov	sp,fp
   42e04:	df000017 	ldw	fp,0(sp)
   42e08:	dec00104 	addi	sp,sp,4
   42e0c:	f800283a 	ret

00042e10 <min3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes.
*
******************************************************************/
__inline__ int min3( int a, int b, int c )
{
   42e10:	defffc04 	addi	sp,sp,-16
   42e14:	df000315 	stw	fp,12(sp)
   42e18:	df000304 	addi	fp,sp,12
   42e1c:	e13ffd15 	stw	r4,-12(fp)
   42e20:	e17ffe15 	stw	r5,-8(fp)
   42e24:	e1bfff15 	stw	r6,-4(fp)
  if( a > b )
   42e28:	e0bffd17 	ldw	r2,-12(fp)
   42e2c:	e0fffe17 	ldw	r3,-8(fp)
   42e30:	1880020e 	bge	r3,r2,42e3c <min3+0x2c>
    a = b;
   42e34:	e0bffe17 	ldw	r2,-8(fp)
   42e38:	e0bffd15 	stw	r2,-12(fp)
  if( a > c )
   42e3c:	e0bffd17 	ldw	r2,-12(fp)
   42e40:	e0ffff17 	ldw	r3,-4(fp)
   42e44:	1880020e 	bge	r3,r2,42e50 <min3+0x40>
    a = c;
   42e48:	e0bfff17 	ldw	r2,-4(fp)
   42e4c:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
   42e50:	e0bffd17 	ldw	r2,-12(fp)
}
   42e54:	e037883a 	mov	sp,fp
   42e58:	df000017 	ldw	fp,0(sp)
   42e5c:	dec00104 	addi	sp,sp,4
   42e60:	f800283a 	ret

00042e64 <max_diff3>:
*  Purpose:  Returns the positive max difference between 3 
*            parameters.  Used for drawing filled shapes
*
******************************************************************/
__inline__ int max_diff3(int a, int b, int c)
{
   42e64:	defff904 	addi	sp,sp,-28
   42e68:	dfc00615 	stw	ra,24(sp)
   42e6c:	df000515 	stw	fp,20(sp)
   42e70:	df000504 	addi	fp,sp,20
   42e74:	e13ffd15 	stw	r4,-12(fp)
   42e78:	e17ffe15 	stw	r5,-8(fp)
   42e7c:	e1bfff15 	stw	r6,-4(fp)
  int max, min;
    
  max = max3( a, b, c );
   42e80:	e13ffd17 	ldw	r4,-12(fp)
   42e84:	e17ffe17 	ldw	r5,-8(fp)
   42e88:	e1bfff17 	ldw	r6,-4(fp)
   42e8c:	0042dbc0 	call	42dbc <max3>
   42e90:	e0bffb15 	stw	r2,-20(fp)
  min = min3( a, b, c );
   42e94:	e13ffd17 	ldw	r4,-12(fp)
   42e98:	e17ffe17 	ldw	r5,-8(fp)
   42e9c:	e1bfff17 	ldw	r6,-4(fp)
   42ea0:	0042e100 	call	42e10 <min3>
   42ea4:	e0bffc15 	stw	r2,-16(fp)
  return (max - min);
   42ea8:	e0fffb17 	ldw	r3,-20(fp)
   42eac:	e0bffc17 	ldw	r2,-16(fp)
   42eb0:	1885c83a 	sub	r2,r3,r2
}
   42eb4:	e037883a 	mov	sp,fp
   42eb8:	dfc00117 	ldw	ra,4(sp)
   42ebc:	df000017 	ldw	fp,0(sp)
   42ec0:	dec00204 	addi	sp,sp,8
   42ec4:	f800283a 	ret

00042ec8 <vid_put_pixel_in_span_map>:
*            min value of an element that represents a span, 
*            essentially just a horizontal line used to fill shapes.
*
******************************************************************/
inline void vid_put_pixel_in_span_map( int x, int y, int *span_array )
{
   42ec8:	defffc04 	addi	sp,sp,-16
   42ecc:	df000315 	stw	fp,12(sp)
   42ed0:	df000304 	addi	fp,sp,12
   42ed4:	e13ffd15 	stw	r4,-12(fp)
   42ed8:	e17ffe15 	stw	r5,-8(fp)
   42edc:	e1bfff15 	stw	r6,-4(fp)
  if (span_array[y*2] == -1)
   42ee0:	e0bffe17 	ldw	r2,-8(fp)
   42ee4:	100490fa 	slli	r2,r2,3
   42ee8:	e0ffff17 	ldw	r3,-4(fp)
   42eec:	1885883a 	add	r2,r3,r2
   42ef0:	10800017 	ldw	r2,0(r2)
   42ef4:	10bfffd8 	cmpnei	r2,r2,-1
   42ef8:	10000e1e 	bne	r2,zero,42f34 <vid_put_pixel_in_span_map+0x6c>
  {
    span_array[y*2] = x;
   42efc:	e0bffe17 	ldw	r2,-8(fp)
   42f00:	100490fa 	slli	r2,r2,3
   42f04:	e0ffff17 	ldw	r3,-4(fp)
   42f08:	1885883a 	add	r2,r3,r2
   42f0c:	e0fffd17 	ldw	r3,-12(fp)
   42f10:	10c00015 	stw	r3,0(r2)
    span_array[(y*2)+1] = x;
   42f14:	e0bffe17 	ldw	r2,-8(fp)
   42f18:	100490fa 	slli	r2,r2,3
   42f1c:	10800104 	addi	r2,r2,4
   42f20:	e0ffff17 	ldw	r3,-4(fp)
   42f24:	1885883a 	add	r2,r3,r2
   42f28:	e0fffd17 	ldw	r3,-12(fp)
   42f2c:	10c00015 	stw	r3,0(r2)
   42f30:	00001d06 	br	42fa8 <vid_put_pixel_in_span_map+0xe0>
  }
  else if( span_array[y*2] > x )
   42f34:	e0bffe17 	ldw	r2,-8(fp)
   42f38:	100490fa 	slli	r2,r2,3
   42f3c:	e0ffff17 	ldw	r3,-4(fp)
   42f40:	1885883a 	add	r2,r3,r2
   42f44:	10800017 	ldw	r2,0(r2)
   42f48:	e0fffd17 	ldw	r3,-12(fp)
   42f4c:	1880070e 	bge	r3,r2,42f6c <vid_put_pixel_in_span_map+0xa4>
    span_array[y*2] = x;
   42f50:	e0bffe17 	ldw	r2,-8(fp)
   42f54:	100490fa 	slli	r2,r2,3
   42f58:	e0ffff17 	ldw	r3,-4(fp)
   42f5c:	1885883a 	add	r2,r3,r2
   42f60:	e0fffd17 	ldw	r3,-12(fp)
   42f64:	10c00015 	stw	r3,0(r2)
   42f68:	00000f06 	br	42fa8 <vid_put_pixel_in_span_map+0xe0>
  else if( span_array[(y*2)+1] < x )
   42f6c:	e0bffe17 	ldw	r2,-8(fp)
   42f70:	100490fa 	slli	r2,r2,3
   42f74:	10800104 	addi	r2,r2,4
   42f78:	e0ffff17 	ldw	r3,-4(fp)
   42f7c:	1885883a 	add	r2,r3,r2
   42f80:	10c00017 	ldw	r3,0(r2)
   42f84:	e0bffd17 	ldw	r2,-12(fp)
   42f88:	1880070e 	bge	r3,r2,42fa8 <vid_put_pixel_in_span_map+0xe0>
    span_array[(y*2)+1] = x;
   42f8c:	e0bffe17 	ldw	r2,-8(fp)
   42f90:	100490fa 	slli	r2,r2,3
   42f94:	10800104 	addi	r2,r2,4
   42f98:	e0ffff17 	ldw	r3,-4(fp)
   42f9c:	1885883a 	add	r2,r3,r2
   42fa0:	e0fffd17 	ldw	r3,-12(fp)
   42fa4:	10c00015 	stw	r3,0(r2)
}
   42fa8:	e037883a 	mov	sp,fp
   42fac:	df000017 	ldw	fp,0(sp)
   42fb0:	dec00104 	addi	sp,sp,4
   42fb4:	f800283a 	ret

00042fb8 <vid_bres_scan_edges>:
*            filled shapes where you fill by drawing successive
*            horizontal lines.
*
******************************************************************/
void vid_bres_scan_edges( int x1, int y1, int x2, int y2, int *span_array) 
{
   42fb8:	deffee04 	addi	sp,sp,-72
   42fbc:	dfc01115 	stw	ra,68(sp)
   42fc0:	df001015 	stw	fp,64(sp)
   42fc4:	df001004 	addi	fp,sp,64
   42fc8:	e13ffc15 	stw	r4,-16(fp)
   42fcc:	e17ffd15 	stw	r5,-12(fp)
   42fd0:	e1bffe15 	stw	r6,-8(fp)
   42fd4:	e1ffff15 	stw	r7,-4(fp)

  int x_incr, y_incr;
  int y_delta, x_delta;

  // Assure we always draw left to right
  if( x1 > x2 )
   42fd8:	e0bffc17 	ldw	r2,-16(fp)
   42fdc:	e0fffe17 	ldw	r3,-8(fp)
   42fe0:	18800c0e 	bge	r3,r2,43014 <vid_bres_scan_edges+0x5c>
  {
    int tempx = x2;
   42fe4:	e0bffe17 	ldw	r2,-8(fp)
   42fe8:	e0bff515 	stw	r2,-44(fp)
    x2 = x1;
   42fec:	e0bffc17 	ldw	r2,-16(fp)
   42ff0:	e0bffe15 	stw	r2,-8(fp)
    x1 = tempx;
   42ff4:	e0bff517 	ldw	r2,-44(fp)
   42ff8:	e0bffc15 	stw	r2,-16(fp)
    int tempy = y2;
   42ffc:	e0bfff17 	ldw	r2,-4(fp)
   43000:	e0bff615 	stw	r2,-40(fp)
    y2 = y1;
   43004:	e0bffd17 	ldw	r2,-12(fp)
   43008:	e0bfff15 	stw	r2,-4(fp)
    y1 = tempy;
   4300c:	e0bff617 	ldw	r2,-40(fp)
   43010:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // Find the vertical and horizontal distance between the two points
  y_delta = abs(y1-y2);
   43014:	e0fffd17 	ldw	r3,-12(fp)
   43018:	e0bfff17 	ldw	r2,-4(fp)
   4301c:	1885c83a 	sub	r2,r3,r2
   43020:	1000010e 	bge	r2,zero,43028 <vid_bres_scan_edges+0x70>
   43024:	0085c83a 	sub	r2,zero,r2
   43028:	e0bff115 	stw	r2,-60(fp)
  x_delta = (x2-x1);
   4302c:	e0fffe17 	ldw	r3,-8(fp)
   43030:	e0bffc17 	ldw	r2,-16(fp)
   43034:	1885c83a 	sub	r2,r3,r2
   43038:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  if (y1 > y2) { y_incr=-1; } else { y_incr=1; }
   4303c:	e0bffd17 	ldw	r2,-12(fp)
   43040:	e0ffff17 	ldw	r3,-4(fp)
   43044:	1880030e 	bge	r3,r2,43054 <vid_bres_scan_edges+0x9c>
   43048:	00bfffc4 	movi	r2,-1
   4304c:	e0bff015 	stw	r2,-64(fp)
   43050:	00000206 	br	4305c <vid_bres_scan_edges+0xa4>
   43054:	00800044 	movi	r2,1
   43058:	e0bff015 	stw	r2,-64(fp)
  x_incr=1;
   4305c:	00800044 	movi	r2,1
   43060:	e0bff715 	stw	r2,-36(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (x_delta >= y_delta) {
   43064:	e0fff217 	ldw	r3,-56(fp)
   43068:	e0bff117 	ldw	r2,-60(fp)
   4306c:	18802e16 	blt	r3,r2,43128 <vid_bres_scan_edges+0x170>
    int dPr   = y_delta<<1;
   43070:	e0bff117 	ldw	r2,-60(fp)
   43074:	1085883a 	add	r2,r2,r2
   43078:	e0bff815 	stw	r2,-32(fp)
    int dPru  = dPr - (x_delta<<1);
   4307c:	e0bff217 	ldw	r2,-56(fp)
   43080:	1085883a 	add	r2,r2,r2
   43084:	e0fff817 	ldw	r3,-32(fp)
   43088:	1885c83a 	sub	r2,r3,r2
   4308c:	e0bff915 	stw	r2,-28(fp)
    int P     = dPr - x_delta;
   43090:	e0fff817 	ldw	r3,-32(fp)
   43094:	e0bff217 	ldw	r2,-56(fp)
   43098:	1885c83a 	sub	r2,r3,r2
   4309c:	e0bff315 	stw	r2,-52(fp)

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
   430a0:	00001e06 	br	4311c <vid_bres_scan_edges+0x164>
      // map the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
   430a4:	e13ffc17 	ldw	r4,-16(fp)
   430a8:	e17ffd17 	ldw	r5,-12(fp)
   430ac:	e1800217 	ldw	r6,8(fp)
   430b0:	0042ec80 	call	42ec8 <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
   430b4:	e0bff317 	ldw	r2,-52(fp)
   430b8:	00800d0e 	bge	zero,r2,430f0 <vid_bres_scan_edges+0x138>
        x1+=x_incr;
   430bc:	e0fffc17 	ldw	r3,-16(fp)
   430c0:	e0bff717 	ldw	r2,-36(fp)
   430c4:	1885883a 	add	r2,r3,r2
   430c8:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
   430cc:	e0fffd17 	ldw	r3,-12(fp)
   430d0:	e0bff017 	ldw	r2,-64(fp)
   430d4:	1885883a 	add	r2,r3,r2
   430d8:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
   430dc:	e0fff317 	ldw	r3,-52(fp)
   430e0:	e0bff917 	ldw	r2,-28(fp)
   430e4:	1885883a 	add	r2,r3,r2
   430e8:	e0bff315 	stw	r2,-52(fp)
   430ec:	00000806 	br	43110 <vid_bres_scan_edges+0x158>
      } else {
        x1+=x_incr;
   430f0:	e0fffc17 	ldw	r3,-16(fp)
   430f4:	e0bff717 	ldw	r2,-36(fp)
   430f8:	1885883a 	add	r2,r3,r2
   430fc:	e0bffc15 	stw	r2,-16(fp)
        P+=dPr;
   43100:	e0fff317 	ldw	r3,-52(fp)
   43104:	e0bff817 	ldw	r2,-32(fp)
   43108:	1885883a 	add	r2,r3,r2
   4310c:	e0bff315 	stw	r2,-52(fp)
    int dPr   = y_delta<<1;
    int dPru  = dPr - (x_delta<<1);
    int P     = dPr - x_delta;

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
   43110:	e0bff217 	ldw	r2,-56(fp)
   43114:	10bfffc4 	addi	r2,r2,-1
   43118:	e0bff215 	stw	r2,-56(fp)
   4311c:	e0bff217 	ldw	r2,-56(fp)
   43120:	103fe00e 	bge	r2,zero,430a4 <__alt_data_end+0xfffcd544>
   43124:	00002d06 	br	431dc <vid_bres_scan_edges+0x224>
      }
    }
  }
  else // If it's the vertical axis
  {
    int dPr   = x_delta<<1;
   43128:	e0bff217 	ldw	r2,-56(fp)
   4312c:	1085883a 	add	r2,r2,r2
   43130:	e0bffa15 	stw	r2,-24(fp)
    int dPru  = dPr - (y_delta<<1);
   43134:	e0bff117 	ldw	r2,-60(fp)
   43138:	1085883a 	add	r2,r2,r2
   4313c:	e0fffa17 	ldw	r3,-24(fp)
   43140:	1885c83a 	sub	r2,r3,r2
   43144:	e0bffb15 	stw	r2,-20(fp)
    int P     = dPr - y_delta;
   43148:	e0fffa17 	ldw	r3,-24(fp)
   4314c:	e0bff117 	ldw	r2,-60(fp)
   43150:	1885c83a 	sub	r2,r3,r2
   43154:	e0bff415 	stw	r2,-48(fp)

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
   43158:	00001e06 	br	431d4 <vid_bres_scan_edges+0x21c>
      // plot the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
   4315c:	e13ffc17 	ldw	r4,-16(fp)
   43160:	e17ffd17 	ldw	r5,-12(fp)
   43164:	e1800217 	ldw	r6,8(fp)
   43168:	0042ec80 	call	42ec8 <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
   4316c:	e0bff417 	ldw	r2,-48(fp)
   43170:	00800d0e 	bge	zero,r2,431a8 <vid_bres_scan_edges+0x1f0>
        x1+=x_incr;
   43174:	e0fffc17 	ldw	r3,-16(fp)
   43178:	e0bff717 	ldw	r2,-36(fp)
   4317c:	1885883a 	add	r2,r3,r2
   43180:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
   43184:	e0fffd17 	ldw	r3,-12(fp)
   43188:	e0bff017 	ldw	r2,-64(fp)
   4318c:	1885883a 	add	r2,r3,r2
   43190:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
   43194:	e0fff417 	ldw	r3,-48(fp)
   43198:	e0bffb17 	ldw	r2,-20(fp)
   4319c:	1885883a 	add	r2,r3,r2
   431a0:	e0bff415 	stw	r2,-48(fp)
   431a4:	00000806 	br	431c8 <vid_bres_scan_edges+0x210>
      } else {
        y1+=y_incr;
   431a8:	e0fffd17 	ldw	r3,-12(fp)
   431ac:	e0bff017 	ldw	r2,-64(fp)
   431b0:	1885883a 	add	r2,r3,r2
   431b4:	e0bffd15 	stw	r2,-12(fp)
        P+=dPr;
   431b8:	e0fff417 	ldw	r3,-48(fp)
   431bc:	e0bffa17 	ldw	r2,-24(fp)
   431c0:	1885883a 	add	r2,r3,r2
   431c4:	e0bff415 	stw	r2,-48(fp)
    int dPr   = x_delta<<1;
    int dPru  = dPr - (y_delta<<1);
    int P     = dPr - y_delta;

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
   431c8:	e0bff117 	ldw	r2,-60(fp)
   431cc:	10bfffc4 	addi	r2,r2,-1
   431d0:	e0bff115 	stw	r2,-60(fp)
   431d4:	e0bff117 	ldw	r2,-60(fp)
   431d8:	103fe00e 	bge	r2,zero,4315c <__alt_data_end+0xfffcd5fc>
        y1+=y_incr;
        P+=dPr;
      }
    }
  }
}
   431dc:	e037883a 	mov	sp,fp
   431e0:	dfc00117 	ldw	ra,4(sp)
   431e4:	df000017 	ldw	fp,0(sp)
   431e8:	dec00204 	addi	sp,sp,8
   431ec:	f800283a 	ret

000431f0 <vid_draw_triangle>:
*  Purpose:  This function draws a triangle on the screen between
*            three points defined by the structure tri.
*
******************************************************************/
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
   431f0:	defff804 	addi	sp,sp,-32
   431f4:	dfc00715 	stw	ra,28(sp)
   431f8:	df000615 	stw	fp,24(sp)
   431fc:	df000604 	addi	fp,sp,24
   43200:	e13ffe15 	stw	r4,-8(fp)
   43204:	e17fff15 	stw	r5,-4(fp)
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
   43208:	e0bffe17 	ldw	r2,-8(fp)
   4320c:	11000017 	ldw	r4,0(r2)
   43210:	e0bffe17 	ldw	r2,-8(fp)
   43214:	11400317 	ldw	r5,12(r2)
   43218:	e0bffe17 	ldw	r2,-8(fp)
   4321c:	10c00117 	ldw	r3,4(r2)
   43220:	e0bffe17 	ldw	r2,-8(fp)
   43224:	10800417 	ldw	r2,16(r2)
   43228:	e1bffe17 	ldw	r6,-8(fp)
   4322c:	31800a17 	ldw	r6,40(r6)
   43230:	01c00044 	movi	r7,1
   43234:	d9c00015 	stw	r7,0(sp)
   43238:	d9800115 	stw	r6,4(sp)
   4323c:	e1bfff17 	ldw	r6,-4(fp)
   43240:	d9800215 	stw	r6,8(sp)
   43244:	180d883a 	mov	r6,r3
   43248:	100f883a 	mov	r7,r2
   4324c:	00411500 	call	41150 <vid_draw_line>
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
   43250:	e0bffe17 	ldw	r2,-8(fp)
   43254:	11000117 	ldw	r4,4(r2)
   43258:	e0bffe17 	ldw	r2,-8(fp)
   4325c:	11400417 	ldw	r5,16(r2)
   43260:	e0bffe17 	ldw	r2,-8(fp)
   43264:	10c00217 	ldw	r3,8(r2)
   43268:	e0bffe17 	ldw	r2,-8(fp)
   4326c:	10800517 	ldw	r2,20(r2)
   43270:	e1bffe17 	ldw	r6,-8(fp)
   43274:	31800a17 	ldw	r6,40(r6)
   43278:	01c00044 	movi	r7,1
   4327c:	d9c00015 	stw	r7,0(sp)
   43280:	d9800115 	stw	r6,4(sp)
   43284:	e1bfff17 	ldw	r6,-4(fp)
   43288:	d9800215 	stw	r6,8(sp)
   4328c:	180d883a 	mov	r6,r3
   43290:	100f883a 	mov	r7,r2
   43294:	00411500 	call	41150 <vid_draw_line>
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
   43298:	e0bffe17 	ldw	r2,-8(fp)
   4329c:	11000217 	ldw	r4,8(r2)
   432a0:	e0bffe17 	ldw	r2,-8(fp)
   432a4:	11400517 	ldw	r5,20(r2)
   432a8:	e0bffe17 	ldw	r2,-8(fp)
   432ac:	10c00017 	ldw	r3,0(r2)
   432b0:	e0bffe17 	ldw	r2,-8(fp)
   432b4:	10800317 	ldw	r2,12(r2)
   432b8:	e1bffe17 	ldw	r6,-8(fp)
   432bc:	31800a17 	ldw	r6,40(r6)
   432c0:	01c00044 	movi	r7,1
   432c4:	d9c00015 	stw	r7,0(sp)
   432c8:	d9800115 	stw	r6,4(sp)
   432cc:	e1bfff17 	ldw	r6,-4(fp)
   432d0:	d9800215 	stw	r6,8(sp)
   432d4:	180d883a 	mov	r6,r3
   432d8:	100f883a 	mov	r7,r2
   432dc:	00411500 	call	41150 <vid_draw_line>
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
//  vid_draw_line(tri->bx, tri->by, tri->cx, tri->cy, 1, tri->col, display);
//  vid_draw_line(tri->cx, tri->cy, tri->ax, tri->ay, 1, tri->col, display);
  
  if(tri->fill == DO_FILL)
   432e0:	e0bffe17 	ldw	r2,-8(fp)
   432e4:	10800b17 	ldw	r2,44(r2)
   432e8:	10800058 	cmpnei	r2,r2,1
   432ec:	1000a41e 	bne	r2,zero,43580 <vid_draw_triangle+0x390>
  {
    tri->top_y = min3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
   432f0:	e0bffe17 	ldw	r2,-8(fp)
   432f4:	11000317 	ldw	r4,12(r2)
   432f8:	e0bffe17 	ldw	r2,-8(fp)
   432fc:	10c00417 	ldw	r3,16(r2)
   43300:	e0bffe17 	ldw	r2,-8(fp)
   43304:	10800517 	ldw	r2,20(r2)
   43308:	180b883a 	mov	r5,r3
   4330c:	100d883a 	mov	r6,r2
   43310:	0042e100 	call	42e10 <min3>
   43314:	1007883a 	mov	r3,r2
   43318:	e0bffe17 	ldw	r2,-8(fp)
   4331c:	10c00815 	stw	r3,32(r2)
    tri->bottom_y = max3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
   43320:	e0bffe17 	ldw	r2,-8(fp)
   43324:	11000317 	ldw	r4,12(r2)
   43328:	e0bffe17 	ldw	r2,-8(fp)
   4332c:	10c00417 	ldw	r3,16(r2)
   43330:	e0bffe17 	ldw	r2,-8(fp)
   43334:	10800517 	ldw	r2,20(r2)
   43338:	180b883a 	mov	r5,r3
   4333c:	100d883a 	mov	r6,r2
   43340:	0042dbc0 	call	42dbc <max3>
   43344:	1007883a 	mov	r3,r2
   43348:	e0bffe17 	ldw	r2,-8(fp)
   4334c:	10c00915 	stw	r3,36(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
   43350:	e0bffe17 	ldw	r2,-8(fp)
   43354:	11000317 	ldw	r4,12(r2)
   43358:	e0bffe17 	ldw	r2,-8(fp)
   4335c:	10c00417 	ldw	r3,16(r2)
   43360:	e0bffe17 	ldw	r2,-8(fp)
   43364:	10800517 	ldw	r2,20(r2)
   43368:	180b883a 	mov	r5,r3
   4336c:	100d883a 	mov	r6,r2
   43370:	0042e640 	call	42e64 <max_diff3>
   43374:	1007883a 	mov	r3,r2
   43378:	e0bffe17 	ldw	r2,-8(fp)
   4337c:	10c00615 	stw	r3,24(r2)
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
   43380:	e0bffe17 	ldw	r2,-8(fp)
   43384:	11000017 	ldw	r4,0(r2)
   43388:	e0bffe17 	ldw	r2,-8(fp)
   4338c:	10c00117 	ldw	r3,4(r2)
   43390:	e0bffe17 	ldw	r2,-8(fp)
   43394:	10800217 	ldw	r2,8(r2)
   43398:	180b883a 	mov	r5,r3
   4339c:	100d883a 	mov	r6,r2
   433a0:	0042e640 	call	42e64 <max_diff3>
   433a4:	1007883a 	mov	r3,r2
   433a8:	e0bffe17 	ldw	r2,-8(fp)
   433ac:	10c00715 	stw	r3,28(r2)
    tri->span_array = malloc(display->height * 4 * 2);
   433b0:	e0bfff17 	ldw	r2,-4(fp)
   433b4:	10800217 	ldw	r2,8(r2)
   433b8:	100490fa 	slli	r2,r2,3
   433bc:	1009883a 	mov	r4,r2
   433c0:	0049cc40 	call	49cc4 <malloc>
   433c4:	1007883a 	mov	r3,r2
   433c8:	e0bffe17 	ldw	r2,-8(fp)
   433cc:	10c00d15 	stw	r3,52(r2)

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
   433d0:	e0bffe17 	ldw	r2,-8(fp)
   433d4:	10800817 	ldw	r2,32(r2)
   433d8:	e0bffd15 	stw	r2,-12(fp)
   433dc:	00001206 	br	43428 <vid_draw_triangle+0x238>
    {
      tri->span_array[i*2] = -1;
   433e0:	e0bffe17 	ldw	r2,-8(fp)
   433e4:	10c00d17 	ldw	r3,52(r2)
   433e8:	e0bffd17 	ldw	r2,-12(fp)
   433ec:	100490fa 	slli	r2,r2,3
   433f0:	1885883a 	add	r2,r3,r2
   433f4:	00ffffc4 	movi	r3,-1
   433f8:	10c00015 	stw	r3,0(r2)
      tri->span_array[(i*2) + 1] = -1;
   433fc:	e0bffe17 	ldw	r2,-8(fp)
   43400:	10c00d17 	ldw	r3,52(r2)
   43404:	e0bffd17 	ldw	r2,-12(fp)
   43408:	100490fa 	slli	r2,r2,3
   4340c:	10800104 	addi	r2,r2,4
   43410:	1885883a 	add	r2,r3,r2
   43414:	00ffffc4 	movi	r3,-1
   43418:	10c00015 	stw	r3,0(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
    tri->span_array = malloc(display->height * 4 * 2);

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
   4341c:	e0bffd17 	ldw	r2,-12(fp)
   43420:	10800044 	addi	r2,r2,1
   43424:	e0bffd15 	stw	r2,-12(fp)
   43428:	e0bffe17 	ldw	r2,-8(fp)
   4342c:	10c00917 	ldw	r3,36(r2)
   43430:	e0bffd17 	ldw	r2,-12(fp)
   43434:	18bfea0e 	bge	r3,r2,433e0 <__alt_data_end+0xfffcd880>
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
   43438:	e0bffe17 	ldw	r2,-8(fp)
   4343c:	11000017 	ldw	r4,0(r2)
   43440:	e0bffe17 	ldw	r2,-8(fp)
   43444:	11400317 	ldw	r5,12(r2)
   43448:	e0bffe17 	ldw	r2,-8(fp)
   4344c:	10c00117 	ldw	r3,4(r2)
   43450:	e0bffe17 	ldw	r2,-8(fp)
   43454:	10800417 	ldw	r2,16(r2)
   43458:	e1bffe17 	ldw	r6,-8(fp)
   4345c:	31800d17 	ldw	r6,52(r6)
   43460:	d9800015 	stw	r6,0(sp)
   43464:	180d883a 	mov	r6,r3
   43468:	100f883a 	mov	r7,r2
   4346c:	0042fb80 	call	42fb8 <vid_bres_scan_edges>
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
   43470:	e0bffe17 	ldw	r2,-8(fp)
   43474:	11000117 	ldw	r4,4(r2)
   43478:	e0bffe17 	ldw	r2,-8(fp)
   4347c:	11400417 	ldw	r5,16(r2)
   43480:	e0bffe17 	ldw	r2,-8(fp)
   43484:	10c00217 	ldw	r3,8(r2)
   43488:	e0bffe17 	ldw	r2,-8(fp)
   4348c:	10800517 	ldw	r2,20(r2)
   43490:	e1bffe17 	ldw	r6,-8(fp)
   43494:	31800d17 	ldw	r6,52(r6)
   43498:	d9800015 	stw	r6,0(sp)
   4349c:	180d883a 	mov	r6,r3
   434a0:	100f883a 	mov	r7,r2
   434a4:	0042fb80 	call	42fb8 <vid_bres_scan_edges>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
   434a8:	e0bffe17 	ldw	r2,-8(fp)
   434ac:	11000217 	ldw	r4,8(r2)
   434b0:	e0bffe17 	ldw	r2,-8(fp)
   434b4:	11400517 	ldw	r5,20(r2)
   434b8:	e0bffe17 	ldw	r2,-8(fp)
   434bc:	10c00017 	ldw	r3,0(r2)
   434c0:	e0bffe17 	ldw	r2,-8(fp)
   434c4:	10800317 	ldw	r2,12(r2)
   434c8:	e1bffe17 	ldw	r6,-8(fp)
   434cc:	31800d17 	ldw	r6,52(r6)
   434d0:	d9800015 	stw	r6,0(sp)
   434d4:	180d883a 	mov	r6,r3
   434d8:	100f883a 	mov	r7,r2
   434dc:	0042fb80 	call	42fb8 <vid_bres_scan_edges>
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
   434e0:	e0bffe17 	ldw	r2,-8(fp)
   434e4:	10800817 	ldw	r2,32(r2)
   434e8:	e0bffd15 	stw	r2,-12(fp)
   434ec:	00001c06 	br	43560 <vid_draw_triangle+0x370>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);
   434f0:	e0bffe17 	ldw	r2,-8(fp)
   434f4:	10c00d17 	ldw	r3,52(r2)
   434f8:	e0bffd17 	ldw	r2,-12(fp)
   434fc:	100490fa 	slli	r2,r2,3
   43500:	1885883a 	add	r2,r3,r2
   43504:	10c00017 	ldw	r3,0(r2)
   43508:	e0bffe17 	ldw	r2,-8(fp)
   4350c:	11000d17 	ldw	r4,52(r2)
   43510:	e0bffd17 	ldw	r2,-12(fp)
   43514:	100490fa 	slli	r2,r2,3
   43518:	10800104 	addi	r2,r2,4
   4351c:	2085883a 	add	r2,r4,r2
   43520:	10800017 	ldw	r2,0(r2)
   43524:	e13ffe17 	ldw	r4,-8(fp)
   43528:	21000a17 	ldw	r4,40(r4)
   4352c:	01400044 	movi	r5,1
   43530:	d9400015 	stw	r5,0(sp)
   43534:	d9000115 	stw	r4,4(sp)
   43538:	e13fff17 	ldw	r4,-4(fp)
   4353c:	d9000215 	stw	r4,8(sp)
   43540:	1809883a 	mov	r4,r3
   43544:	e17ffd17 	ldw	r5,-12(fp)
   43548:	100d883a 	mov	r6,r2
   4354c:	e1fffd17 	ldw	r7,-12(fp)
   43550:	00411500 	call	41150 <vid_draw_line>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
   43554:	e0bffd17 	ldw	r2,-12(fp)
   43558:	10800044 	addi	r2,r2,1
   4355c:	e0bffd15 	stw	r2,-12(fp)
   43560:	e0bffe17 	ldw	r2,-8(fp)
   43564:	10c00917 	ldw	r3,36(r2)
   43568:	e0bffd17 	ldw	r2,-12(fp)
   4356c:	18bfe00e 	bge	r3,r2,434f0 <__alt_data_end+0xfffcd990>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);

    }
    free(tri->span_array);
   43570:	e0bffe17 	ldw	r2,-8(fp)
   43574:	10800d17 	ldw	r2,52(r2)
   43578:	1009883a 	mov	r4,r2
   4357c:	0049cd80 	call	49cd8 <free>
  }
}
   43580:	e037883a 	mov	sp,fp
   43584:	dfc00117 	ldw	ra,4(sp)
   43588:	df000017 	ldw	fp,0(sp)
   4358c:	dec00204 	addi	sp,sp,8
   43590:	f800283a 	ret

00043594 <CopyImage16>:

void CopyImage16( short * __restrict__ source_buffer, 
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short dest_width, short dest_height )
{
   43594:	defff404 	addi	sp,sp,-48
   43598:	dfc00b15 	stw	ra,44(sp)
   4359c:	df000a15 	stw	fp,40(sp)
   435a0:	df000a04 	addi	fp,sp,40
   435a4:	e13ffa15 	stw	r4,-24(fp)
   435a8:	e17ffb15 	stw	r5,-20(fp)
   435ac:	300b883a 	mov	r5,r6
   435b0:	3809883a 	mov	r4,r7
   435b4:	e0c00217 	ldw	r3,8(fp)
   435b8:	e0800317 	ldw	r2,12(fp)
   435bc:	e17ffc0d 	sth	r5,-16(fp)
   435c0:	e13ffd0d 	sth	r4,-12(fp)
   435c4:	e0fffe0d 	sth	r3,-8(fp)
   435c8:	e0bfff0d 	sth	r2,-4(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
   435cc:	e03ff815 	stw	zero,-32(fp)
  int y_dst_offset = 0;
   435d0:	e03ff915 	stw	zero,-28(fp)
  
  for( y_src = 0, y_dst = 0; 
   435d4:	e03ff615 	stw	zero,-40(fp)
   435d8:	e03ff715 	stw	zero,-36(fp)
   435dc:	00001b06 	br	4364c <CopyImage16+0xb8>
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
   435e0:	e0bff917 	ldw	r2,-28(fp)
   435e4:	1085883a 	add	r2,r2,r2
   435e8:	e0fffb17 	ldw	r3,-20(fp)
   435ec:	1889883a 	add	r4,r3,r2
   435f0:	e0bff817 	ldw	r2,-32(fp)
           ( source_buffer + y_src_offset ), 
   435f4:	1085883a 	add	r2,r2,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
   435f8:	e0fffa17 	ldw	r3,-24(fp)
   435fc:	1887883a 	add	r3,r3,r2
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
   43600:	e0bffc0f 	ldh	r2,-16(fp)
   43604:	1085883a 	add	r2,r2,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
   43608:	180b883a 	mov	r5,r3
   4360c:	100d883a 	mov	r6,r2
   43610:	004a36c0 	call	4a36c <memcpy>
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
   43614:	e0bff617 	ldw	r2,-40(fp)
   43618:	10800044 	addi	r2,r2,1
   4361c:	e0bff615 	stw	r2,-40(fp)
   43620:	e0bff717 	ldw	r2,-36(fp)
   43624:	10800044 	addi	r2,r2,1
   43628:	e0bff715 	stw	r2,-36(fp)
   4362c:	e0bffc0f 	ldh	r2,-16(fp)
   43630:	e0fff817 	ldw	r3,-32(fp)
   43634:	1885883a 	add	r2,r3,r2
   43638:	e0bff815 	stw	r2,-32(fp)
   4363c:	e0bffe0f 	ldh	r2,-8(fp)
   43640:	e0fff917 	ldw	r3,-28(fp)
   43644:	1885883a 	add	r2,r3,r2
   43648:	e0bff915 	stw	r2,-28(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
   4364c:	e0bffd0f 	ldh	r2,-12(fp)
   43650:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
   43654:	e0bff617 	ldw	r2,-40(fp)
   43658:	18bfe10e 	bge	r3,r2,435e0 <__alt_data_end+0xfffcda80>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
  }
}
   4365c:	e037883a 	mov	sp,fp
   43660:	dfc00117 	ldw	ra,4(sp)
   43664:	df000017 	ldw	fp,0(sp)
   43668:	dec00204 	addi	sp,sp,8
   4366c:	f800283a 	ret

00043670 <CropImage16>:
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short crop_left, short crop_right,
                  short crop_top, short crop_bottom,
                  short dest_width, short dest_height )
{
   43670:	defff004 	addi	sp,sp,-64
   43674:	dfc00f15 	stw	ra,60(sp)
   43678:	df000e15 	stw	fp,56(sp)
   4367c:	df000e04 	addi	fp,sp,56
   43680:	e13ff615 	stw	r4,-40(fp)
   43684:	e17ff715 	stw	r5,-36(fp)
   43688:	3013883a 	mov	r9,r6
   4368c:	3811883a 	mov	r8,r7
   43690:	e1c00217 	ldw	r7,8(fp)
   43694:	e1800317 	ldw	r6,12(fp)
   43698:	e1400417 	ldw	r5,16(fp)
   4369c:	e1000517 	ldw	r4,20(fp)
   436a0:	e0c00617 	ldw	r3,24(fp)
   436a4:	e0800717 	ldw	r2,28(fp)
   436a8:	e27ff80d 	sth	r9,-32(fp)
   436ac:	e23ff90d 	sth	r8,-28(fp)
   436b0:	e1fffa0d 	sth	r7,-24(fp)
   436b4:	e1bffb0d 	sth	r6,-20(fp)
   436b8:	e17ffc0d 	sth	r5,-16(fp)
   436bc:	e13ffd0d 	sth	r4,-12(fp)
   436c0:	e0fffe0d 	sth	r3,-8(fp)
   436c4:	e0bfff0d 	sth	r2,-4(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
   436c8:	e0fff80f 	ldh	r3,-32(fp)
   436cc:	e0bffc0f 	ldh	r2,-16(fp)
   436d0:	1885383a 	mul	r2,r3,r2
   436d4:	e0bff415 	stw	r2,-48(fp)
  int y_dst_offset = 0;
   436d8:	e03ff515 	stw	zero,-44(fp)
  
  for( y_src = crop_top, y_dst = 0; 
   436dc:	e0bffc0f 	ldh	r2,-16(fp)
   436e0:	e0bff215 	stw	r2,-56(fp)
   436e4:	e03ff315 	stw	zero,-52(fp)
   436e8:	00002106 	br	43770 <CropImage16+0x100>
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
   436ec:	e0bff517 	ldw	r2,-44(fp)
   436f0:	1085883a 	add	r2,r2,r2
   436f4:	e0fff717 	ldw	r3,-36(fp)
   436f8:	1889883a 	add	r4,r3,r2
           ( source_buffer + y_src_offset + crop_left ), 
   436fc:	e0fffa0f 	ldh	r3,-24(fp)
   43700:	e0bff417 	ldw	r2,-48(fp)
   43704:	1885883a 	add	r2,r3,r2
   43708:	1085883a 	add	r2,r2,r2
   4370c:	e0fff617 	ldw	r3,-40(fp)
   43710:	1887883a 	add	r3,r3,r2
           ((source_width - crop_left - crop_right) << 1));
   43714:	e17ff80f 	ldh	r5,-32(fp)
   43718:	e0bffa0f 	ldh	r2,-24(fp)
   4371c:	288bc83a 	sub	r5,r5,r2
   43720:	e0bffb0f 	ldh	r2,-20(fp)
   43724:	2885c83a 	sub	r2,r5,r2
   43728:	1085883a 	add	r2,r2,r2
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
   4372c:	180b883a 	mov	r5,r3
   43730:	100d883a 	mov	r6,r2
   43734:	004a36c0 	call	4a36c <memcpy>
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
   43738:	e0bff217 	ldw	r2,-56(fp)
   4373c:	10800044 	addi	r2,r2,1
   43740:	e0bff215 	stw	r2,-56(fp)
   43744:	e0bff317 	ldw	r2,-52(fp)
   43748:	10800044 	addi	r2,r2,1
   4374c:	e0bff315 	stw	r2,-52(fp)
   43750:	e0bff80f 	ldh	r2,-32(fp)
   43754:	e0fff417 	ldw	r3,-48(fp)
   43758:	1885883a 	add	r2,r3,r2
   4375c:	e0bff415 	stw	r2,-48(fp)
   43760:	e0bffe0f 	ldh	r2,-8(fp)
   43764:	e0fff517 	ldw	r3,-44(fp)
   43768:	1885883a 	add	r2,r3,r2
   4376c:	e0bff515 	stw	r2,-44(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
   43770:	e0fff90f 	ldh	r3,-28(fp)
   43774:	e0bffd0f 	ldh	r2,-12(fp)
   43778:	1885c83a 	sub	r2,r3,r2
   4377c:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
   43780:	e0bff217 	ldw	r2,-56(fp)
   43784:	18bfd90e 	bge	r3,r2,436ec <__alt_data_end+0xfffcdb8c>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset + crop_left ), 
           ((source_width - crop_left - crop_right) << 1));
  }
}
   43788:	e037883a 	mov	sp,fp
   4378c:	dfc00117 	ldw	ra,4(sp)
   43790:	df000017 	ldw	fp,0(sp)
   43794:	dec00204 	addi	sp,sp,8
   43798:	f800283a 	ret

0004379c <vid_print_string_alpha>:
*           24 bit - R(8):G(8):B(8)  (packed)
*           32 bit - 0 : R(8):G(8):B(8) (unpacked)
******************************************************************/

int vid_print_string_alpha(int horiz_offset, int vert_offset, int color, int background_color, struct abc_font_struct font[], alt_video_display * display, char string[])
{
   4379c:	defff404 	addi	sp,sp,-48
   437a0:	dfc00b15 	stw	ra,44(sp)
   437a4:	df000a15 	stw	fp,40(sp)
   437a8:	df000a04 	addi	fp,sp,40
   437ac:	e13ffc15 	stw	r4,-16(fp)
   437b0:	e17ffd15 	stw	r5,-12(fp)
   437b4:	e1bffe15 	stw	r6,-8(fp)
   437b8:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
   437bc:	e03ff915 	stw	zero,-28(fp)
  int tab;
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
   437c0:	e0bffc17 	ldw	r2,-16(fp)
   437c4:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
   437c8:	00007d06 	br	439c0 <vid_print_string_alpha+0x224>
    //Handle newline char here.
    if (string[i] == '\n') {
   437cc:	e0bff917 	ldw	r2,-28(fp)
   437d0:	e0c00417 	ldw	r3,16(fp)
   437d4:	1885883a 	add	r2,r3,r2
   437d8:	10800003 	ldbu	r2,0(r2)
   437dc:	10803fcc 	andi	r2,r2,255
   437e0:	1080201c 	xori	r2,r2,128
   437e4:	10bfe004 	addi	r2,r2,-128
   437e8:	10800298 	cmpnei	r2,r2,10
   437ec:	10000c1e 	bne	r2,zero,43820 <vid_print_string_alpha+0x84>
      horiz_offset = original_horiz_offset;
   437f0:	e0bffb17 	ldw	r2,-20(fp)
   437f4:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += font['|' - 33].bounds_height;  // we'll use "|" to add the line to line spacing
   437f8:	e0800217 	ldw	r2,8(fp)
   437fc:	1082d804 	addi	r2,r2,2912
   43800:	10c00517 	ldw	r3,20(r2)
   43804:	e0bffd17 	ldw	r2,-12(fp)
   43808:	1885883a 	add	r2,r3,r2
   4380c:	e0bffd15 	stw	r2,-12(fp)
      i++;
   43810:	e0bff917 	ldw	r2,-28(fp)
   43814:	10800044 	addi	r2,r2,1
   43818:	e0bff915 	stw	r2,-28(fp)
      continue;
   4381c:	00006806 	br	439c0 <vid_print_string_alpha+0x224>
    }
    // Lay down that character and increment our offsets.
    if(string[i] == 32)  // this is a space in ASCII
   43820:	e0bff917 	ldw	r2,-28(fp)
   43824:	e0c00417 	ldw	r3,16(fp)
   43828:	1885883a 	add	r2,r3,r2
   4382c:	10800003 	ldbu	r2,0(r2)
   43830:	10803fcc 	andi	r2,r2,255
   43834:	1080201c 	xori	r2,r2,128
   43838:	10bfe004 	addi	r2,r2,-128
   4383c:	10800818 	cmpnei	r2,r2,32
   43840:	1000151e 	bne	r2,zero,43898 <vid_print_string_alpha+0xfc>
    {
      if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
   43844:	e0bfff17 	ldw	r2,-4(fp)
   43848:	10bfffe0 	cmpeqi	r2,r2,-1
   4384c:	10000b1e 	bne	r2,zero,4387c <vid_print_string_alpha+0xe0>
      {
        vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
   43850:	e0bfff17 	ldw	r2,-4(fp)
   43854:	d8800015 	stw	r2,0(sp)
   43858:	e0800217 	ldw	r2,8(fp)
   4385c:	d8800115 	stw	r2,4(sp)
   43860:	e0800317 	ldw	r2,12(fp)
   43864:	d8800215 	stw	r2,8(sp)
   43868:	e13ffc17 	ldw	r4,-16(fp)
   4386c:	e17ffd17 	ldw	r5,-12(fp)
   43870:	e1bfff17 	ldw	r6,-4(fp)
   43874:	01c00b44 	movi	r7,45
   43878:	0043f040 	call	43f04 <vid_print_char_alpha>
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
   4387c:	e0800217 	ldw	r2,8(fp)
   43880:	10806004 	addi	r2,r2,384
   43884:	10c00417 	ldw	r3,16(r2)
   43888:	e0bffc17 	ldw	r2,-16(fp)
   4388c:	1885883a 	add	r2,r3,r2
   43890:	e0bffc15 	stw	r2,-16(fp)
   43894:	00004706 	br	439b4 <vid_print_string_alpha+0x218>
    }
    else if(string[i] == '\t')  // this is a tab
   43898:	e0bff917 	ldw	r2,-28(fp)
   4389c:	e0c00417 	ldw	r3,16(fp)
   438a0:	1885883a 	add	r2,r3,r2
   438a4:	10800003 	ldbu	r2,0(r2)
   438a8:	10803fcc 	andi	r2,r2,255
   438ac:	1080201c 	xori	r2,r2,128
   438b0:	10bfe004 	addi	r2,r2,-128
   438b4:	10800258 	cmpnei	r2,r2,9
   438b8:	10001d1e 	bne	r2,zero,43930 <vid_print_string_alpha+0x194>
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
   438bc:	e03ffa15 	stw	zero,-24(fp)
   438c0:	00001706 	br	43920 <vid_print_string_alpha+0x184>
      {
        if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
   438c4:	e0bfff17 	ldw	r2,-4(fp)
   438c8:	10bfffe0 	cmpeqi	r2,r2,-1
   438cc:	10000b1e 	bne	r2,zero,438fc <vid_print_string_alpha+0x160>
        {
          vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
   438d0:	e0bfff17 	ldw	r2,-4(fp)
   438d4:	d8800015 	stw	r2,0(sp)
   438d8:	e0800217 	ldw	r2,8(fp)
   438dc:	d8800115 	stw	r2,4(sp)
   438e0:	e0800317 	ldw	r2,12(fp)
   438e4:	d8800215 	stw	r2,8(sp)
   438e8:	e13ffc17 	ldw	r4,-16(fp)
   438ec:	e17ffd17 	ldw	r5,-12(fp)
   438f0:	e1bfff17 	ldw	r6,-4(fp)
   438f4:	01c00b44 	movi	r7,45
   438f8:	0043f040 	call	43f04 <vid_print_char_alpha>
        }
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
   438fc:	e0800217 	ldw	r2,8(fp)
   43900:	10806004 	addi	r2,r2,384
   43904:	10c00417 	ldw	r3,16(r2)
   43908:	e0bffc17 	ldw	r2,-16(fp)
   4390c:	1885883a 	add	r2,r3,r2
   43910:	e0bffc15 	stw	r2,-16(fp)
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    }
    else if(string[i] == '\t')  // this is a tab
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
   43914:	e0bffa17 	ldw	r2,-24(fp)
   43918:	10800044 	addi	r2,r2,1
   4391c:	e0bffa15 	stw	r2,-24(fp)
   43920:	e0bffa17 	ldw	r2,-24(fp)
   43924:	10800090 	cmplti	r2,r2,2
   43928:	103fe61e 	bne	r2,zero,438c4 <__alt_data_end+0xfffcdd64>
   4392c:	00002106 	br	439b4 <vid_print_string_alpha+0x218>
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
      }
    }
    else
    {
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
   43930:	e0bff917 	ldw	r2,-28(fp)
   43934:	e0c00417 	ldw	r3,16(fp)
   43938:	1885883a 	add	r2,r3,r2
   4393c:	10800003 	ldbu	r2,0(r2)
   43940:	10803fcc 	andi	r2,r2,255
   43944:	1080201c 	xori	r2,r2,128
   43948:	10bfe004 	addi	r2,r2,-128
   4394c:	e0ffff17 	ldw	r3,-4(fp)
   43950:	d8c00015 	stw	r3,0(sp)
   43954:	e0c00217 	ldw	r3,8(fp)
   43958:	d8c00115 	stw	r3,4(sp)
   4395c:	e0c00317 	ldw	r3,12(fp)
   43960:	d8c00215 	stw	r3,8(sp)
   43964:	e13ffc17 	ldw	r4,-16(fp)
   43968:	e17ffd17 	ldw	r5,-12(fp)
   4396c:	e1bffe17 	ldw	r6,-8(fp)
   43970:	100f883a 	mov	r7,r2
   43974:	0043f040 	call	43f04 <vid_print_char_alpha>
      horiz_offset += font[string[i] - 33].bounds_width;
   43978:	e0bff917 	ldw	r2,-28(fp)
   4397c:	e0c00417 	ldw	r3,16(fp)
   43980:	1885883a 	add	r2,r3,r2
   43984:	10800003 	ldbu	r2,0(r2)
   43988:	10803fcc 	andi	r2,r2,255
   4398c:	1080201c 	xori	r2,r2,128
   43990:	10bfe004 	addi	r2,r2,-128
   43994:	1004917a 	slli	r2,r2,5
   43998:	10bef804 	addi	r2,r2,-1056
   4399c:	e0c00217 	ldw	r3,8(fp)
   439a0:	1885883a 	add	r2,r3,r2
   439a4:	10c00417 	ldw	r3,16(r2)
   439a8:	e0bffc17 	ldw	r2,-16(fp)
   439ac:	1885883a 	add	r2,r3,r2
   439b0:	e0bffc15 	stw	r2,-16(fp)
    }
    i++;
   439b4:	e0bff917 	ldw	r2,-28(fp)
   439b8:	10800044 	addi	r2,r2,1
   439bc:	e0bff915 	stw	r2,-28(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
   439c0:	e0bff917 	ldw	r2,-28(fp)
   439c4:	e0c00417 	ldw	r3,16(fp)
   439c8:	1885883a 	add	r2,r3,r2
   439cc:	10800003 	ldbu	r2,0(r2)
   439d0:	10803fcc 	andi	r2,r2,255
   439d4:	1080201c 	xori	r2,r2,128
   439d8:	10bfe004 	addi	r2,r2,-128
   439dc:	103f7b1e 	bne	r2,zero,437cc <__alt_data_end+0xfffcdc6c>
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
      horiz_offset += font[string[i] - 33].bounds_width;
    }
    i++;
  }
  return (0);
   439e0:	0005883a 	mov	r2,zero
}
   439e4:	e037883a 	mov	sp,fp
   439e8:	dfc00117 	ldw	ra,4(sp)
   439ec:	df000017 	ldw	fp,0(sp)
   439f0:	dec00204 	addi	sp,sp,8
   439f4:	f800283a 	ret

000439f8 <seperate_color_channels>:
*           the function working on pointers.
*
******************************************************************/

__inline__ int seperate_color_channels(int color_depth, unsigned char * color, unsigned char * red, unsigned char * green, unsigned char * blue)
{
   439f8:	defff904 	addi	sp,sp,-28
   439fc:	df000615 	stw	fp,24(sp)
   43a00:	df000604 	addi	fp,sp,24
   43a04:	e13ffc15 	stw	r4,-16(fp)
   43a08:	e17ffd15 	stw	r5,-12(fp)
   43a0c:	e1bffe15 	stw	r6,-8(fp)
   43a10:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color = 0;
   43a14:	e03ffb0d 	sth	zero,-20(fp)
  
  if (color_depth == 16)  // R(5):G(6):B(5)
   43a18:	e0bffc17 	ldw	r2,-16(fp)
   43a1c:	10800418 	cmpnei	r2,r2,16
   43a20:	1000221e 	bne	r2,zero,43aac <seperate_color_channels+0xb4>
  {
    temp_color = *color++;        // get the first half of the 16 bit color
   43a24:	e0bffd17 	ldw	r2,-12(fp)
   43a28:	10c00044 	addi	r3,r2,1
   43a2c:	e0fffd15 	stw	r3,-12(fp)
   43a30:	10800003 	ldbu	r2,0(r2)
   43a34:	10803fcc 	andi	r2,r2,255
   43a38:	e0bffb0d 	sth	r2,-20(fp)
    temp_color += (*color << 8);  // get the second half of the 16 bit color
   43a3c:	e0bffd17 	ldw	r2,-12(fp)
   43a40:	10800003 	ldbu	r2,0(r2)
   43a44:	10803fcc 	andi	r2,r2,255
   43a48:	1004923a 	slli	r2,r2,8
   43a4c:	1007883a 	mov	r3,r2
   43a50:	e0bffb0b 	ldhu	r2,-20(fp)
   43a54:	1885883a 	add	r2,r3,r2
   43a58:	e0bffb0d 	sth	r2,-20(fp)
    *blue = temp_color & 0x1F; 
   43a5c:	e0bffb0b 	ldhu	r2,-20(fp)
   43a60:	108007cc 	andi	r2,r2,31
   43a64:	1007883a 	mov	r3,r2
   43a68:	e0800117 	ldw	r2,4(fp)
   43a6c:	10c00005 	stb	r3,0(r2)
    *green = (temp_color >> 5) & 0x3F;
   43a70:	e0bffb0b 	ldhu	r2,-20(fp)
   43a74:	1004d17a 	srli	r2,r2,5
   43a78:	10800fcc 	andi	r2,r2,63
   43a7c:	1007883a 	mov	r3,r2
   43a80:	e0bfff17 	ldw	r2,-4(fp)
   43a84:	10c00005 	stb	r3,0(r2)
    *red = (temp_color >> 11) & 0x1F;
   43a88:	e0bffb0b 	ldhu	r2,-20(fp)
   43a8c:	1004d2fa 	srli	r2,r2,11
   43a90:	108007cc 	andi	r2,r2,31
   43a94:	1007883a 	mov	r3,r2
   43a98:	e0bffe17 	ldw	r2,-8(fp)
   43a9c:	10c00005 	stb	r3,0(r2)
    return_value = 1;
   43aa0:	00800044 	movi	r2,1
   43aa4:	e0bffa15 	stw	r2,-24(fp)
   43aa8:	00002006 	br	43b2c <seperate_color_channels+0x134>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
   43aac:	e0bffc17 	ldw	r2,-16(fp)
   43ab0:	10800620 	cmpeqi	r2,r2,24
   43ab4:	1000031e 	bne	r2,zero,43ac4 <seperate_color_channels+0xcc>
   43ab8:	e0bffc17 	ldw	r2,-16(fp)
   43abc:	10800818 	cmpnei	r2,r2,32
   43ac0:	1000131e 	bne	r2,zero,43b10 <seperate_color_channels+0x118>
  {
    *blue = *color++;
   43ac4:	e0bffd17 	ldw	r2,-12(fp)
   43ac8:	10c00044 	addi	r3,r2,1
   43acc:	e0fffd15 	stw	r3,-12(fp)
   43ad0:	10c00003 	ldbu	r3,0(r2)
   43ad4:	e0800117 	ldw	r2,4(fp)
   43ad8:	10c00005 	stb	r3,0(r2)
    *green = *color++;
   43adc:	e0bffd17 	ldw	r2,-12(fp)
   43ae0:	10c00044 	addi	r3,r2,1
   43ae4:	e0fffd15 	stw	r3,-12(fp)
   43ae8:	10c00003 	ldbu	r3,0(r2)
   43aec:	e0bfff17 	ldw	r2,-4(fp)
   43af0:	10c00005 	stb	r3,0(r2)
    *red = *color;   
   43af4:	e0bffd17 	ldw	r2,-12(fp)
   43af8:	10c00003 	ldbu	r3,0(r2)
   43afc:	e0bffe17 	ldw	r2,-8(fp)
   43b00:	10c00005 	stb	r3,0(r2)
    return_value = 1;
   43b04:	00800044 	movi	r2,1
   43b08:	e0bffa15 	stw	r2,-24(fp)
   43b0c:	00000706 	br	43b2c <seperate_color_channels+0x134>
  }
  else  // not a valid color depth for this function
  {
    *red = 0;
   43b10:	e0bffe17 	ldw	r2,-8(fp)
   43b14:	10000005 	stb	zero,0(r2)
    *green = 0;
   43b18:	e0bfff17 	ldw	r2,-4(fp)
   43b1c:	10000005 	stb	zero,0(r2)
    *blue = 0;    
   43b20:	e0800117 	ldw	r2,4(fp)
   43b24:	10000005 	stb	zero,0(r2)
    return_value = 0;    
   43b28:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;
   43b2c:	e0bffa17 	ldw	r2,-24(fp)
}
   43b30:	e037883a 	mov	sp,fp
   43b34:	df000017 	ldw	fp,0(sp)
   43b38:	dec00104 	addi	sp,sp,4
   43b3c:	f800283a 	ret

00043b40 <merge_color_channels>:
*           different color formats and packing.
*
******************************************************************/

__inline__ int merge_color_channels(int color_depth, unsigned char red, unsigned char green, unsigned char blue, unsigned char * color)
{
   43b40:	defff904 	addi	sp,sp,-28
   43b44:	df000615 	stw	fp,24(sp)
   43b48:	df000604 	addi	fp,sp,24
   43b4c:	e13ffc15 	stw	r4,-16(fp)
   43b50:	2809883a 	mov	r4,r5
   43b54:	3007883a 	mov	r3,r6
   43b58:	3805883a 	mov	r2,r7
   43b5c:	e13ffd05 	stb	r4,-12(fp)
   43b60:	e0fffe05 	stb	r3,-8(fp)
   43b64:	e0bfff05 	stb	r2,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color;
    
  if (color_depth == 16)  // R(5):G(6):B(5)
   43b68:	e0bffc17 	ldw	r2,-16(fp)
   43b6c:	10800418 	cmpnei	r2,r2,16
   43b70:	1000191e 	bne	r2,zero,43bd8 <merge_color_channels+0x98>
  {
    temp_color = (blue & 0x1F) | ((green & 0x3F) << 5) | ((red & 0x1F) << 11);  // 16 bit color format
   43b74:	e0bfff03 	ldbu	r2,-4(fp)
   43b78:	108007cc 	andi	r2,r2,31
   43b7c:	1007883a 	mov	r3,r2
   43b80:	e0bffe03 	ldbu	r2,-8(fp)
   43b84:	10800fcc 	andi	r2,r2,63
   43b88:	1004917a 	slli	r2,r2,5
   43b8c:	1884b03a 	or	r2,r3,r2
   43b90:	1007883a 	mov	r3,r2
   43b94:	e0bffd03 	ldbu	r2,-12(fp)
   43b98:	100492fa 	slli	r2,r2,11
   43b9c:	1884b03a 	or	r2,r3,r2
   43ba0:	e0bffb0d 	sth	r2,-20(fp)
    *color++ = temp_color & 0xFF;
   43ba4:	e0800117 	ldw	r2,4(fp)
   43ba8:	10c00044 	addi	r3,r2,1
   43bac:	e0c00115 	stw	r3,4(fp)
   43bb0:	e0fffb0b 	ldhu	r3,-20(fp)
   43bb4:	10c00005 	stb	r3,0(r2)
    *color = (temp_color >> 8) & 0xFF;
   43bb8:	e0bffb0b 	ldhu	r2,-20(fp)
   43bbc:	1004d23a 	srli	r2,r2,8
   43bc0:	1007883a 	mov	r3,r2
   43bc4:	e0800117 	ldw	r2,4(fp)
   43bc8:	10c00005 	stb	r3,0(r2)
    return_value = 1;
   43bcc:	00800044 	movi	r2,1
   43bd0:	e0bffa15 	stw	r2,-24(fp)
   43bd4:	00002106 	br	43c5c <merge_color_channels+0x11c>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
   43bd8:	e0bffc17 	ldw	r2,-16(fp)
   43bdc:	10800620 	cmpeqi	r2,r2,24
   43be0:	1000031e 	bne	r2,zero,43bf0 <merge_color_channels+0xb0>
   43be4:	e0bffc17 	ldw	r2,-16(fp)
   43be8:	10800818 	cmpnei	r2,r2,32
   43bec:	1000101e 	bne	r2,zero,43c30 <merge_color_channels+0xf0>
  {
    *color++ = blue;
   43bf0:	e0800117 	ldw	r2,4(fp)
   43bf4:	10c00044 	addi	r3,r2,1
   43bf8:	e0c00115 	stw	r3,4(fp)
   43bfc:	e0ffff03 	ldbu	r3,-4(fp)
   43c00:	10c00005 	stb	r3,0(r2)
    *color++ = green;
   43c04:	e0800117 	ldw	r2,4(fp)
   43c08:	10c00044 	addi	r3,r2,1
   43c0c:	e0c00115 	stw	r3,4(fp)
   43c10:	e0fffe03 	ldbu	r3,-8(fp)
   43c14:	10c00005 	stb	r3,0(r2)
    *color = red;
   43c18:	e0800117 	ldw	r2,4(fp)
   43c1c:	e0fffd03 	ldbu	r3,-12(fp)
   43c20:	10c00005 	stb	r3,0(r2)
    return_value = 1;
   43c24:	00800044 	movi	r2,1
   43c28:	e0bffa15 	stw	r2,-24(fp)
   43c2c:	00000b06 	br	43c5c <merge_color_channels+0x11c>
  }
  else  // not a valid color depth for this function
  {
    *color++ = 0;
   43c30:	e0800117 	ldw	r2,4(fp)
   43c34:	10c00044 	addi	r3,r2,1
   43c38:	e0c00115 	stw	r3,4(fp)
   43c3c:	10000005 	stb	zero,0(r2)
    *color++ = 0;
   43c40:	e0800117 	ldw	r2,4(fp)
   43c44:	10c00044 	addi	r3,r2,1
   43c48:	e0c00115 	stw	r3,4(fp)
   43c4c:	10000005 	stb	zero,0(r2)
    *color = 0;
   43c50:	e0800117 	ldw	r2,4(fp)
   43c54:	10000005 	stb	zero,0(r2)
    return_value = 0;    
   43c58:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;  
   43c5c:	e0bffa17 	ldw	r2,-24(fp)
}
   43c60:	e037883a 	mov	sp,fp
   43c64:	df000017 	ldw	fp,0(sp)
   43c68:	dec00104 	addi	sp,sp,4
   43c6c:	f800283a 	ret

00043c70 <read_from_frame>:
*           needed to calculate the new one.
*
******************************************************************/

__inline__ int read_from_frame (int horiz, int vert, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
   43c70:	defffa04 	addi	sp,sp,-24
   43c74:	dfc00515 	stw	ra,20(sp)
   43c78:	df000415 	stw	fp,16(sp)
   43c7c:	df000404 	addi	fp,sp,16
   43c80:	e13ffc15 	stw	r4,-16(fp)
   43c84:	e17ffd15 	stw	r5,-12(fp)
   43c88:	e1bffe15 	stw	r6,-8(fp)
   43c8c:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	printf("read_from_frame is not implemented!\r\n");
   43c90:	010001b4 	movhi	r4,6
   43c94:	211d4404 	addi	r4,r4,29968
   43c98:	004a4bc0 	call	4a4bc <puts>
    return_value = 0; 
  }

  return return_value;
#endif
}
   43c9c:	e037883a 	mov	sp,fp
   43ca0:	dfc00117 	ldw	ra,4(sp)
   43ca4:	df000017 	ldw	fp,0(sp)
   43ca8:	dec00204 	addi	sp,sp,8
   43cac:	f800283a 	ret

00043cb0 <alpha_blending>:
*           the font color with the background color.
*
******************************************************************/

__inline__ int alpha_blending (int horiz_offset, int vert_offset, int background_color, unsigned char alpha, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
   43cb0:	defff304 	addi	sp,sp,-52
   43cb4:	dfc00c15 	stw	ra,48(sp)
   43cb8:	df000b15 	stw	fp,44(sp)
   43cbc:	df000b04 	addi	fp,sp,44
   43cc0:	e13ffc15 	stw	r4,-16(fp)
   43cc4:	e17ffd15 	stw	r5,-12(fp)
   43cc8:	e1bffe15 	stw	r6,-8(fp)
   43ccc:	3805883a 	mov	r2,r7
   43cd0:	e0bfff05 	stb	r2,-4(fp)
  int return_value;
  unsigned char background_red, background_green, background_blue;
  unsigned int blended_red, blended_green, blended_blue;  // short since there may be overflow to be clipped
  
  // set red, green, and blue of the background color
  if(background_color == CLEAR_BACKGROUND)
   43cd4:	e0bffe17 	ldw	r2,-8(fp)
   43cd8:	10bfffd8 	cmpnei	r2,r2,-1
   43cdc:	10000c1e 	bne	r2,zero,43d10 <alpha_blending+0x60>
  {
    read_from_frame (horiz_offset, vert_offset, &background_red, &background_green, &background_blue, display);
   43ce0:	e0fffb04 	addi	r3,fp,-20
   43ce4:	e0bffb44 	addi	r2,fp,-19
   43ce8:	e13ffb84 	addi	r4,fp,-18
   43cec:	d9000015 	stw	r4,0(sp)
   43cf0:	e1000517 	ldw	r4,20(fp)
   43cf4:	d9000115 	stw	r4,4(sp)
   43cf8:	e13ffc17 	ldw	r4,-16(fp)
   43cfc:	e17ffd17 	ldw	r5,-12(fp)
   43d00:	180d883a 	mov	r6,r3
   43d04:	100f883a 	mov	r7,r2
   43d08:	0043c700 	call	43c70 <read_from_frame>
   43d0c:	00000a06 	br	43d38 <alpha_blending+0x88>
  }
  else
  {
    seperate_color_channels(display->color_depth, (unsigned char *)&background_color, &background_red, &background_green, &background_blue);
   43d10:	e0800517 	ldw	r2,20(fp)
   43d14:	11000017 	ldw	r4,0(r2)
   43d18:	e17ffe04 	addi	r5,fp,-8
   43d1c:	e0fffb04 	addi	r3,fp,-20
   43d20:	e0bffb44 	addi	r2,fp,-19
   43d24:	e1bffb84 	addi	r6,fp,-18
   43d28:	d9800015 	stw	r6,0(sp)
   43d2c:	180d883a 	mov	r6,r3
   43d30:	100f883a 	mov	r7,r2
   43d34:	00439f80 	call	439f8 <seperate_color_channels>
  }

  // these blended colors may need to be clipped to the maximum amounts the color depth supports
  blended_red = (((*red) * alpha) + (background_red * (255 - alpha)))/255;
   43d38:	e0800217 	ldw	r2,8(fp)
   43d3c:	10800003 	ldbu	r2,0(r2)
   43d40:	10c03fcc 	andi	r3,r2,255
   43d44:	e0bfff03 	ldbu	r2,-4(fp)
   43d48:	1887383a 	mul	r3,r3,r2
   43d4c:	e0bffb03 	ldbu	r2,-20(fp)
   43d50:	11003fcc 	andi	r4,r2,255
   43d54:	e0bfff03 	ldbu	r2,-4(fp)
   43d58:	01403fc4 	movi	r5,255
   43d5c:	2885c83a 	sub	r2,r5,r2
   43d60:	2085383a 	mul	r2,r4,r2
   43d64:	1885883a 	add	r2,r3,r2
   43d68:	1009883a 	mov	r4,r2
   43d6c:	01403fc4 	movi	r5,255
   43d70:	00478640 	call	47864 <__divsi3>
   43d74:	e0bff815 	stw	r2,-32(fp)
  blended_green = (((*green) * alpha) + (background_green * (255 - alpha)))/255;
   43d78:	e0800317 	ldw	r2,12(fp)
   43d7c:	10800003 	ldbu	r2,0(r2)
   43d80:	10c03fcc 	andi	r3,r2,255
   43d84:	e0bfff03 	ldbu	r2,-4(fp)
   43d88:	1887383a 	mul	r3,r3,r2
   43d8c:	e0bffb43 	ldbu	r2,-19(fp)
   43d90:	11003fcc 	andi	r4,r2,255
   43d94:	e0bfff03 	ldbu	r2,-4(fp)
   43d98:	01403fc4 	movi	r5,255
   43d9c:	2885c83a 	sub	r2,r5,r2
   43da0:	2085383a 	mul	r2,r4,r2
   43da4:	1885883a 	add	r2,r3,r2
   43da8:	1009883a 	mov	r4,r2
   43dac:	01403fc4 	movi	r5,255
   43db0:	00478640 	call	47864 <__divsi3>
   43db4:	e0bff915 	stw	r2,-28(fp)
  blended_blue = (((*blue) * alpha) + (background_blue * (255 - alpha)))/255;
   43db8:	e0800417 	ldw	r2,16(fp)
   43dbc:	10800003 	ldbu	r2,0(r2)
   43dc0:	10c03fcc 	andi	r3,r2,255
   43dc4:	e0bfff03 	ldbu	r2,-4(fp)
   43dc8:	1887383a 	mul	r3,r3,r2
   43dcc:	e0bffb83 	ldbu	r2,-18(fp)
   43dd0:	11003fcc 	andi	r4,r2,255
   43dd4:	e0bfff03 	ldbu	r2,-4(fp)
   43dd8:	01403fc4 	movi	r5,255
   43ddc:	2885c83a 	sub	r2,r5,r2
   43de0:	2085383a 	mul	r2,r4,r2
   43de4:	1885883a 	add	r2,r3,r2
   43de8:	1009883a 	mov	r4,r2
   43dec:	01403fc4 	movi	r5,255
   43df0:	00478640 	call	47864 <__divsi3>
   43df4:	e0bffa15 	stw	r2,-24(fp)
  

  if(display->color_depth == 16)
   43df8:	e0800517 	ldw	r2,20(fp)
   43dfc:	10800017 	ldw	r2,0(r2)
   43e00:	10800418 	cmpnei	r2,r2,16
   43e04:	1000181e 	bne	r2,zero,43e68 <alpha_blending+0x1b8>
  {
    *red = (blended_red > 0x1F)? 0x1F: blended_red;
   43e08:	e0bff817 	ldw	r2,-32(fp)
   43e0c:	10c00830 	cmpltui	r3,r2,32
   43e10:	1800011e 	bne	r3,zero,43e18 <alpha_blending+0x168>
   43e14:	008007c4 	movi	r2,31
   43e18:	1007883a 	mov	r3,r2
   43e1c:	e0800217 	ldw	r2,8(fp)
   43e20:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0x3F)? 0x3F: blended_green;
   43e24:	e0bff917 	ldw	r2,-28(fp)
   43e28:	10c01030 	cmpltui	r3,r2,64
   43e2c:	1800011e 	bne	r3,zero,43e34 <alpha_blending+0x184>
   43e30:	00800fc4 	movi	r2,63
   43e34:	1007883a 	mov	r3,r2
   43e38:	e0800317 	ldw	r2,12(fp)
   43e3c:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0x1F)? 0x1F: blended_blue; 
   43e40:	e0bffa17 	ldw	r2,-24(fp)
   43e44:	10c00830 	cmpltui	r3,r2,32
   43e48:	1800011e 	bne	r3,zero,43e50 <alpha_blending+0x1a0>
   43e4c:	008007c4 	movi	r2,31
   43e50:	1007883a 	mov	r3,r2
   43e54:	e0800417 	ldw	r2,16(fp)
   43e58:	10c00005 	stb	r3,0(r2)
    return_value = 1;        
   43e5c:	00800044 	movi	r2,1
   43e60:	e0bff715 	stw	r2,-36(fp)
   43e64:	00002106 	br	43eec <alpha_blending+0x23c>
  }
  else if((display->color_depth == 24) || (display->color_depth == 32))
   43e68:	e0800517 	ldw	r2,20(fp)
   43e6c:	10800017 	ldw	r2,0(r2)
   43e70:	10800620 	cmpeqi	r2,r2,24
   43e74:	1000041e 	bne	r2,zero,43e88 <alpha_blending+0x1d8>
   43e78:	e0800517 	ldw	r2,20(fp)
   43e7c:	10800017 	ldw	r2,0(r2)
   43e80:	10800818 	cmpnei	r2,r2,32
   43e84:	1000181e 	bne	r2,zero,43ee8 <alpha_blending+0x238>
  {
    *red = (blended_red > 0xFF)? 0xFF: blended_red;
   43e88:	e0bff817 	ldw	r2,-32(fp)
   43e8c:	10c04030 	cmpltui	r3,r2,256
   43e90:	1800011e 	bne	r3,zero,43e98 <alpha_blending+0x1e8>
   43e94:	00803fc4 	movi	r2,255
   43e98:	1007883a 	mov	r3,r2
   43e9c:	e0800217 	ldw	r2,8(fp)
   43ea0:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0xFF)? 0xFF: blended_green;
   43ea4:	e0bff917 	ldw	r2,-28(fp)
   43ea8:	10c04030 	cmpltui	r3,r2,256
   43eac:	1800011e 	bne	r3,zero,43eb4 <alpha_blending+0x204>
   43eb0:	00803fc4 	movi	r2,255
   43eb4:	1007883a 	mov	r3,r2
   43eb8:	e0800317 	ldw	r2,12(fp)
   43ebc:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0xFF)? 0xFF: blended_blue; 
   43ec0:	e0bffa17 	ldw	r2,-24(fp)
   43ec4:	10c04030 	cmpltui	r3,r2,256
   43ec8:	1800011e 	bne	r3,zero,43ed0 <alpha_blending+0x220>
   43ecc:	00803fc4 	movi	r2,255
   43ed0:	1007883a 	mov	r3,r2
   43ed4:	e0800417 	ldw	r2,16(fp)
   43ed8:	10c00005 	stb	r3,0(r2)
    return_value = 1;            
   43edc:	00800044 	movi	r2,1
   43ee0:	e0bff715 	stw	r2,-36(fp)
   43ee4:	00000106 	br	43eec <alpha_blending+0x23c>
  }
  else
  {
    return_value = 0;     
   43ee8:	e03ff715 	stw	zero,-36(fp)
  }  
 
  return return_value;
   43eec:	e0bff717 	ldw	r2,-36(fp)
} 
   43ef0:	e037883a 	mov	sp,fp
   43ef4:	dfc00117 	ldw	ra,4(sp)
   43ef8:	df000017 	ldw	fp,0(sp)
   43efc:	dec00204 	addi	sp,sp,8
   43f00:	f800283a 	ret

00043f04 <vid_print_char_alpha>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char_alpha (int horiz_offset, int vert_offset, int color, char character, int background_color, struct abc_font_struct font[], alt_video_display * display)
{
   43f04:	defff004 	addi	sp,sp,-64
   43f08:	dfc00f15 	stw	ra,60(sp)
   43f0c:	df000e15 	stw	fp,56(sp)
   43f10:	df000e04 	addi	fp,sp,56
   43f14:	e13ffc15 	stw	r4,-16(fp)
   43f18:	e17ffd15 	stw	r5,-12(fp)
   43f1c:	e1bffe15 	stw	r6,-8(fp)
   43f20:	3805883a 	mov	r2,r7
   43f24:	e0bfff05 	stb	r2,-4(fp)
  unsigned char original_red, original_blue, original_green;
  unsigned char red, green, blue;
  int new_color;

  // Assign the pointer of the font bitmap
  alpha = font[character-33].char_alpha_map;
   43f28:	e0bfff07 	ldb	r2,-4(fp)
   43f2c:	1004917a 	slli	r2,r2,5
   43f30:	10bef804 	addi	r2,r2,-1056
   43f34:	e0c00317 	ldw	r3,12(fp)
   43f38:	1885883a 	add	r2,r3,r2
   43f3c:	10800617 	ldw	r2,24(r2)
   43f40:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);
   43f44:	e0800417 	ldw	r2,16(fp)
   43f48:	11000017 	ldw	r4,0(r2)
   43f4c:	e17ffe04 	addi	r5,fp,-8
   43f50:	e0fff904 	addi	r3,fp,-28
   43f54:	e0bff984 	addi	r2,fp,-26
   43f58:	e1bff944 	addi	r6,fp,-27
   43f5c:	d9800015 	stw	r6,0(sp)
   43f60:	180d883a 	mov	r6,r3
   43f64:	100f883a 	mov	r7,r2
   43f68:	00439f80 	call	439f8 <seperate_color_channels>

  for(i = 0; i < font[character-33].bounds_height; i++) {
   43f6c:	e03ff615 	stw	zero,-40(fp)
   43f70:	00004606 	br	4408c <vid_print_char_alpha+0x188>
    for (j = 0; j < font[character-33].bounds_width; j++) {
   43f74:	e03ff715 	stw	zero,-36(fp)
   43f78:	00003906 	br	44060 <vid_print_char_alpha+0x15c>
      red = original_red;
   43f7c:	e0bff903 	ldbu	r2,-28(fp)
   43f80:	e0bff9c5 	stb	r2,-25(fp)
      green = original_green;
   43f84:	e0bff983 	ldbu	r2,-26(fp)
   43f88:	e0bffa05 	stb	r2,-24(fp)
      blue = original_blue;
   43f8c:	e0bff943 	ldbu	r2,-27(fp)
   43f90:	e0bffa45 	stb	r2,-23(fp)

      // send in the font alpha channel and the colour channels for the blending to occur
      alpha_blending ((horiz_offset + j), (vert_offset + i), background_color, *alpha, &red, &green, &blue, display);
   43f94:	e0fffc17 	ldw	r3,-16(fp)
   43f98:	e0bff717 	ldw	r2,-36(fp)
   43f9c:	1889883a 	add	r4,r3,r2
   43fa0:	e0fffd17 	ldw	r3,-12(fp)
   43fa4:	e0bff617 	ldw	r2,-40(fp)
   43fa8:	1887883a 	add	r3,r3,r2
   43fac:	e0bff817 	ldw	r2,-32(fp)
   43fb0:	10800003 	ldbu	r2,0(r2)
   43fb4:	10803fcc 	andi	r2,r2,255
   43fb8:	e17ff9c4 	addi	r5,fp,-25
   43fbc:	d9400015 	stw	r5,0(sp)
   43fc0:	e17ffa04 	addi	r5,fp,-24
   43fc4:	d9400115 	stw	r5,4(sp)
   43fc8:	e17ffa44 	addi	r5,fp,-23
   43fcc:	d9400215 	stw	r5,8(sp)
   43fd0:	e1400417 	ldw	r5,16(fp)
   43fd4:	d9400315 	stw	r5,12(sp)
   43fd8:	180b883a 	mov	r5,r3
   43fdc:	e1800217 	ldw	r6,8(fp)
   43fe0:	100f883a 	mov	r7,r2
   43fe4:	0043cb00 	call	43cb0 <alpha_blending>

      // take the blended pixel and merge the color channels back into a single pixel value 
      merge_color_channels(display->color_depth, red, green, blue, (char *)&new_color);
   43fe8:	e0800417 	ldw	r2,16(fp)
   43fec:	11000017 	ldw	r4,0(r2)
   43ff0:	e0bff9c3 	ldbu	r2,-25(fp)
   43ff4:	11403fcc 	andi	r5,r2,255
   43ff8:	e0bffa03 	ldbu	r2,-24(fp)
   43ffc:	10c03fcc 	andi	r3,r2,255
   44000:	e0bffa43 	ldbu	r2,-23(fp)
   44004:	10803fcc 	andi	r2,r2,255
   44008:	e1bffb04 	addi	r6,fp,-20
   4400c:	d9800015 	stw	r6,0(sp)
   44010:	180d883a 	mov	r6,r3
   44014:	100f883a 	mov	r7,r2
   44018:	0043b400 	call	43b40 <merge_color_channels>
      
      // write the new pixel value out to memory overwriting the current background     
      vid_set_pixel((horiz_offset + j), (vert_offset + i), new_color, display);     
   4401c:	e0fffc17 	ldw	r3,-16(fp)
   44020:	e0bff717 	ldw	r2,-36(fp)
   44024:	1889883a 	add	r4,r3,r2
   44028:	e0fffd17 	ldw	r3,-12(fp)
   4402c:	e0bff617 	ldw	r2,-40(fp)
   44030:	1887883a 	add	r3,r3,r2
   44034:	e0bffb17 	ldw	r2,-20(fp)
   44038:	180b883a 	mov	r5,r3
   4403c:	100d883a 	mov	r6,r2
   44040:	e1c00417 	ldw	r7,16(fp)
   44044:	0041b940 	call	41b94 <vid_set_pixel>

      alpha++;
   44048:	e0bff817 	ldw	r2,-32(fp)
   4404c:	10800044 	addi	r2,r2,1
   44050:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
    for (j = 0; j < font[character-33].bounds_width; j++) {
   44054:	e0bff717 	ldw	r2,-36(fp)
   44058:	10800044 	addi	r2,r2,1
   4405c:	e0bff715 	stw	r2,-36(fp)
   44060:	e0fff717 	ldw	r3,-36(fp)
   44064:	e0bfff07 	ldb	r2,-4(fp)
   44068:	1004917a 	slli	r2,r2,5
   4406c:	10bef804 	addi	r2,r2,-1056
   44070:	e1000317 	ldw	r4,12(fp)
   44074:	2085883a 	add	r2,r4,r2
   44078:	10800417 	ldw	r2,16(r2)
   4407c:	18bfbf36 	bltu	r3,r2,43f7c <__alt_data_end+0xfffce41c>
  alpha = font[character-33].char_alpha_map;

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
   44080:	e0bff617 	ldw	r2,-40(fp)
   44084:	10800044 	addi	r2,r2,1
   44088:	e0bff615 	stw	r2,-40(fp)
   4408c:	e0fff617 	ldw	r3,-40(fp)
   44090:	e0bfff07 	ldb	r2,-4(fp)
   44094:	1004917a 	slli	r2,r2,5
   44098:	10bef804 	addi	r2,r2,-1056
   4409c:	e1000317 	ldw	r4,12(fp)
   440a0:	2085883a 	add	r2,r4,r2
   440a4:	10800517 	ldw	r2,20(r2)
   440a8:	18bfb236 	bltu	r3,r2,43f74 <__alt_data_end+0xfffce414>

      alpha++;
    }
  }

  return(0);
   440ac:	0005883a 	mov	r2,zero
}
   440b0:	e037883a 	mov	sp,fp
   440b4:	dfc00117 	ldw	ra,4(sp)
   440b8:	df000017 	ldw	fp,0(sp)
   440bc:	dec00204 	addi	sp,sp,8
   440c0:	f800283a 	ret

000440c4 <vid_string_pixel_length_alpha>:
*           font.  Useful for centering text, and determining the
*           appropriate size of a text box or button.
*
******************************************************************/
int vid_string_pixel_length_alpha( struct abc_font_struct font[], char string[] )
{
   440c4:	defffb04 	addi	sp,sp,-20
   440c8:	df000415 	stw	fp,16(sp)
   440cc:	df000404 	addi	fp,sp,16
   440d0:	e13ffe15 	stw	r4,-8(fp)
   440d4:	e17fff15 	stw	r5,-4(fp)
  int i = 0;
   440d8:	e03ffc15 	stw	zero,-16(fp)
  int length = 0;
   440dc:	e03ffd15 	stw	zero,-12(fp)

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
   440e0:	e03ffc15 	stw	zero,-16(fp)
   440e4:	00002206 	br	44170 <vid_string_pixel_length_alpha+0xac>
  {
    if( string[i] == ' ' )
   440e8:	e0bffc17 	ldw	r2,-16(fp)
   440ec:	e0ffff17 	ldw	r3,-4(fp)
   440f0:	1885883a 	add	r2,r3,r2
   440f4:	10800003 	ldbu	r2,0(r2)
   440f8:	10803fcc 	andi	r2,r2,255
   440fc:	1080201c 	xori	r2,r2,128
   44100:	10bfe004 	addi	r2,r2,-128
   44104:	10800818 	cmpnei	r2,r2,32
   44108:	1000071e 	bne	r2,zero,44128 <vid_string_pixel_length_alpha+0x64>
    {
      // Here we just add the length of the '-' character
      length += font[45 - 33].bounds_width;
   4410c:	e0bffe17 	ldw	r2,-8(fp)
   44110:	10806004 	addi	r2,r2,384
   44114:	10c00417 	ldw	r3,16(r2)
   44118:	e0bffd17 	ldw	r2,-12(fp)
   4411c:	1885883a 	add	r2,r3,r2
   44120:	e0bffd15 	stw	r2,-12(fp)
   44124:	00000f06 	br	44164 <vid_string_pixel_length_alpha+0xa0>
    }
    else
    {
      length += font[string[i] - 33].bounds_width;
   44128:	e0bffc17 	ldw	r2,-16(fp)
   4412c:	e0ffff17 	ldw	r3,-4(fp)
   44130:	1885883a 	add	r2,r3,r2
   44134:	10800003 	ldbu	r2,0(r2)
   44138:	10803fcc 	andi	r2,r2,255
   4413c:	1080201c 	xori	r2,r2,128
   44140:	10bfe004 	addi	r2,r2,-128
   44144:	1004917a 	slli	r2,r2,5
   44148:	10bef804 	addi	r2,r2,-1056
   4414c:	e0fffe17 	ldw	r3,-8(fp)
   44150:	1885883a 	add	r2,r3,r2
   44154:	10c00417 	ldw	r3,16(r2)
   44158:	e0bffd17 	ldw	r2,-12(fp)
   4415c:	1885883a 	add	r2,r3,r2
   44160:	e0bffd15 	stw	r2,-12(fp)
{
  int i = 0;
  int length = 0;

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
   44164:	e0bffc17 	ldw	r2,-16(fp)
   44168:	10800044 	addi	r2,r2,1
   4416c:	e0bffc15 	stw	r2,-16(fp)
   44170:	e0bffc17 	ldw	r2,-16(fp)
   44174:	e0ffff17 	ldw	r3,-4(fp)
   44178:	1885883a 	add	r2,r3,r2
   4417c:	10800003 	ldbu	r2,0(r2)
   44180:	10803fcc 	andi	r2,r2,255
   44184:	1080201c 	xori	r2,r2,128
   44188:	10bfe004 	addi	r2,r2,-128
   4418c:	103fd61e 	bne	r2,zero,440e8 <__alt_data_end+0xfffce588>
    else
    {
      length += font[string[i] - 33].bounds_width;
    }
  }
  return( length );
   44190:	e0bffd17 	ldw	r2,-12(fp)
}
   44194:	e037883a 	mov	sp,fp
   44198:	df000017 	ldw	fp,0(sp)
   4419c:	dec00104 	addi	sp,sp,4
   441a0:	f800283a 	ret

000441a4 <GUI_ShowWelcome>:
    RECT rcPaint;
    PALETTE_INFO szPalette[BTN_NUM];
}DESK_INFO;


void GUI_ShowWelcome(alt_video_display *pDisplay){
   441a4:	defff804 	addi	sp,sp,-32
   441a8:	dfc00715 	stw	ra,28(sp)
   441ac:	df000615 	stw	fp,24(sp)
   441b0:	df000604 	addi	fp,sp,24
   441b4:	e13fff15 	stw	r4,-4(fp)
	int x, y;


	x = pDisplay->width / 2 - 60;
   441b8:	e0bfff17 	ldw	r2,-4(fp)
   441bc:	10800117 	ldw	r2,4(r2)
   441c0:	1006d7fa 	srli	r3,r2,31
   441c4:	1885883a 	add	r2,r3,r2
   441c8:	1005d07a 	srai	r2,r2,1
   441cc:	10bff104 	addi	r2,r2,-60
   441d0:	e0bffd15 	stw	r2,-12(fp)
	y = pDisplay->height / 2 - 10;
   441d4:	e0bfff17 	ldw	r2,-4(fp)
   441d8:	10800217 	ldw	r2,8(r2)
   441dc:	1006d7fa 	srli	r3,r2,31
   441e0:	1885883a 	add	r2,r3,r2
   441e4:	1005d07a 	srai	r2,r2,1
   441e8:	10bffd84 	addi	r2,r2,-10
   441ec:	e0bffe15 	stw	r2,-8(fp)

	vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Terasic");
   441f0:	008001b4 	movhi	r2,6
   441f4:	109e4504 	addi	r2,r2,30996
   441f8:	d8800015 	stw	r2,0(sp)
   441fc:	e0bfff17 	ldw	r2,-4(fp)
   44200:	d8800115 	stw	r2,4(sp)
   44204:	008001b4 	movhi	r2,6
   44208:	109d4e04 	addi	r2,r2,30008
   4420c:	d8800215 	stw	r2,8(sp)
   44210:	e13ffd17 	ldw	r4,-12(fp)
   44214:	e17ffe17 	ldw	r5,-8(fp)
   44218:	01803fc4 	movi	r6,255
   4421c:	000f883a 	mov	r7,zero
   44220:	004379c0 	call	4379c <vid_print_string_alpha>
	vid_print_string_alpha(x, y+22, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Touch Demo");
   44224:	e0bffe17 	ldw	r2,-8(fp)
   44228:	10800584 	addi	r2,r2,22
   4422c:	00c001b4 	movhi	r3,6
   44230:	18de4504 	addi	r3,r3,30996
   44234:	d8c00015 	stw	r3,0(sp)
   44238:	e0ffff17 	ldw	r3,-4(fp)
   4423c:	d8c00115 	stw	r3,4(sp)
   44240:	00c001b4 	movhi	r3,6
   44244:	18dd5004 	addi	r3,r3,30016
   44248:	d8c00215 	stw	r3,8(sp)
   4424c:	e13ffd17 	ldw	r4,-12(fp)
   44250:	100b883a 	mov	r5,r2
   44254:	01803fc4 	movi	r6,255
   44258:	000f883a 	mov	r7,zero
   4425c:	004379c0 	call	4379c <vid_print_string_alpha>



}
   44260:	e037883a 	mov	sp,fp
   44264:	dfc00117 	ldw	ra,4(sp)
   44268:	df000017 	ldw	fp,0(sp)
   4426c:	dec00204 	addi	sp,sp,8
   44270:	f800283a 	ret

00044274 <GUI_DeskInit>:

void GUI_DeskInit(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
   44274:	deffef04 	addi	sp,sp,-68
   44278:	dfc01015 	stw	ra,64(sp)
   4427c:	df000f15 	stw	fp,60(sp)
   44280:	df000f04 	addi	fp,sp,60
   44284:	e13ffe15 	stw	r4,-8(fp)
   44288:	e17fff15 	stw	r5,-4(fp)
    int i;
    RECT rc;
    const int BoxH = 40;
   4428c:	00800a04 	movi	r2,40
   44290:	e0bff315 	stw	r2,-52(fp)
    const int BoxW = 40;
   44294:	00800a04 	movi	r2,40
   44298:	e0bff415 	stw	r2,-48(fp)
    const int GapH = 5;
   4429c:	00800144 	movi	r2,5
   442a0:	e0bff515 	stw	r2,-44(fp)
    const int DrawBorder = 2;
   442a4:	00800084 	movi	r2,2
   442a8:	e0bff615 	stw	r2,-40(fp)
    const int TextW = 0;
   442ac:	e03ff715 	stw	zero,-36(fp)
    const int ClearExtraW = 30;
   442b0:	00800784 	movi	r2,30
   442b4:	e0bff815 	stw	r2,-32(fp)
    int GapW;

    
    GapW = (pDisplay->width - TextW - ClearExtraW - (BTN_NUM*BoxW))/(BTN_NUM+1);
   442b8:	e0bffe17 	ldw	r2,-8(fp)
   442bc:	10c00117 	ldw	r3,4(r2)
   442c0:	e0bff717 	ldw	r2,-36(fp)
   442c4:	1887c83a 	sub	r3,r3,r2
   442c8:	e0bff817 	ldw	r2,-32(fp)
   442cc:	1887c83a 	sub	r3,r3,r2
   442d0:	e0bff417 	ldw	r2,-48(fp)
   442d4:	10bffee4 	muli	r2,r2,-5
   442d8:	1885883a 	add	r2,r3,r2
   442dc:	1009883a 	mov	r4,r2
   442e0:	01400184 	movi	r5,6
   442e4:	00478640 	call	47864 <__divsi3>
   442e8:	e0bff915 	stw	r2,-28(fp)
    //printf("GapW=%d\r\n", GapW);
    rc.top = pDisplay->height - BoxH - GapH;
   442ec:	e0bffe17 	ldw	r2,-8(fp)
   442f0:	10c00217 	ldw	r3,8(r2)
   442f4:	e0bff317 	ldw	r2,-52(fp)
   442f8:	1887c83a 	sub	r3,r3,r2
   442fc:	e0bff517 	ldw	r2,-44(fp)
   44300:	1885c83a 	sub	r2,r3,r2
   44304:	e0bffc15 	stw	r2,-16(fp)
    rc.bottom = rc.top + BoxH;
   44308:	e0fffc17 	ldw	r3,-16(fp)
   4430c:	e0bff317 	ldw	r2,-52(fp)
   44310:	1885883a 	add	r2,r3,r2
   44314:	e0bffd15 	stw	r2,-12(fp)
    rc.left = GapW + TextW + ClearExtraW;
   44318:	e0fff917 	ldw	r3,-28(fp)
   4431c:	e0bff717 	ldw	r2,-36(fp)
   44320:	1887883a 	add	r3,r3,r2
   44324:	e0bff817 	ldw	r2,-32(fp)
   44328:	1885883a 	add	r2,r3,r2
   4432c:	e0bffa15 	stw	r2,-24(fp)
    rc.right = rc.left + BoxW;
   44330:	e0fffa17 	ldw	r3,-24(fp)
   44334:	e0bff417 	ldw	r2,-48(fp)
   44338:	1885883a 	add	r2,r3,r2
   4433c:	e0bffb15 	stw	r2,-20(fp)
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pDisplay->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
   44340:	e0bfff17 	ldw	r2,-4(fp)
   44344:	10c00104 	addi	r3,r2,4
   44348:	e0bffe17 	ldw	r2,-8(fp)
   4434c:	11000117 	ldw	r4,4(r2)
   44350:	e0bff617 	ldw	r2,-40(fp)
   44354:	2085c83a 	sub	r2,r4,r2
   44358:	e17ffc17 	ldw	r5,-16(fp)
   4435c:	e13ff617 	ldw	r4,-40(fp)
   44360:	2909c83a 	sub	r4,r5,r4
   44364:	d9000015 	stw	r4,0(sp)
   44368:	1809883a 	mov	r4,r3
   4436c:	e17ff617 	ldw	r5,-40(fp)
   44370:	100d883a 	mov	r6,r2
   44374:	e1fff617 	ldw	r7,-40(fp)
   44378:	00403500 	call	40350 <RectSet>
    
    for(i=0;i<BTN_NUM;i++){
   4437c:	e03ff215 	stw	zero,-56(fp)
   44380:	00002206 	br	4440c <GUI_DeskInit+0x198>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
   44384:	e0bff217 	ldw	r2,-56(fp)
   44388:	10800044 	addi	r2,r2,1
   4438c:	10800524 	muli	r2,r2,20
   44390:	e0ffff17 	ldw	r3,-4(fp)
   44394:	1887883a 	add	r3,r3,r2
   44398:	e0bffa04 	addi	r2,fp,-24
   4439c:	1809883a 	mov	r4,r3
   443a0:	100b883a 	mov	r5,r2
   443a4:	00404bc0 	call	404bc <RectCopy>
        pDeskInfo->szPalette[i].color = szPallete[i];
   443a8:	00c001f4 	movhi	r3,7
   443ac:	18e52b04 	addi	r3,r3,-27476
   443b0:	e0bff217 	ldw	r2,-56(fp)
   443b4:	1085883a 	add	r2,r2,r2
   443b8:	1085883a 	add	r2,r2,r2
   443bc:	1885883a 	add	r2,r3,r2
   443c0:	10800017 	ldw	r2,0(r2)
   443c4:	1007883a 	mov	r3,r2
   443c8:	e13fff17 	ldw	r4,-4(fp)
   443cc:	e0bff217 	ldw	r2,-56(fp)
   443d0:	10800524 	muli	r2,r2,20
   443d4:	2085883a 	add	r2,r4,r2
   443d8:	10800904 	addi	r2,r2,36
   443dc:	10c00015 	stw	r3,0(r2)
        RectOffset(&rc, BoxW+GapW, 0);
   443e0:	e0fff417 	ldw	r3,-48(fp)
   443e4:	e0bff917 	ldw	r2,-28(fp)
   443e8:	1885883a 	add	r2,r3,r2
   443ec:	e0fffa04 	addi	r3,fp,-24
   443f0:	1809883a 	mov	r4,r3
   443f4:	100b883a 	mov	r5,r2
   443f8:	000d883a 	mov	r6,zero
   443fc:	00404340 	call	40434 <RectOffset>
    rc.right = rc.left + BoxW;
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pDisplay->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
    
    for(i=0;i<BTN_NUM;i++){
   44400:	e0bff217 	ldw	r2,-56(fp)
   44404:	10800044 	addi	r2,r2,1
   44408:	e0bff215 	stw	r2,-56(fp)
   4440c:	e0bff217 	ldw	r2,-56(fp)
   44410:	10800150 	cmplti	r2,r2,5
   44414:	103fdb1e 	bne	r2,zero,44384 <__alt_data_end+0xfffce824>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
        pDeskInfo->szPalette[i].color = szPallete[i];
        RectOffset(&rc, BoxW+GapW, 0);
    }
    pDeskInfo->szPalette[BTN_CLEAR].rc.left -= ClearExtraW;
   44418:	e0bfff17 	ldw	r2,-4(fp)
   4441c:	10c00517 	ldw	r3,20(r2)
   44420:	e0bff817 	ldw	r2,-32(fp)
   44424:	1887c83a 	sub	r3,r3,r2
   44428:	e0bfff17 	ldw	r2,-4(fp)
   4442c:	10c00515 	stw	r3,20(r2)
    pDeskInfo->Paint_Index = BTN_BLUE;
   44430:	e0bfff17 	ldw	r2,-4(fp)
   44434:	00c00084 	movi	r3,2
   44438:	10c00015 	stw	r3,0(r2)
}
   4443c:	e037883a 	mov	sp,fp
   44440:	dfc00117 	ldw	ra,4(sp)
   44444:	df000017 	ldw	fp,0(sp)
   44448:	dec00204 	addi	sp,sp,8
   4444c:	f800283a 	ret

00044450 <GUI_CheckButton>:

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
   44450:	defffa04 	addi	sp,sp,-24
   44454:	dfc00515 	stw	ra,20(sp)
   44458:	df000415 	stw	fp,16(sp)
   4445c:	df000404 	addi	fp,sp,16
   44460:	e13ffe15 	stw	r4,-8(fp)
   44464:	e17fff15 	stw	r5,-4(fp)
    int ButtonId = BTN_NONE;
   44468:	00800184 	movi	r2,6
   4446c:	e0bffc15 	stw	r2,-16(fp)
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
   44470:	e03ffd15 	stw	zero,-12(fp)
   44474:	00000e06 	br	444b0 <GUI_CheckButton+0x60>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
   44478:	e0bffd17 	ldw	r2,-12(fp)
   4447c:	10800044 	addi	r2,r2,1
   44480:	10800524 	muli	r2,r2,20
   44484:	e0fffe17 	ldw	r3,-8(fp)
   44488:	1885883a 	add	r2,r3,r2
   4448c:	e13fff17 	ldw	r4,-4(fp)
   44490:	100b883a 	mov	r5,r2
   44494:	004028c0 	call	4028c <IsPtInRect>
   44498:	10000226 	beq	r2,zero,444a4 <GUI_CheckButton+0x54>
            ButtonId = i;
   4449c:	e0bffd17 	ldw	r2,-12(fp)
   444a0:	e0bffc15 	stw	r2,-16(fp)

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
    int ButtonId = BTN_NONE;
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
   444a4:	e0bffd17 	ldw	r2,-12(fp)
   444a8:	10800044 	addi	r2,r2,1
   444ac:	e0bffd15 	stw	r2,-12(fp)
   444b0:	e0bffd17 	ldw	r2,-12(fp)
   444b4:	10800148 	cmpgei	r2,r2,5
   444b8:	1000031e 	bne	r2,zero,444c8 <GUI_CheckButton+0x78>
   444bc:	e0bffc17 	ldw	r2,-16(fp)
   444c0:	108001a0 	cmpeqi	r2,r2,6
   444c4:	103fec1e 	bne	r2,zero,44478 <__alt_data_end+0xfffce918>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
            ButtonId = i;
    }
    return ButtonId;
   444c8:	e0bffc17 	ldw	r2,-16(fp)
}
   444cc:	e037883a 	mov	sp,fp
   444d0:	dfc00117 	ldw	ra,4(sp)
   444d4:	df000017 	ldw	fp,0(sp)
   444d8:	dec00204 	addi	sp,sp,8
   444dc:	f800283a 	ret

000444e0 <GUI_DeskDraw>:

void GUI_DeskDraw(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
   444e0:	defff104 	addi	sp,sp,-60
   444e4:	dfc00e15 	stw	ra,56(sp)
   444e8:	df000d15 	stw	fp,52(sp)
   444ec:	dc400c15 	stw	r17,48(sp)
   444f0:	dc000b15 	stw	r16,44(sp)
   444f4:	df000d04 	addi	fp,sp,52
   444f8:	e13ffc15 	stw	r4,-16(fp)
   444fc:	e17ffd15 	stw	r5,-12(fp)
    // show text
  //  vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Terasic");
  //  vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top+22, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Touch");

    // draw border
    RectCopy(&rc, &pDeskInfo->rcPaint);
   44500:	e0bffd17 	ldw	r2,-12(fp)
   44504:	10800104 	addi	r2,r2,4
   44508:	e0fff804 	addi	r3,fp,-32
   4450c:	1809883a 	mov	r4,r3
   44510:	100b883a 	mov	r5,r2
   44514:	00404bc0 	call	404bc <RectCopy>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pDisplay);
   44518:	e13ff817 	ldw	r4,-32(fp)
   4451c:	e17ffa17 	ldw	r5,-24(fp)
   44520:	e0fff917 	ldw	r3,-28(fp)
   44524:	e0bffb17 	ldw	r2,-20(fp)
   44528:	01804034 	movhi	r6,256
   4452c:	31bfffc4 	addi	r6,r6,-1
   44530:	d9800015 	stw	r6,0(sp)
   44534:	d8000115 	stw	zero,4(sp)
   44538:	e1bffc17 	ldw	r6,-16(fp)
   4453c:	d9800215 	stw	r6,8(sp)
   44540:	180d883a 	mov	r6,r3
   44544:	100f883a 	mov	r7,r2
   44548:	00419540 	call	41954 <vid_draw_box>
    

    // draw palette
	active = pDeskInfo->Paint_Index;
   4454c:	e0bffd17 	ldw	r2,-12(fp)
   44550:	10800017 	ldw	r2,0(r2)
   44554:	e0bff715 	stw	r2,-36(fp)
    for(i=0;i<BTN_NUM;i++){
   44558:	e03ff615 	stw	zero,-40(fp)
   4455c:	00006406 	br	446f0 <GUI_DeskDraw+0x210>
        RectCopy(&rc, &(pDeskInfo->szPalette[i].rc));
   44560:	e0bff617 	ldw	r2,-40(fp)
   44564:	10800044 	addi	r2,r2,1
   44568:	10800524 	muli	r2,r2,20
   4456c:	e0fffd17 	ldw	r3,-12(fp)
   44570:	1885883a 	add	r2,r3,r2
   44574:	e0fff804 	addi	r3,fp,-32
   44578:	1809883a 	mov	r4,r3
   4457c:	100b883a 	mov	r5,r2
   44580:	00404bc0 	call	404bc <RectCopy>
        if (i == BTN_CLEAR){
   44584:	e0bff617 	ldw	r2,-40(fp)
   44588:	1000301e 	bne	r2,zero,4464c <GUI_DeskDraw+0x16c>
            vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_NOT_FILL, pDisplay);
   4458c:	e13ff817 	ldw	r4,-32(fp)
   44590:	e17ffa17 	ldw	r5,-24(fp)
   44594:	e0fff917 	ldw	r3,-28(fp)
   44598:	e0bffb17 	ldw	r2,-20(fp)
   4459c:	e1fffd17 	ldw	r7,-12(fp)
   445a0:	e1bff617 	ldw	r6,-40(fp)
   445a4:	31800524 	muli	r6,r6,20
   445a8:	398d883a 	add	r6,r7,r6
   445ac:	31800904 	addi	r6,r6,36
   445b0:	31800017 	ldw	r6,0(r6)
   445b4:	d9800015 	stw	r6,0(sp)
   445b8:	d8000115 	stw	zero,4(sp)
   445bc:	e1bffc17 	ldw	r6,-16(fp)
   445c0:	d9800215 	stw	r6,8(sp)
   445c4:	180d883a 	mov	r6,r3
   445c8:	100f883a 	mov	r7,r2
   445cc:	00419540 	call	41954 <vid_draw_box>
            vid_print_string_alpha(rc.left+8, rc.top+(RectHeight(&rc)-22)/2, pDeskInfo->szPalette[i].color, BLACK_24, tahomabold_20, pDisplay, "Clear");
   445d0:	e0bff817 	ldw	r2,-32(fp)
   445d4:	14000204 	addi	r16,r2,8
   445d8:	e47ffa17 	ldw	r17,-24(fp)
   445dc:	e0bff804 	addi	r2,fp,-32
   445e0:	1009883a 	mov	r4,r2
   445e4:	00405540 	call	40554 <RectHeight>
   445e8:	10bffa84 	addi	r2,r2,-22
   445ec:	1006d7fa 	srli	r3,r2,31
   445f0:	1885883a 	add	r2,r3,r2
   445f4:	1005d07a 	srai	r2,r2,1
   445f8:	8887883a 	add	r3,r17,r2
   445fc:	e13ffd17 	ldw	r4,-12(fp)
   44600:	e0bff617 	ldw	r2,-40(fp)
   44604:	10800524 	muli	r2,r2,20
   44608:	2085883a 	add	r2,r4,r2
   4460c:	10800904 	addi	r2,r2,36
   44610:	10800017 	ldw	r2,0(r2)
   44614:	010001b4 	movhi	r4,6
   44618:	211e4504 	addi	r4,r4,30996
   4461c:	d9000015 	stw	r4,0(sp)
   44620:	e13ffc17 	ldw	r4,-16(fp)
   44624:	d9000115 	stw	r4,4(sp)
   44628:	010001b4 	movhi	r4,6
   4462c:	211d5304 	addi	r4,r4,30028
   44630:	d9000215 	stw	r4,8(sp)
   44634:	8009883a 	mov	r4,r16
   44638:	180b883a 	mov	r5,r3
   4463c:	100d883a 	mov	r6,r2
   44640:	000f883a 	mov	r7,zero
   44644:	004379c0 	call	4379c <vid_print_string_alpha>
   44648:	00002606 	br	446e4 <GUI_DeskDraw+0x204>
        }else{
        	if (active != i){
   4464c:	e0fff717 	ldw	r3,-36(fp)
   44650:	e0bff617 	ldw	r2,-40(fp)
   44654:	18801126 	beq	r3,r2,4469c <GUI_DeskDraw+0x1bc>
          		vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
   44658:	e13ff817 	ldw	r4,-32(fp)
   4465c:	e17ffa17 	ldw	r5,-24(fp)
   44660:	e0fff917 	ldw	r3,-28(fp)
   44664:	e0bffb17 	ldw	r2,-20(fp)
   44668:	d8000015 	stw	zero,0(sp)
   4466c:	01800044 	movi	r6,1
   44670:	d9800115 	stw	r6,4(sp)
   44674:	e1bffc17 	ldw	r6,-16(fp)
   44678:	d9800215 	stw	r6,8(sp)
   4467c:	180d883a 	mov	r6,r3
   44680:	100f883a 	mov	r7,r2
   44684:	00419540 	call	41954 <vid_draw_box>
        		RectInflate(&rc, -4, -4);
   44688:	e0bff804 	addi	r2,fp,-32
   4468c:	1009883a 	mov	r4,r2
   44690:	017fff04 	movi	r5,-4
   44694:	01bfff04 	movi	r6,-4
   44698:	00403ac0 	call	403ac <RectInflate>
        	}
      		vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_FILL, pDisplay);
   4469c:	e13ff817 	ldw	r4,-32(fp)
   446a0:	e17ffa17 	ldw	r5,-24(fp)
   446a4:	e0fff917 	ldw	r3,-28(fp)
   446a8:	e0bffb17 	ldw	r2,-20(fp)
   446ac:	e1fffd17 	ldw	r7,-12(fp)
   446b0:	e1bff617 	ldw	r6,-40(fp)
   446b4:	31800524 	muli	r6,r6,20
   446b8:	398d883a 	add	r6,r7,r6
   446bc:	31800904 	addi	r6,r6,36
   446c0:	31800017 	ldw	r6,0(r6)
   446c4:	d9800015 	stw	r6,0(sp)
   446c8:	01800044 	movi	r6,1
   446cc:	d9800115 	stw	r6,4(sp)
   446d0:	e1bffc17 	ldw	r6,-16(fp)
   446d4:	d9800215 	stw	r6,8(sp)
   446d8:	180d883a 	mov	r6,r3
   446dc:	100f883a 	mov	r7,r2
   446e0:	00419540 	call	41954 <vid_draw_box>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pDisplay);
    

    // draw palette
	active = pDeskInfo->Paint_Index;
    for(i=0;i<BTN_NUM;i++){
   446e4:	e0bff617 	ldw	r2,-40(fp)
   446e8:	10800044 	addi	r2,r2,1
   446ec:	e0bff615 	stw	r2,-40(fp)
   446f0:	e0bff617 	ldw	r2,-40(fp)
   446f4:	10800150 	cmplti	r2,r2,5
   446f8:	103f991e 	bne	r2,zero,44560 <__alt_data_end+0xfffcea00>
    //RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
    //vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pDisplay, "2");
    
        
        
}
   446fc:	e6fffe04 	addi	sp,fp,-8
   44700:	dfc00317 	ldw	ra,12(sp)
   44704:	df000217 	ldw	fp,8(sp)
   44708:	dc400117 	ldw	r17,4(sp)
   4470c:	dc000017 	ldw	r16,0(sp)
   44710:	dec00404 	addi	sp,sp,16
   44714:	f800283a 	ret

00044718 <IsContinuedPoint>:

bool IsContinuedPoint(POINT *ptPre, POINT *ptNew){
   44718:	defffb04 	addi	sp,sp,-20
   4471c:	df000415 	stw	fp,16(sp)
   44720:	df000404 	addi	fp,sp,16
   44724:	e13ffe15 	stw	r4,-8(fp)
   44728:	e17fff15 	stw	r5,-4(fp)
    bool bYes = TRUE;
   4472c:	00800044 	movi	r2,1
   44730:	e0bffc15 	stw	r2,-16(fp)
    const int nMax = 50;
   44734:	00800c84 	movi	r2,50
   44738:	e0bffd15 	stw	r2,-12(fp)
    if (abs(ptPre->x - ptNew->x) > nMax)
   4473c:	e0bffe17 	ldw	r2,-8(fp)
   44740:	10c00017 	ldw	r3,0(r2)
   44744:	e0bfff17 	ldw	r2,-4(fp)
   44748:	10800017 	ldw	r2,0(r2)
   4474c:	1885c83a 	sub	r2,r3,r2
   44750:	1000010e 	bge	r2,zero,44758 <IsContinuedPoint+0x40>
   44754:	0085c83a 	sub	r2,zero,r2
   44758:	e0fffd17 	ldw	r3,-12(fp)
   4475c:	1880020e 	bge	r3,r2,44768 <IsContinuedPoint+0x50>
        bYes = FALSE;
   44760:	e03ffc15 	stw	zero,-16(fp)
   44764:	00000a06 	br	44790 <IsContinuedPoint+0x78>
    else if (abs(ptPre->y - ptNew->y) > nMax)
   44768:	e0bffe17 	ldw	r2,-8(fp)
   4476c:	10c00117 	ldw	r3,4(r2)
   44770:	e0bfff17 	ldw	r2,-4(fp)
   44774:	10800117 	ldw	r2,4(r2)
   44778:	1885c83a 	sub	r2,r3,r2
   4477c:	1000010e 	bge	r2,zero,44784 <IsContinuedPoint+0x6c>
   44780:	0085c83a 	sub	r2,zero,r2
   44784:	e0fffd17 	ldw	r3,-12(fp)
   44788:	1880010e 	bge	r3,r2,44790 <IsContinuedPoint+0x78>
        bYes = FALSE;
   4478c:	e03ffc15 	stw	zero,-16(fp)
        
    return bYes;        
   44790:	e0bffc17 	ldw	r2,-16(fp)
        
}
   44794:	e037883a 	mov	sp,fp
   44798:	df000017 	ldw	fp,0(sp)
   4479c:	dec00104 	addi	sp,sp,4
   447a0:	f800283a 	ret

000447a4 <GUI_ClearPaintArea>:



void GUI_ClearPaintArea(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
   447a4:	defff504 	addi	sp,sp,-44
   447a8:	dfc00a15 	stw	ra,40(sp)
   447ac:	df000915 	stw	fp,36(sp)
   447b0:	df000904 	addi	fp,sp,36
   447b4:	e13ffe15 	stw	r4,-8(fp)
   447b8:	e17fff15 	stw	r5,-4(fp)
    RECT rc;
    RectCopy(&rc, &pDeskInfo->rcPaint);
   447bc:	e0bfff17 	ldw	r2,-4(fp)
   447c0:	10800104 	addi	r2,r2,4
   447c4:	e13ffa04 	addi	r4,fp,-24
   447c8:	100b883a 	mov	r5,r2
   447cc:	00404bc0 	call	404bc <RectCopy>
    RectInflate(&rc, -1, -1);
   447d0:	e13ffa04 	addi	r4,fp,-24
   447d4:	017fffc4 	movi	r5,-1
   447d8:	01bfffc4 	movi	r6,-1
   447dc:	00403ac0 	call	403ac <RectInflate>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
   447e0:	e13ffa17 	ldw	r4,-24(fp)
   447e4:	e17ffc17 	ldw	r5,-16(fp)
   447e8:	e0fffb17 	ldw	r3,-20(fp)
   447ec:	e0bffd17 	ldw	r2,-12(fp)
   447f0:	d8000015 	stw	zero,0(sp)
   447f4:	01800044 	movi	r6,1
   447f8:	d9800115 	stw	r6,4(sp)
   447fc:	e1bffe17 	ldw	r6,-8(fp)
   44800:	d9800215 	stw	r6,8(sp)
   44804:	180d883a 	mov	r6,r3
   44808:	100f883a 	mov	r7,r2
   4480c:	00419540 	call	41954 <vid_draw_box>
    //
  //  RectCopy(&rc, &pDeskInfo->szPalette[BTN_GESTRUE].rc);
  //  vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
}
   44810:	e037883a 	mov	sp,fp
   44814:	dfc00117 	ldw	ra,4(sp)
   44818:	df000017 	ldw	fp,0(sp)
   4481c:	dec00204 	addi	sp,sp,8
   44820:	f800283a 	ret

00044824 <GUI>:

//void GUI(MTC_INFO *pTouch){
void GUI(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch){
   44824:	deffd004 	addi	sp,sp,-192
   44828:	dfc02f15 	stw	ra,188(sp)
   4482c:	df002e15 	stw	fp,184(sp)
   44830:	df002e04 	addi	fp,sp,184
   44834:	e13ffe15 	stw	r4,-8(fp)
   44838:	e17fff15 	stw	r5,-4(fp)
    // video
    DESK_INFO DeskInfo;
    int X, Y;
    POINT Pt;
    const int nDotSize = DOT_SIZE;
   4483c:	00800144 	movi	r2,5
   44840:	e0bfd615 	stw	r2,-168(fp)
    


    
    // clean screen
    vid_clean_screen(pDisplay, BLACK_24);
   44844:	e13ffe17 	ldw	r4,-8(fp)
   44848:	000b883a 	mov	r5,zero
   4484c:	00410f00 	call	410f0 <vid_clean_screen>
    
    // Show Terasic Welcome
    GUI_ShowWelcome(pDisplay);
   44850:	e13ffe17 	ldw	r4,-8(fp)
   44854:	00441a40 	call	441a4 <GUI_ShowWelcome>
    usleep(1*1000*1000);
   44858:	010003f4 	movhi	r4,15
   4485c:	21109004 	addi	r4,r4,16960
   44860:	004c0780 	call	4c078 <usleep>
    vid_clean_screen(pDisplay, BLACK_24);
   44864:	e13ffe17 	ldw	r4,-8(fp)
   44868:	000b883a 	mov	r5,zero
   4486c:	00410f00 	call	410f0 <vid_clean_screen>

   
    GUI_DeskInit(pDisplay, &DeskInfo);
   44870:	e0bfd804 	addi	r2,fp,-160
   44874:	e13ffe17 	ldw	r4,-8(fp)
   44878:	100b883a 	mov	r5,r2
   4487c:	00442740 	call	44274 <GUI_DeskInit>
    GUI_DeskDraw(pDisplay, &DeskInfo);
   44880:	e0bfd804 	addi	r2,fp,-160
   44884:	e13ffe17 	ldw	r4,-8(fp)
   44888:	100b883a 	mov	r5,r2
   4488c:	00444e00 	call	444e0 <GUI_DeskDraw>
    
   // VIPFR_ActiveDrawFrame(pReader);
    
    RectCopy(&rcTouch, &DeskInfo.rcPaint);
   44890:	e0fffa04 	addi	r3,fp,-24
   44894:	e0bfd804 	addi	r2,fp,-160
   44898:	10800104 	addi	r2,r2,4
   4489c:	1809883a 	mov	r4,r3
   448a0:	100b883a 	mov	r5,r2
   448a4:	00404bc0 	call	404bc <RectCopy>
    RectInflate(&rcTouch, -nDotSize-2, -nDotSize-2);
   448a8:	00ffff84 	movi	r3,-2
   448ac:	e0bfd617 	ldw	r2,-168(fp)
   448b0:	1887c83a 	sub	r3,r3,r2
   448b4:	013fff84 	movi	r4,-2
   448b8:	e0bfd617 	ldw	r2,-168(fp)
   448bc:	2085c83a 	sub	r2,r4,r2
   448c0:	e13ffa04 	addi	r4,fp,-24
   448c4:	180b883a 	mov	r5,r3
   448c8:	100d883a 	mov	r6,r2
   448cc:	00403ac0 	call	403ac <RectInflate>
    
    ColorPen = DeskInfo.szPalette[DeskInfo.Paint_Index].color;
   448d0:	e0bfd817 	ldw	r2,-160(fp)
   448d4:	10800524 	muli	r2,r2,20
   448d8:	e0ffd404 	addi	r3,fp,-176
   448dc:	1885883a 	add	r2,r3,r2
   448e0:	10800d04 	addi	r2,r2,52
   448e4:	10800017 	ldw	r2,0(r2)
   448e8:	e0bfd415 	stw	r2,-176(fp)
  //  printf("ContinuedTime=%d\r\n", ContinuedTime);
   // PtSet(&ptGesture, DeskInfo.szPalette[BTN_GESTRUE].rc.left+5, DeskInfo.szPalette[BTN_GESTRUE].rc.top+5);

    while(1){
            // touch
            if (Touch_GetXY(pTouch, &X, &Y)){
   448ec:	e0fff604 	addi	r3,fp,-40
   448f0:	e0bff704 	addi	r2,fp,-36
   448f4:	e13fff17 	ldw	r4,-4(fp)
   448f8:	180b883a 	mov	r5,r3
   448fc:	100d883a 	mov	r6,r2
   44900:	0046b500 	call	46b50 <Touch_GetXY>
   44904:	10004f26 	beq	r2,zero,44a44 <GUI+0x220>
           //     IOWR(LED_BASE, 0x00, LedMask);
             //   LedMask <<= 1;
             //   if (LedMask == 0x00)
               //     LedMask = 0x01;
                //
                printf("x=%d, y=%d\r\n", X,Y);
   44908:	e0fff617 	ldw	r3,-40(fp)
   4490c:	e0bff717 	ldw	r2,-36(fp)
   44910:	010001b4 	movhi	r4,6
   44914:	211d5504 	addi	r4,r4,30036
   44918:	180b883a 	mov	r5,r3
   4491c:	100d883a 	mov	r6,r2
   44920:	004a3f00 	call	4a3f0 <printf>
                PtSet(&Pt, X, Y);
   44924:	e0fff617 	ldw	r3,-40(fp)
   44928:	e0bff717 	ldw	r2,-36(fp)
   4492c:	e13ff804 	addi	r4,fp,-32
   44930:	180b883a 	mov	r5,r3
   44934:	100d883a 	mov	r6,r2
   44938:	00403100 	call	40310 <PtSet>


             //   printf("t:%d, %d\r\n", (int)alt_nticks(), LastTimePt1);
                //
                if ( IsPtInRect(&Pt, &rcTouch)){
   4493c:	e0fff804 	addi	r3,fp,-32
   44940:	e0bffa04 	addi	r2,fp,-24
   44944:	1809883a 	mov	r4,r3
   44948:	100b883a 	mov	r5,r2
   4494c:	004028c0 	call	4028c <IsPtInRect>
   44950:	10000c26 	beq	r2,zero,44984 <GUI+0x160>

                    vid_draw_circle(Pt.x, Pt.y, nDotSize, ColorPen, DO_FILL, pDisplay);
   44954:	e0fff817 	ldw	r3,-32(fp)
   44958:	e0bff917 	ldw	r2,-28(fp)
   4495c:	01000044 	movi	r4,1
   44960:	d9000015 	stw	r4,0(sp)
   44964:	e13ffe17 	ldw	r4,-8(fp)
   44968:	d9000115 	stw	r4,4(sp)
   4496c:	1809883a 	mov	r4,r3
   44970:	100b883a 	mov	r5,r2
   44974:	e1bfd617 	ldw	r6,-168(fp)
   44978:	e1ffd417 	ldw	r7,-176(fp)
   4497c:	00421700 	call	42170 <vid_draw_circle>
   44980:	00003006 	br	44a44 <GUI+0x220>
                   // VIPFR_ActiveDrawFrame(pReader);
                }else if (GUI_CheckButton(&DeskInfo, &Pt) == BTN_CLEAR){
   44984:	e0ffd804 	addi	r3,fp,-160
   44988:	e0bff804 	addi	r2,fp,-32
   4498c:	1809883a 	mov	r4,r3
   44990:	100b883a 	mov	r5,r2
   44994:	00444500 	call	44450 <GUI_CheckButton>
   44998:	1000071e 	bne	r2,zero,449b8 <GUI+0x194>
                    GUI_ClearPaintArea(pDisplay, &DeskInfo);
   4499c:	e0bfd804 	addi	r2,fp,-160
   449a0:	e13ffe17 	ldw	r4,-8(fp)
   449a4:	100b883a 	mov	r5,r2
   449a8:	00447a40 	call	447a4 <GUI_ClearPaintArea>
                  //  VIPFR_ActiveDrawFrame(pReader);
                    Touch_EmptyFifo(pTouch);
   449ac:	e13fff17 	ldw	r4,-4(fp)
   449b0:	0046b180 	call	46b18 <Touch_EmptyFifo>
   449b4:	00002306 	br	44a44 <GUI+0x220>
                }else {
                    ButtonId = GUI_CheckButton(&DeskInfo, &Pt);
   449b8:	e0ffd804 	addi	r3,fp,-160
   449bc:	e0bff804 	addi	r2,fp,-32
   449c0:	1809883a 	mov	r4,r3
   449c4:	100b883a 	mov	r5,r2
   449c8:	00444500 	call	44450 <GUI_CheckButton>
   449cc:	e0bfd715 	stw	r2,-164(fp)
                    UpdatePalette = FALSE;
   449d0:	e03fd515 	stw	zero,-172(fp)
                    if (ButtonId != BTN_NONE && ButtonId != BTN_CLEAR){
   449d4:	e0bfd717 	ldw	r2,-164(fp)
   449d8:	108001a0 	cmpeqi	r2,r2,6
   449dc:	1000191e 	bne	r2,zero,44a44 <GUI+0x220>
   449e0:	e0bfd717 	ldw	r2,-164(fp)
   449e4:	10001726 	beq	r2,zero,44a44 <GUI+0x220>
                        // chang draw color
                        if ( ButtonId != DeskInfo.Paint_Index ){
   449e8:	e0ffd817 	ldw	r3,-160(fp)
   449ec:	e0bfd717 	ldw	r2,-164(fp)
   449f0:	18800426 	beq	r3,r2,44a04 <GUI+0x1e0>
                            DeskInfo.Paint_Index = ButtonId;
   449f4:	e0bfd717 	ldw	r2,-164(fp)
   449f8:	e0bfd815 	stw	r2,-160(fp)
                            UpdatePalette = TRUE;
   449fc:	00800044 	movi	r2,1
   44a00:	e0bfd515 	stw	r2,-172(fp)
                            //
                        }

                        if (UpdatePalette){
   44a04:	e0bfd517 	ldw	r2,-172(fp)
   44a08:	10000e26 	beq	r2,zero,44a44 <GUI+0x220>
                            ColorPen = DeskInfo.szPalette[DeskInfo.Paint_Index].color;
   44a0c:	e0bfd817 	ldw	r2,-160(fp)
   44a10:	10800524 	muli	r2,r2,20
   44a14:	e0ffd404 	addi	r3,fp,-176
   44a18:	1885883a 	add	r2,r3,r2
   44a1c:	10800d04 	addi	r2,r2,52
   44a20:	10800017 	ldw	r2,0(r2)
   44a24:	e0bfd415 	stw	r2,-176(fp)
                            GUI_DeskDraw(pDisplay, &DeskInfo);
   44a28:	e0bfd804 	addi	r2,fp,-160
   44a2c:	e13ffe17 	ldw	r4,-8(fp)
   44a30:	100b883a 	mov	r5,r2
   44a34:	00444e00 	call	444e0 <GUI_DeskDraw>
                        //    VIPFR_ActiveDrawFrame(pReader);
                            Touch_EmptyFifo(pTouch);
   44a38:	e13fff17 	ldw	r4,-4(fp)
   44a3c:	0046b180 	call	46b18 <Touch_EmptyFifo>
                        }
                    }
                }
            } // if touch
        } // while
   44a40:	003faa06 	br	448ec <__alt_data_end+0xfffced8c>
   44a44:	003fa906 	br	448ec <__alt_data_end+0xfffced8c>

00044a48 <GUI_ShowInfo>:
    
}



void GUI_ShowInfo(alt_video_display *pDisplay, char *pText){
   44a48:	defff904 	addi	sp,sp,-28
   44a4c:	dfc00615 	stw	ra,24(sp)
   44a50:	df000515 	stw	fp,20(sp)
   44a54:	df000504 	addi	fp,sp,20
   44a58:	e13ffe15 	stw	r4,-8(fp)
   44a5c:	e17fff15 	stw	r5,-4(fp)
    static int x=0,y=100;
   // vid_clean_screen(pReader, BLACK_24);
    vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pDisplay, pText);
   44a60:	d0e8bc17 	ldw	r3,-23824(gp)
   44a64:	d0a00117 	ldw	r2,-32764(gp)
   44a68:	010001b4 	movhi	r4,6
   44a6c:	211e4504 	addi	r4,r4,30996
   44a70:	d9000015 	stw	r4,0(sp)
   44a74:	e13ffe17 	ldw	r4,-8(fp)
   44a78:	d9000115 	stw	r4,4(sp)
   44a7c:	e13fff17 	ldw	r4,-4(fp)
   44a80:	d9000215 	stw	r4,8(sp)
   44a84:	1809883a 	mov	r4,r3
   44a88:	100b883a 	mov	r5,r2
   44a8c:	01803fc4 	movi	r6,255
   44a90:	000f883a 	mov	r7,zero
   44a94:	004379c0 	call	4379c <vid_print_string_alpha>
 //   VIPFR_ActiveDrawFrame(pReader);
}
   44a98:	e037883a 	mov	sp,fp
   44a9c:	dfc00117 	ldw	ra,4(sp)
   44aa0:	df000017 	ldw	fp,0(sp)
   44aa4:	dec00204 	addi	sp,sp,8
   44aa8:	f800283a 	ret

00044aac <GUI_ShowTouchPoint>:

void GUI_ShowTouchPoint(alt_video_display *pDisplay, int X, int Y, int color){
   44aac:	defff804 	addi	sp,sp,-32
   44ab0:	dfc00715 	stw	ra,28(sp)
   44ab4:	df000615 	stw	fp,24(sp)
   44ab8:	df000604 	addi	fp,sp,24
   44abc:	e13ffc15 	stw	r4,-16(fp)
   44ac0:	e17ffd15 	stw	r5,-12(fp)
   44ac4:	e1bffe15 	stw	r6,-8(fp)
   44ac8:	e1ffff15 	stw	r7,-4(fp)
    vid_draw_circle(X, Y, 10, color, DO_FILL, pDisplay);
   44acc:	00800044 	movi	r2,1
   44ad0:	d8800015 	stw	r2,0(sp)
   44ad4:	e0bffc17 	ldw	r2,-16(fp)
   44ad8:	d8800115 	stw	r2,4(sp)
   44adc:	e13ffd17 	ldw	r4,-12(fp)
   44ae0:	e17ffe17 	ldw	r5,-8(fp)
   44ae4:	01800284 	movi	r6,10
   44ae8:	e1ffff17 	ldw	r7,-4(fp)
   44aec:	00421700 	call	42170 <vid_draw_circle>
   // VIPFR_ActiveDrawFrame(pReader);
}
   44af0:	e037883a 	mov	sp,fp
   44af4:	dfc00117 	ldw	ra,4(sp)
   44af8:	df000017 	ldw	fp,0(sp)
   44afc:	dec00204 	addi	sp,sp,8
   44b00:	f800283a 	ret

00044b04 <ShowInfo>:
#include "simple_graphics.h"
#include "geometry.h"



void ShowInfo(alt_video_display *pDisplay, char *pText){
   44b04:	defff904 	addi	sp,sp,-28
   44b08:	dfc00615 	stw	ra,24(sp)
   44b0c:	df000515 	stw	fp,20(sp)
   44b10:	df000504 	addi	fp,sp,20
   44b14:	e13ffe15 	stw	r4,-8(fp)
   44b18:	e17fff15 	stw	r5,-4(fp)
    vid_print_string_alpha(1, 1, WHITE_24, BLACK_24, tahomabold_20, pDisplay, pText);
   44b1c:	008001b4 	movhi	r2,6
   44b20:	109e4504 	addi	r2,r2,30996
   44b24:	d8800015 	stw	r2,0(sp)
   44b28:	e0bffe17 	ldw	r2,-8(fp)
   44b2c:	d8800115 	stw	r2,4(sp)
   44b30:	e0bfff17 	ldw	r2,-4(fp)
   44b34:	d8800215 	stw	r2,8(sp)
   44b38:	01000044 	movi	r4,1
   44b3c:	01400044 	movi	r5,1
   44b40:	01804034 	movhi	r6,256
   44b44:	31bfffc4 	addi	r6,r6,-1
   44b48:	000f883a 	mov	r7,zero
   44b4c:	004379c0 	call	4379c <vid_print_string_alpha>
}
   44b50:	e037883a 	mov	sp,fp
   44b54:	dfc00117 	ldw	ra,4(sp)
   44b58:	df000017 	ldw	fp,0(sp)
   44b5c:	dec00204 	addi	sp,sp,8
   44b60:	f800283a 	ret

00044b64 <VPG_XLine>:


void VPG_XLine(alt_video_display *pDisplay){
   44b64:	defffe04 	addi	sp,sp,-8
   44b68:	df000115 	stw	fp,4(sp)
   44b6c:	df000104 	addi	fp,sp,4
   44b70:	e13fff15 	stw	r4,-4(fp)
return ;
   44b74:	0001883a 	nop

    // show text
    ShowInfo(pDisplay, "X Line");


}
   44b78:	e037883a 	mov	sp,fp
   44b7c:	df000017 	ldw	fp,0(sp)
   44b80:	dec00104 	addi	sp,sp,4
   44b84:	f800283a 	ret

00044b88 <VPG_ColorPanel>:


void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
   44b88:	defff204 	addi	sp,sp,-56
   44b8c:	dfc00d15 	stw	ra,52(sp)
   44b90:	df000c15 	stw	fp,48(sp)
   44b94:	df000c04 	addi	fp,sp,48
   44b98:	e13ffe15 	stw	r4,-8(fp)
   44b9c:	e17fff15 	stw	r5,-4(fp)
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
   44ba0:	e03ff515 	stw	zero,-44(fp)
   44ba4:	00001106 	br	44bec <VPG_ColorPanel+0x64>
        for(x=0;x<pDisplay->width;x++){
   44ba8:	e03ff415 	stw	zero,-48(fp)
   44bac:	00000806 	br	44bd0 <VPG_ColorPanel+0x48>
        	vid_set_pixel(x,y,Color, pDisplay);
   44bb0:	e13ff417 	ldw	r4,-48(fp)
   44bb4:	e17ff517 	ldw	r5,-44(fp)
   44bb8:	e1bfff17 	ldw	r6,-4(fp)
   44bbc:	e1fffe17 	ldw	r7,-8(fp)
   44bc0:	0041b940 	call	41b94 <vid_set_pixel>
void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
   44bc4:	e0bff417 	ldw	r2,-48(fp)
   44bc8:	10800044 	addi	r2,r2,1
   44bcc:	e0bff415 	stw	r2,-48(fp)
   44bd0:	e0bffe17 	ldw	r2,-8(fp)
   44bd4:	10800117 	ldw	r2,4(r2)
   44bd8:	e0fff417 	ldw	r3,-48(fp)
   44bdc:	18bff416 	blt	r3,r2,44bb0 <__alt_data_end+0xfffcf050>

void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
   44be0:	e0bff517 	ldw	r2,-44(fp)
   44be4:	10800044 	addi	r2,r2,1
   44be8:	e0bff515 	stw	r2,-44(fp)
   44bec:	e0bffe17 	ldw	r2,-8(fp)
   44bf0:	10800217 	ldw	r2,8(r2)
   44bf4:	e0fff517 	ldw	r3,-44(fp)
   44bf8:	18bfeb16 	blt	r3,r2,44ba8 <__alt_data_end+0xfffcf048>
        	vid_set_pixel(x,y,Color, pDisplay);
        }
    }

    // show text
    sprintf(szText,"Panel: %08xh", Color);
   44bfc:	e0bff604 	addi	r2,fp,-40
   44c00:	1009883a 	mov	r4,r2
   44c04:	014001b4 	movhi	r5,6
   44c08:	295d5904 	addi	r5,r5,30052
   44c0c:	e1bfff17 	ldw	r6,-4(fp)
   44c10:	004a5840 	call	4a584 <sprintf>
    ShowInfo(pDisplay, szText);
   44c14:	e0bff604 	addi	r2,fp,-40
   44c18:	e13ffe17 	ldw	r4,-8(fp)
   44c1c:	100b883a 	mov	r5,r2
   44c20:	0044b040 	call	44b04 <ShowInfo>



}
   44c24:	e037883a 	mov	sp,fp
   44c28:	dfc00117 	ldw	ra,4(sp)
   44c2c:	df000017 	ldw	fp,0(sp)
   44c30:	dec00204 	addi	sp,sp,8
   44c34:	f800283a 	ret

00044c38 <VPG_Grid>:

void VPG_Grid(alt_video_display *pDisplay, alt_u8 GridSize){
   44c38:	defff104 	addi	sp,sp,-60
   44c3c:	dfc00e15 	stw	ra,56(sp)
   44c40:	df000d15 	stw	fp,52(sp)
   44c44:	df000d04 	addi	fp,sp,52
   44c48:	e13ffe15 	stw	r4,-8(fp)
   44c4c:	2805883a 	mov	r2,r5
   44c50:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
   44c54:	e03ff415 	stw	zero,-48(fp)
   44c58:	00002206 	br	44ce4 <VPG_Grid+0xac>
        for(x=0;x<pDisplay->width;x++){
   44c5c:	e03ff315 	stw	zero,-52(fp)
   44c60:	00001906 	br	44cc8 <VPG_Grid+0x90>
            if (x%GridSize == 0 || y%GridSize == 0)
   44c64:	e0bfff03 	ldbu	r2,-4(fp)
   44c68:	e0fff317 	ldw	r3,-52(fp)
   44c6c:	1809883a 	mov	r4,r3
   44c70:	100b883a 	mov	r5,r2
   44c74:	00478ac0 	call	478ac <__modsi3>
   44c78:	10000626 	beq	r2,zero,44c94 <VPG_Grid+0x5c>
   44c7c:	e0bfff03 	ldbu	r2,-4(fp)
   44c80:	e0fff417 	ldw	r3,-48(fp)
   44c84:	1809883a 	mov	r4,r3
   44c88:	100b883a 	mov	r5,r2
   44c8c:	00478ac0 	call	478ac <__modsi3>
   44c90:	1000041e 	bne	r2,zero,44ca4 <VPG_Grid+0x6c>
                Value32 = WHITE_24;
   44c94:	00804034 	movhi	r2,256
   44c98:	10bfffc4 	addi	r2,r2,-1
   44c9c:	e0bff515 	stw	r2,-44(fp)
   44ca0:	00000106 	br	44ca8 <VPG_Grid+0x70>
            else
                Value32 = BLACK_24;
   44ca4:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
   44ca8:	e13ff317 	ldw	r4,-52(fp)
   44cac:	e17ff417 	ldw	r5,-48(fp)
   44cb0:	e1bff517 	ldw	r6,-44(fp)
   44cb4:	e1fffe17 	ldw	r7,-8(fp)
   44cb8:	0041b940 	call	41b94 <vid_set_pixel>
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
   44cbc:	e0bff317 	ldw	r2,-52(fp)
   44cc0:	10800044 	addi	r2,r2,1
   44cc4:	e0bff315 	stw	r2,-52(fp)
   44cc8:	e0bffe17 	ldw	r2,-8(fp)
   44ccc:	10800117 	ldw	r2,4(r2)
   44cd0:	e0fff317 	ldw	r3,-52(fp)
   44cd4:	18bfe316 	blt	r3,r2,44c64 <__alt_data_end+0xfffcf104>
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
   44cd8:	e0bff417 	ldw	r2,-48(fp)
   44cdc:	10800044 	addi	r2,r2,1
   44ce0:	e0bff415 	stw	r2,-48(fp)
   44ce4:	e0bffe17 	ldw	r2,-8(fp)
   44ce8:	10800217 	ldw	r2,8(r2)
   44cec:	e0fff417 	ldw	r3,-48(fp)
   44cf0:	18bfda16 	blt	r3,r2,44c5c <__alt_data_end+0xfffcf0fc>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"Grid%d", GridSize);
   44cf4:	e0bfff03 	ldbu	r2,-4(fp)
   44cf8:	e0fff604 	addi	r3,fp,-40
   44cfc:	1809883a 	mov	r4,r3
   44d00:	014001b4 	movhi	r5,6
   44d04:	295d5d04 	addi	r5,r5,30068
   44d08:	100d883a 	mov	r6,r2
   44d0c:	004a5840 	call	4a584 <sprintf>
    ShowInfo(pDisplay, szText);
   44d10:	e0bff604 	addi	r2,fp,-40
   44d14:	e13ffe17 	ldw	r4,-8(fp)
   44d18:	100b883a 	mov	r5,r2
   44d1c:	0044b040 	call	44b04 <ShowInfo>

}
   44d20:	e037883a 	mov	sp,fp
   44d24:	dfc00117 	ldw	ra,4(sp)
   44d28:	df000017 	ldw	fp,0(sp)
   44d2c:	dec00204 	addi	sp,sp,8
   44d30:	f800283a 	ret

00044d34 <VPG_VGrid>:

void VPG_VGrid(alt_video_display *pDisplay, alt_u8 GridSize){
   44d34:	defff104 	addi	sp,sp,-60
   44d38:	dfc00e15 	stw	ra,56(sp)
   44d3c:	df000d15 	stw	fp,52(sp)
   44d40:	df000d04 	addi	fp,sp,52
   44d44:	e13ffe15 	stw	r4,-8(fp)
   44d48:	2805883a 	mov	r2,r5
   44d4c:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
   44d50:	e03ff415 	stw	zero,-48(fp)
   44d54:	00001c06 	br	44dc8 <VPG_VGrid+0x94>
        for(x=0;x<pDisplay->width;x++){
   44d58:	e03ff315 	stw	zero,-52(fp)
   44d5c:	00001306 	br	44dac <VPG_VGrid+0x78>
            if (x%GridSize == 0)
   44d60:	e0bfff03 	ldbu	r2,-4(fp)
   44d64:	e0fff317 	ldw	r3,-52(fp)
   44d68:	1809883a 	mov	r4,r3
   44d6c:	100b883a 	mov	r5,r2
   44d70:	00478ac0 	call	478ac <__modsi3>
   44d74:	1000041e 	bne	r2,zero,44d88 <VPG_VGrid+0x54>
                Value32 = WHITE_24;
   44d78:	00804034 	movhi	r2,256
   44d7c:	10bfffc4 	addi	r2,r2,-1
   44d80:	e0bff515 	stw	r2,-44(fp)
   44d84:	00000106 	br	44d8c <VPG_VGrid+0x58>
            else
                Value32 = BLACK_24;
   44d88:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
   44d8c:	e13ff317 	ldw	r4,-52(fp)
   44d90:	e17ff417 	ldw	r5,-48(fp)
   44d94:	e1bff517 	ldw	r6,-44(fp)
   44d98:	e1fffe17 	ldw	r7,-8(fp)
   44d9c:	0041b940 	call	41b94 <vid_set_pixel>
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
   44da0:	e0bff317 	ldw	r2,-52(fp)
   44da4:	10800044 	addi	r2,r2,1
   44da8:	e0bff315 	stw	r2,-52(fp)
   44dac:	e0bffe17 	ldw	r2,-8(fp)
   44db0:	10800117 	ldw	r2,4(r2)
   44db4:	e0fff317 	ldw	r3,-52(fp)
   44db8:	18bfe916 	blt	r3,r2,44d60 <__alt_data_end+0xfffcf200>
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
   44dbc:	e0bff417 	ldw	r2,-48(fp)
   44dc0:	10800044 	addi	r2,r2,1
   44dc4:	e0bff415 	stw	r2,-48(fp)
   44dc8:	e0bffe17 	ldw	r2,-8(fp)
   44dcc:	10800217 	ldw	r2,8(r2)
   44dd0:	e0fff417 	ldw	r3,-48(fp)
   44dd4:	18bfe016 	blt	r3,r2,44d58 <__alt_data_end+0xfffcf1f8>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"VGrid%d", GridSize);
   44dd8:	e0bfff03 	ldbu	r2,-4(fp)
   44ddc:	e0fff604 	addi	r3,fp,-40
   44de0:	1809883a 	mov	r4,r3
   44de4:	014001b4 	movhi	r5,6
   44de8:	295d5f04 	addi	r5,r5,30076
   44dec:	100d883a 	mov	r6,r2
   44df0:	004a5840 	call	4a584 <sprintf>
    ShowInfo(pDisplay, szText);
   44df4:	e0bff604 	addi	r2,fp,-40
   44df8:	e13ffe17 	ldw	r4,-8(fp)
   44dfc:	100b883a 	mov	r5,r2
   44e00:	0044b040 	call	44b04 <ShowInfo>

}
   44e04:	e037883a 	mov	sp,fp
   44e08:	dfc00117 	ldw	ra,4(sp)
   44e0c:	df000017 	ldw	fp,0(sp)
   44e10:	dec00204 	addi	sp,sp,8
   44e14:	f800283a 	ret

00044e18 <VPG_HGrid>:

void VPG_HGrid(alt_video_display *pDisplay, alt_u8 GridSize){
   44e18:	defff104 	addi	sp,sp,-60
   44e1c:	dfc00e15 	stw	ra,56(sp)
   44e20:	df000d15 	stw	fp,52(sp)
   44e24:	df000d04 	addi	fp,sp,52
   44e28:	e13ffe15 	stw	r4,-8(fp)
   44e2c:	2805883a 	mov	r2,r5
   44e30:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
   44e34:	e03ff415 	stw	zero,-48(fp)
   44e38:	00001c06 	br	44eac <VPG_HGrid+0x94>
        for(x=0;x<pDisplay->width;x++){
   44e3c:	e03ff315 	stw	zero,-52(fp)
   44e40:	00001306 	br	44e90 <VPG_HGrid+0x78>
            if (y%GridSize == 0)
   44e44:	e0bfff03 	ldbu	r2,-4(fp)
   44e48:	e0fff417 	ldw	r3,-48(fp)
   44e4c:	1809883a 	mov	r4,r3
   44e50:	100b883a 	mov	r5,r2
   44e54:	00478ac0 	call	478ac <__modsi3>
   44e58:	1000041e 	bne	r2,zero,44e6c <VPG_HGrid+0x54>
                Value32 = WHITE_24;
   44e5c:	00804034 	movhi	r2,256
   44e60:	10bfffc4 	addi	r2,r2,-1
   44e64:	e0bff515 	stw	r2,-44(fp)
   44e68:	00000106 	br	44e70 <VPG_HGrid+0x58>
            else
                Value32 = BLACK_24;
   44e6c:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
   44e70:	e13ff317 	ldw	r4,-52(fp)
   44e74:	e17ff417 	ldw	r5,-48(fp)
   44e78:	e1bff517 	ldw	r6,-44(fp)
   44e7c:	e1fffe17 	ldw	r7,-8(fp)
   44e80:	0041b940 	call	41b94 <vid_set_pixel>
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
   44e84:	e0bff317 	ldw	r2,-52(fp)
   44e88:	10800044 	addi	r2,r2,1
   44e8c:	e0bff315 	stw	r2,-52(fp)
   44e90:	e0bffe17 	ldw	r2,-8(fp)
   44e94:	10800117 	ldw	r2,4(r2)
   44e98:	e0fff317 	ldw	r3,-52(fp)
   44e9c:	18bfe916 	blt	r3,r2,44e44 <__alt_data_end+0xfffcf2e4>
void VPG_HGrid(alt_video_display *pDisplay, alt_u8 GridSize){
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
   44ea0:	e0bff417 	ldw	r2,-48(fp)
   44ea4:	10800044 	addi	r2,r2,1
   44ea8:	e0bff415 	stw	r2,-48(fp)
   44eac:	e0bffe17 	ldw	r2,-8(fp)
   44eb0:	10800217 	ldw	r2,8(r2)
   44eb4:	e0fff417 	ldw	r3,-48(fp)
   44eb8:	18bfe016 	blt	r3,r2,44e3c <__alt_data_end+0xfffcf2dc>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"HGrid%d", GridSize);
   44ebc:	e0bfff03 	ldbu	r2,-4(fp)
   44ec0:	e0fff604 	addi	r3,fp,-40
   44ec4:	1809883a 	mov	r4,r3
   44ec8:	014001b4 	movhi	r5,6
   44ecc:	295d6104 	addi	r5,r5,30084
   44ed0:	100d883a 	mov	r6,r2
   44ed4:	004a5840 	call	4a584 <sprintf>
    ShowInfo(pDisplay, szText);
   44ed8:	e0bff604 	addi	r2,fp,-40
   44edc:	e13ffe17 	ldw	r4,-8(fp)
   44ee0:	100b883a 	mov	r5,r2
   44ee4:	0044b040 	call	44b04 <ShowInfo>

}
   44ee8:	e037883a 	mov	sp,fp
   44eec:	dfc00117 	ldw	ra,4(sp)
   44ef0:	df000017 	ldw	fp,0(sp)
   44ef4:	dec00204 	addi	sp,sp,8
   44ef8:	f800283a 	ret

00044efc <VPG_ColorBar>:




void VPG_ColorBar(alt_video_display *pDisplay){
   44efc:	defffa04 	addi	sp,sp,-24
   44f00:	dfc00515 	stw	ra,20(sp)
   44f04:	df000415 	stw	fp,16(sp)
   44f08:	df000404 	addi	fp,sp,16
   44f0c:	e13fff15 	stw	r4,-4(fp)
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
   44f10:	e03ffd15 	stw	zero,-12(fp)
   44f14:	00005806 	br	45078 <VPG_ColorBar+0x17c>
        for(x=0;x<pDisplay->width;x++){
   44f18:	e03ffc15 	stw	zero,-16(fp)
   44f1c:	00004f06 	br	4505c <VPG_ColorBar+0x160>
            if (x == 0 || y == 0 || x == pDisplay->width-1 || y == pDisplay->height-1){
   44f20:	e0bffc17 	ldw	r2,-16(fp)
   44f24:	10000c26 	beq	r2,zero,44f58 <VPG_ColorBar+0x5c>
   44f28:	e0bffd17 	ldw	r2,-12(fp)
   44f2c:	10000a26 	beq	r2,zero,44f58 <VPG_ColorBar+0x5c>
   44f30:	e0bfff17 	ldw	r2,-4(fp)
   44f34:	10800117 	ldw	r2,4(r2)
   44f38:	10ffffc4 	addi	r3,r2,-1
   44f3c:	e0bffc17 	ldw	r2,-16(fp)
   44f40:	18800526 	beq	r3,r2,44f58 <VPG_ColorBar+0x5c>
   44f44:	e0bfff17 	ldw	r2,-4(fp)
   44f48:	10800217 	ldw	r2,8(r2)
   44f4c:	10ffffc4 	addi	r3,r2,-1
   44f50:	e0bffd17 	ldw	r2,-12(fp)
   44f54:	1880041e 	bne	r3,r2,44f68 <VPG_ColorBar+0x6c>
                Value32 = WHITE_24;
   44f58:	00804034 	movhi	r2,256
   44f5c:	10bfffc4 	addi	r2,r2,-1
   44f60:	e0bffe15 	stw	r2,-8(fp)
   44f64:	00003506 	br	4503c <VPG_ColorBar+0x140>
            }else if (y < pDisplay->height/4){
   44f68:	e0bfff17 	ldw	r2,-4(fp)
   44f6c:	10800217 	ldw	r2,8(r2)
   44f70:	1000010e 	bge	r2,zero,44f78 <VPG_ColorBar+0x7c>
   44f74:	108000c4 	addi	r2,r2,3
   44f78:	1005d0ba 	srai	r2,r2,2
   44f7c:	e0fffd17 	ldw	r3,-12(fp)
   44f80:	1880040e 	bge	r3,r2,44f94 <VPG_ColorBar+0x98>
                // red
                Value32 = x & 0xFF;
   44f84:	e0bffc17 	ldw	r2,-16(fp)
   44f88:	10803fcc 	andi	r2,r2,255
   44f8c:	e0bffe15 	stw	r2,-8(fp)
   44f90:	00002a06 	br	4503c <VPG_ColorBar+0x140>
            }else if (y < pDisplay->height/2){
   44f94:	e0bfff17 	ldw	r2,-4(fp)
   44f98:	10800217 	ldw	r2,8(r2)
   44f9c:	1006d7fa 	srli	r3,r2,31
   44fa0:	1885883a 	add	r2,r3,r2
   44fa4:	1005d07a 	srai	r2,r2,1
   44fa8:	e0fffd17 	ldw	r3,-12(fp)
   44fac:	1880050e 	bge	r3,r2,44fc4 <VPG_ColorBar+0xc8>
                Value32 = (x & 0xFF) << 8;
   44fb0:	e0bffc17 	ldw	r2,-16(fp)
   44fb4:	1004923a 	slli	r2,r2,8
   44fb8:	10bfffcc 	andi	r2,r2,65535
   44fbc:	e0bffe15 	stw	r2,-8(fp)
   44fc0:	00001e06 	br	4503c <VPG_ColorBar+0x140>
            }else if (y < pDisplay->height*3/4){
   44fc4:	e0bfff17 	ldw	r2,-4(fp)
   44fc8:	10c00217 	ldw	r3,8(r2)
   44fcc:	1805883a 	mov	r2,r3
   44fd0:	1085883a 	add	r2,r2,r2
   44fd4:	10c5883a 	add	r2,r2,r3
   44fd8:	1000010e 	bge	r2,zero,44fe0 <VPG_ColorBar+0xe4>
   44fdc:	108000c4 	addi	r2,r2,3
   44fe0:	1005d0ba 	srai	r2,r2,2
   44fe4:	e0fffd17 	ldw	r3,-12(fp)
   44fe8:	1880050e 	bge	r3,r2,45000 <VPG_ColorBar+0x104>
                Value32 = (x & 0xFF) << 16;
   44fec:	e0bffc17 	ldw	r2,-16(fp)
   44ff0:	10803fcc 	andi	r2,r2,255
   44ff4:	1004943a 	slli	r2,r2,16
   44ff8:	e0bffe15 	stw	r2,-8(fp)
   44ffc:	00000f06 	br	4503c <VPG_ColorBar+0x140>
            }else{
                Value32 = x & 0xFF;
   45000:	e0bffc17 	ldw	r2,-16(fp)
   45004:	10803fcc 	andi	r2,r2,255
   45008:	e0bffe15 	stw	r2,-8(fp)
                Value32 |= (x & 0xFF) << 8;
   4500c:	e0bffc17 	ldw	r2,-16(fp)
   45010:	1004923a 	slli	r2,r2,8
   45014:	10bfffcc 	andi	r2,r2,65535
   45018:	e0fffe17 	ldw	r3,-8(fp)
   4501c:	1884b03a 	or	r2,r3,r2
   45020:	e0bffe15 	stw	r2,-8(fp)
                Value32 |= (x & 0xFF) << 16;
   45024:	e0bffc17 	ldw	r2,-16(fp)
   45028:	10803fcc 	andi	r2,r2,255
   4502c:	1004943a 	slli	r2,r2,16
   45030:	e0fffe17 	ldw	r3,-8(fp)
   45034:	1884b03a 	or	r2,r3,r2
   45038:	e0bffe15 	stw	r2,-8(fp)
            }
            vid_set_pixel(x,y,Value32, pDisplay);
   4503c:	e13ffc17 	ldw	r4,-16(fp)
   45040:	e17ffd17 	ldw	r5,-12(fp)
   45044:	e1bffe17 	ldw	r6,-8(fp)
   45048:	e1ffff17 	ldw	r7,-4(fp)
   4504c:	0041b940 	call	41b94 <vid_set_pixel>
void VPG_ColorBar(alt_video_display *pDisplay){
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
   45050:	e0bffc17 	ldw	r2,-16(fp)
   45054:	10800044 	addi	r2,r2,1
   45058:	e0bffc15 	stw	r2,-16(fp)
   4505c:	e0bfff17 	ldw	r2,-4(fp)
   45060:	10800117 	ldw	r2,4(r2)
   45064:	e0fffc17 	ldw	r3,-16(fp)
   45068:	18bfad16 	blt	r3,r2,44f20 <__alt_data_end+0xfffcf3c0>

void VPG_ColorBar(alt_video_display *pDisplay){
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
   4506c:	e0bffd17 	ldw	r2,-12(fp)
   45070:	10800044 	addi	r2,r2,1
   45074:	e0bffd15 	stw	r2,-12(fp)
   45078:	e0bfff17 	ldw	r2,-4(fp)
   4507c:	10800217 	ldw	r2,8(r2)
   45080:	e0fffd17 	ldw	r3,-12(fp)
   45084:	18bfa416 	blt	r3,r2,44f18 <__alt_data_end+0xfffcf3b8>

        }

    }

}
   45088:	e037883a 	mov	sp,fp
   4508c:	dfc00117 	ldw	ra,4(sp)
   45090:	df000017 	ldw	fp,0(sp)
   45094:	dec00204 	addi	sp,sp,8
   45098:	f800283a 	ret

0004509c <GUI_ShowPAT>:


void GUI_ShowPAT(alt_video_display *pDisplay, int PatId){
   4509c:	defffc04 	addi	sp,sp,-16
   450a0:	dfc00315 	stw	ra,12(sp)
   450a4:	df000215 	stw	fp,8(sp)
   450a8:	df000204 	addi	fp,sp,8
   450ac:	e13ffe15 	stw	r4,-8(fp)
   450b0:	e17fff15 	stw	r5,-4(fp)

                switch(PatId){
   450b4:	e0bfff17 	ldw	r2,-4(fp)
   450b8:	108003e8 	cmpgeui	r2,r2,15
   450bc:	1000521e 	bne	r2,zero,45208 <GUI_ShowPAT+0x16c>
   450c0:	e0bfff17 	ldw	r2,-4(fp)
   450c4:	1085883a 	add	r2,r2,r2
   450c8:	1087883a 	add	r3,r2,r2
   450cc:	00800134 	movhi	r2,4
   450d0:	10943804 	addi	r2,r2,20704
   450d4:	1885883a 	add	r2,r3,r2
   450d8:	10800017 	ldw	r2,0(r2)
   450dc:	1000683a 	jmp	r2
   450e0:	0004511c 	xori	zero,zero,4420
   450e4:	00045128 	cmpgeui	zero,zero,4420
   450e8:	0004513c 	xorhi	zero,zero,4420
   450ec:	0004514c 	andi	zero,zero,4421
   450f0:	0004515c 	xori	zero,zero,4421
   450f4:	0004516c 	andhi	zero,zero,4421
   450f8:	00045178 	rdprs	zero,zero,4421
   450fc:	00045188 	cmpgei	zero,zero,4422
   45100:	00045198 	cmpnei	zero,zero,4422
   45104:	000451a8 	cmpgeui	zero,zero,4422
   45108:	000451b8 	rdprs	zero,zero,4422
   4510c:	000451c8 	cmpgei	zero,zero,4423
   45110:	000451d8 	cmpnei	zero,zero,4423
   45114:	000451e8 	cmpgeui	zero,zero,4423
   45118:	000451f8 	rdprs	zero,zero,4423
                    case 0: VPG_ColorBar(pDisplay); break;
   4511c:	e13ffe17 	ldw	r4,-8(fp)
   45120:	0044efc0 	call	44efc <VPG_ColorBar>
   45124:	00003806 	br	45208 <GUI_ShowPAT+0x16c>
                    case 1: VPG_ColorPanel(pDisplay, WHITE_24); break;
   45128:	e13ffe17 	ldw	r4,-8(fp)
   4512c:	01404034 	movhi	r5,256
   45130:	297fffc4 	addi	r5,r5,-1
   45134:	0044b880 	call	44b88 <VPG_ColorPanel>
   45138:	00003306 	br	45208 <GUI_ShowPAT+0x16c>
                    case 2: VPG_ColorPanel(pDisplay, RED_24); break;
   4513c:	e13ffe17 	ldw	r4,-8(fp)
   45140:	01403ff4 	movhi	r5,255
   45144:	0044b880 	call	44b88 <VPG_ColorPanel>
   45148:	00002f06 	br	45208 <GUI_ShowPAT+0x16c>
                    case 3: VPG_ColorPanel(pDisplay, GREEN_24); break;
   4514c:	e13ffe17 	ldw	r4,-8(fp)
   45150:	01600014 	movui	r5,32768
   45154:	0044b880 	call	44b88 <VPG_ColorPanel>
   45158:	00002b06 	br	45208 <GUI_ShowPAT+0x16c>
                    case 4: VPG_ColorPanel(pDisplay, BLUE_24); break;
   4515c:	e13ffe17 	ldw	r4,-8(fp)
   45160:	01403fc4 	movi	r5,255
   45164:	0044b880 	call	44b88 <VPG_ColorPanel>
   45168:	00002706 	br	45208 <GUI_ShowPAT+0x16c>
                    case 5: VPG_XLine(pDisplay); break;
   4516c:	e13ffe17 	ldw	r4,-8(fp)
   45170:	0044b640 	call	44b64 <VPG_XLine>
   45174:	00002406 	br	45208 <GUI_ShowPAT+0x16c>
                    case 6: VPG_VGrid(pDisplay, 2); break;
   45178:	e13ffe17 	ldw	r4,-8(fp)
   4517c:	01400084 	movi	r5,2
   45180:	0044d340 	call	44d34 <VPG_VGrid>
   45184:	00002006 	br	45208 <GUI_ShowPAT+0x16c>
                    case 7: VPG_VGrid(pDisplay, 4); break;
   45188:	e13ffe17 	ldw	r4,-8(fp)
   4518c:	01400104 	movi	r5,4
   45190:	0044d340 	call	44d34 <VPG_VGrid>
   45194:	00001c06 	br	45208 <GUI_ShowPAT+0x16c>
                    case 8: VPG_VGrid(pDisplay, 8); break;
   45198:	e13ffe17 	ldw	r4,-8(fp)
   4519c:	01400204 	movi	r5,8
   451a0:	0044d340 	call	44d34 <VPG_VGrid>
   451a4:	00001806 	br	45208 <GUI_ShowPAT+0x16c>
                    case 9: VPG_HGrid(pDisplay, 2); break;
   451a8:	e13ffe17 	ldw	r4,-8(fp)
   451ac:	01400084 	movi	r5,2
   451b0:	0044e180 	call	44e18 <VPG_HGrid>
   451b4:	00001406 	br	45208 <GUI_ShowPAT+0x16c>
                    case 10: VPG_HGrid(pDisplay, 4); break;
   451b8:	e13ffe17 	ldw	r4,-8(fp)
   451bc:	01400104 	movi	r5,4
   451c0:	0044e180 	call	44e18 <VPG_HGrid>
   451c4:	00001006 	br	45208 <GUI_ShowPAT+0x16c>
                    case 11: VPG_HGrid(pDisplay, 8); break;
   451c8:	e13ffe17 	ldw	r4,-8(fp)
   451cc:	01400204 	movi	r5,8
   451d0:	0044e180 	call	44e18 <VPG_HGrid>
   451d4:	00000c06 	br	45208 <GUI_ShowPAT+0x16c>
                    case 12: VPG_Grid(pDisplay, 2); break;
   451d8:	e13ffe17 	ldw	r4,-8(fp)
   451dc:	01400084 	movi	r5,2
   451e0:	0044c380 	call	44c38 <VPG_Grid>
   451e4:	00000806 	br	45208 <GUI_ShowPAT+0x16c>
                    case 13: VPG_Grid(pDisplay, 4); break;
   451e8:	e13ffe17 	ldw	r4,-8(fp)
   451ec:	01400104 	movi	r5,4
   451f0:	0044c380 	call	44c38 <VPG_Grid>
   451f4:	00000406 	br	45208 <GUI_ShowPAT+0x16c>
                    case 14: VPG_Grid(pDisplay, 8); break;
   451f8:	e13ffe17 	ldw	r4,-8(fp)
   451fc:	01400204 	movi	r5,8
   45200:	0044c380 	call	44c38 <VPG_Grid>
   45204:	0001883a 	nop
                }

}
   45208:	e037883a 	mov	sp,fp
   4520c:	dfc00117 	ldw	ra,4(sp)
   45210:	df000017 	ldw	fp,0(sp)
   45214:	dec00204 	addi	sp,sp,8
   45218:	f800283a 	ret

0004521c <GUI_VPG>:

void GUI_VPG(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch){
   4521c:	defff904 	addi	sp,sp,-28
   45220:	dfc00615 	stw	ra,24(sp)
   45224:	df000515 	stw	fp,20(sp)
   45228:	df000504 	addi	fp,sp,20
   4522c:	e13ffe15 	stw	r4,-8(fp)
   45230:	e17fff15 	stw	r5,-4(fp)
	int X, Y;
	int PatId = 0;
   45234:	e03ffb15 	stw	zero,-20(fp)

    // clean screen
    vid_clean_screen(pDisplay, BLACK_24);
   45238:	e13ffe17 	ldw	r4,-8(fp)
   4523c:	000b883a 	mov	r5,zero
   45240:	00410f00 	call	410f0 <vid_clean_screen>


    VPG_ColorBar(pDisplay);
   45244:	e13ffe17 	ldw	r4,-8(fp)
   45248:	0044efc0 	call	44efc <VPG_ColorBar>

    GUI_ShowPAT(pDisplay, PatId);
   4524c:	e13ffe17 	ldw	r4,-8(fp)
   45250:	e17ffb17 	ldw	r5,-20(fp)
   45254:	004509c0 	call	4509c <GUI_ShowPAT>

    while(1){
        if (Touch_GetXY(pTouch, &X, &Y)){
   45258:	e0fffc04 	addi	r3,fp,-16
   4525c:	e0bffd04 	addi	r2,fp,-12
   45260:	e13fff17 	ldw	r4,-4(fp)
   45264:	180b883a 	mov	r5,r3
   45268:	100d883a 	mov	r6,r2
   4526c:	0046b500 	call	46b50 <Touch_GetXY>
   45270:	10001426 	beq	r2,zero,452c4 <GUI_VPG+0xa8>
            //printf(".");

            // change pattern
            PatId++;
   45274:	e0bffb17 	ldw	r2,-20(fp)
   45278:	10800044 	addi	r2,r2,1
   4527c:	e0bffb15 	stw	r2,-20(fp)
            if (PatId > 14)
   45280:	e0bffb17 	ldw	r2,-20(fp)
   45284:	108003d0 	cmplti	r2,r2,15
   45288:	1000011e 	bne	r2,zero,45290 <GUI_VPG+0x74>
                PatId = 0;
   4528c:	e03ffb15 	stw	zero,-20(fp)

            printf("PatId=%d\r\n", PatId);
   45290:	010001b4 	movhi	r4,6
   45294:	211d6304 	addi	r4,r4,30092
   45298:	e17ffb17 	ldw	r5,-20(fp)
   4529c:	004a3f00 	call	4a3f0 <printf>
            GUI_ShowPAT(pDisplay, PatId);
   452a0:	e13ffe17 	ldw	r4,-8(fp)
   452a4:	e17ffb17 	ldw	r5,-20(fp)
   452a8:	004509c0 	call	4509c <GUI_ShowPAT>
            usleep(300*1000); // debounce
   452ac:	01000174 	movhi	r4,5
   452b0:	2124f804 	addi	r4,r4,-27680
   452b4:	004c0780 	call	4c078 <usleep>
            Touch_EmptyFifo( pTouch);
   452b8:	e13fff17 	ldw	r4,-4(fp)
   452bc:	0046b180 	call	46b18 <Touch_EmptyFifo>
        }
    }
   452c0:	003fe506 	br	45258 <__alt_data_end+0xfffcf6f8>
   452c4:	003fe406 	br	45258 <__alt_data_end+0xfffcf6f8>

000452c8 <main>:
#include "system.h"

void GUI_VPG(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch);

int main()
{
   452c8:	defff704 	addi	sp,sp,-36
   452cc:	dfc00815 	stw	ra,32(sp)
   452d0:	df000715 	stw	fp,28(sp)
   452d4:	df000704 	addi	fp,sp,28
	TOUCH_HANDLE *pTouch;
	alt_video_display Display;


    const bool bVPG = ((IORD(KEY_BASE, 0x00) & 0x01) == 0x00)?TRUE:FALSE;
   452d8:	00800234 	movhi	r2,8
   452dc:	10841004 	addi	r2,r2,4160
   452e0:	10800037 	ldwio	r2,0(r2)
   452e4:	1080004c 	andi	r2,r2,1
   452e8:	1005003a 	cmpeq	r2,r2,zero
   452ec:	10803fcc 	andi	r2,r2,255
   452f0:	e0bff915 	stw	r2,-28(fp)

   printf("LT24 Demo!\n");
   452f4:	010001b4 	movhi	r4,6
   452f8:	211d6604 	addi	r4,r4,30104
   452fc:	004a4bc0 	call	4a4bc <puts>

   // init touch
   pTouch = Touch_Init(TOUCH_PANEL_SPI_BASE, TOUCH_PANEL_PEN_IRQ_N_BASE, TOUCH_PANEL_PEN_IRQ_N_IRQ);
   45300:	01000234 	movhi	r4,8
   45304:	21040004 	addi	r4,r4,4096
   45308:	01400234 	movhi	r5,8
   4530c:	29441404 	addi	r5,r5,4176
   45310:	018000c4 	movi	r6,3
   45314:	00469400 	call	46940 <Touch_Init>
   45318:	e0bffa15 	stw	r2,-24(fp)
   if (!pTouch){
   4531c:	e0bffa17 	ldw	r2,-24(fp)
   45320:	1000041e 	bne	r2,zero,45334 <main+0x6c>
       printf("Failed to init touch\r\n");
   45324:	010001b4 	movhi	r4,6
   45328:	211d6904 	addi	r4,r4,30116
   4532c:	004a4bc0 	call	4a4bc <puts>
   45330:	00000306 	br	45340 <main+0x78>
   }else{
       printf("Init touch successfully\r\n");
   45334:	010001b4 	movhi	r4,6
   45338:	211d6f04 	addi	r4,r4,30140
   4533c:	004a4bc0 	call	4a4bc <puts>

   }

   // init LCD
   LCD_Init();
   45340:	004086c0 	call	4086c <LCD_Init>
   LCD_Clear(0X0000);
   45344:	0009883a 	mov	r4,zero
   45348:	00407800 	call	40780 <LCD_Clear>

   Display.interlace = 0;
   4534c:	e03fff15 	stw	zero,-4(fp)
   Display.bytes_per_pixel = 2;
   45350:	00800084 	movi	r2,2
   45354:	e0bffe15 	stw	r2,-8(fp)
   Display.color_depth = 16;
   45358:	00800404 	movi	r2,16
   4535c:	e0bffb15 	stw	r2,-20(fp)
   Display.height = SCREEN_HEIGHT;
   45360:	00805004 	movi	r2,320
   45364:	e0bffd15 	stw	r2,-12(fp)
   Display.width = SCREEN_WIDTH;
   45368:	00803c04 	movi	r2,240
   4536c:	e0bffc15 	stw	r2,-16(fp)

   // run demo
   if (bVPG)
   45370:	e0bff917 	ldw	r2,-28(fp)
   45374:	10000526 	beq	r2,zero,4538c <main+0xc4>
       GUI_VPG(&Display, pTouch); // enter vpg mode when users press KEY0
   45378:	e0bffb04 	addi	r2,fp,-20
   4537c:	1009883a 	mov	r4,r2
   45380:	e17ffa17 	ldw	r5,-24(fp)
   45384:	004521c0 	call	4521c <GUI_VPG>
   45388:	00000406 	br	4539c <main+0xd4>
   else
	   GUI(&Display, pTouch);
   4538c:	e0bffb04 	addi	r2,fp,-20
   45390:	1009883a 	mov	r4,r2
   45394:	e17ffa17 	ldw	r5,-24(fp)
   45398:	00448240 	call	44824 <GUI>


}
   4539c:	e037883a 	mov	sp,fp
   453a0:	dfc00117 	ldw	ra,4(sp)
   453a4:	df000017 	ldw	fp,0(sp)
   453a8:	dec00204 	addi	sp,sp,8
   453ac:	f800283a 	ret

000453b0 <my_wait>:
    #define I2C_DEBUG(x)    DEBUG(x)  
#else
    #define I2C_DEBUG(x)
#endif

void my_wait(int nWait){
   453b0:	defffd04 	addi	sp,sp,-12
   453b4:	df000215 	stw	fp,8(sp)
   453b8:	df000204 	addi	fp,sp,8
   453bc:	e13fff15 	stw	r4,-4(fp)
    int i;
    i = 0;
   453c0:	e03ffe15 	stw	zero,-8(fp)
    while (i < nWait){
   453c4:	00000306 	br	453d4 <my_wait+0x24>
        i++;
   453c8:	e0bffe17 	ldw	r2,-8(fp)
   453cc:	10800044 	addi	r2,r2,1
   453d0:	e0bffe15 	stw	r2,-8(fp)
#endif

void my_wait(int nWait){
    int i;
    i = 0;
    while (i < nWait){
   453d4:	e0fffe17 	ldw	r3,-8(fp)
   453d8:	e0bfff17 	ldw	r2,-4(fp)
   453dc:	18bffa16 	blt	r3,r2,453c8 <__alt_data_end+0xfffcf868>
        i++;
     //   IOWR(LED_BASE, 0, i);
    }    
}
   453e0:	e037883a 	mov	sp,fp
   453e4:	df000017 	ldw	fp,0(sp)
   453e8:	dec00104 	addi	sp,sp,4
   453ec:	f800283a 	ret

000453f0 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
   453f0:	defff804 	addi	sp,sp,-32
   453f4:	dfc00715 	stw	ra,28(sp)
   453f8:	df000615 	stw	fp,24(sp)
   453fc:	df000604 	addi	fp,sp,24
   45400:	e13ffb15 	stw	r4,-20(fp)
   45404:	e17ffc15 	stw	r5,-16(fp)
   45408:	3009883a 	mov	r4,r6
   4540c:	3807883a 	mov	r3,r7
   45410:	e0800217 	ldw	r2,8(fp)
   45414:	e13ffd05 	stb	r4,-12(fp)
   45418:	e0fffe05 	stb	r3,-8(fp)
   4541c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
   45420:	00800044 	movi	r2,1
   45424:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   45428:	e13ffb17 	ldw	r4,-20(fp)
   4542c:	e17ffc17 	ldw	r5,-16(fp)
   45430:	0045a440 	call	45a44 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   45434:	e0bffd03 	ldbu	r2,-12(fp)
   45438:	10803fcc 	andi	r2,r2,255
   4543c:	e13ffb17 	ldw	r4,-20(fp)
   45440:	e17ffc17 	ldw	r5,-16(fp)
   45444:	100d883a 	mov	r6,r2
   45448:	0045b380 	call	45b38 <i2c_write>
   4544c:	1000041e 	bne	r2,zero,45460 <I2C_Write+0x70>
        bSuccess = FALSE;
   45450:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   45454:	010001b4 	movhi	r4,6
   45458:	211d7604 	addi	r4,r4,30168
   4545c:	00465280 	call	46528 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   45460:	e0bffa17 	ldw	r2,-24(fp)
   45464:	10000a26 	beq	r2,zero,45490 <I2C_Write+0xa0>
   45468:	e0bffe03 	ldbu	r2,-8(fp)
   4546c:	e13ffb17 	ldw	r4,-20(fp)
   45470:	e17ffc17 	ldw	r5,-16(fp)
   45474:	100d883a 	mov	r6,r2
   45478:	0045b380 	call	45b38 <i2c_write>
   4547c:	1000041e 	bne	r2,zero,45490 <I2C_Write+0xa0>
        bSuccess = FALSE;
   45480:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
   45484:	010001b4 	movhi	r4,6
   45488:	211d7e04 	addi	r4,r4,30200
   4548c:	00465280 	call	46528 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
   45490:	e0bffa17 	ldw	r2,-24(fp)
   45494:	10000a26 	beq	r2,zero,454c0 <I2C_Write+0xd0>
   45498:	e0bfff03 	ldbu	r2,-4(fp)
   4549c:	e13ffb17 	ldw	r4,-20(fp)
   454a0:	e17ffc17 	ldw	r5,-16(fp)
   454a4:	100d883a 	mov	r6,r2
   454a8:	0045b380 	call	45b38 <i2c_write>
   454ac:	1000041e 	bne	r2,zero,454c0 <I2C_Write+0xd0>
        bSuccess = FALSE;
   454b0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
   454b4:	010001b4 	movhi	r4,6
   454b8:	211d8704 	addi	r4,r4,30236
   454bc:	00465280 	call	46528 <myprintf>
    }
    i2c_stop(clk_base, data_base);
   454c0:	e13ffb17 	ldw	r4,-20(fp)
   454c4:	e17ffc17 	ldw	r5,-16(fp)
   454c8:	0045ac80 	call	45ac8 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   454cc:	0106d604 	movi	r4,7000
   454d0:	004c0780 	call	4c078 <usleep>
    
    return bSuccess;
   454d4:	e0bffa17 	ldw	r2,-24(fp)

    
}
   454d8:	e037883a 	mov	sp,fp
   454dc:	dfc00117 	ldw	ra,4(sp)
   454e0:	df000017 	ldw	fp,0(sp)
   454e4:	dec00204 	addi	sp,sp,8
   454e8:	f800283a 	ret

000454ec <I2C_Write16>:

bool I2C_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 ControlData){
   454ec:	defff704 	addi	sp,sp,-36
   454f0:	dfc00815 	stw	ra,32(sp)
   454f4:	df000715 	stw	fp,28(sp)
   454f8:	df000704 	addi	fp,sp,28
   454fc:	e13ffb15 	stw	r4,-20(fp)
   45500:	e17ffc15 	stw	r5,-16(fp)
   45504:	3009883a 	mov	r4,r6
   45508:	3807883a 	mov	r3,r7
   4550c:	e0800217 	ldw	r2,8(fp)
   45510:	e13ffd05 	stb	r4,-12(fp)
   45514:	e0fffe05 	stb	r3,-8(fp)
   45518:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
   4551c:	00800044 	movi	r2,1
   45520:	e0bff915 	stw	r2,-28(fp)
    alt_u8 HighByte, LowByte;
    //alt_u8 DeviceAddr;
    HighByte = (ControlData >> 8) & 0xFF;
   45524:	e0bfff0b 	ldhu	r2,-4(fp)
   45528:	1004d23a 	srli	r2,r2,8
   4552c:	e0bffa05 	stb	r2,-24(fp)
    LowByte = ControlData & 0xFF; 
   45530:	e0bfff0b 	ldhu	r2,-4(fp)
   45534:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   45538:	e13ffb17 	ldw	r4,-20(fp)
   4553c:	e17ffc17 	ldw	r5,-16(fp)
   45540:	0045a440 	call	45a44 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   45544:	e0bffd03 	ldbu	r2,-12(fp)
   45548:	10803fcc 	andi	r2,r2,255
   4554c:	e13ffb17 	ldw	r4,-20(fp)
   45550:	e17ffc17 	ldw	r5,-16(fp)
   45554:	100d883a 	mov	r6,r2
   45558:	0045b380 	call	45b38 <i2c_write>
   4555c:	1000041e 	bne	r2,zero,45570 <I2C_Write16+0x84>
        bSuccess = FALSE;
   45560:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   45564:	010001b4 	movhi	r4,6
   45568:	211d7604 	addi	r4,r4,30168
   4556c:	00465280 	call	46528 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   45570:	e0bff917 	ldw	r2,-28(fp)
   45574:	10000a26 	beq	r2,zero,455a0 <I2C_Write16+0xb4>
   45578:	e0bffe03 	ldbu	r2,-8(fp)
   4557c:	e13ffb17 	ldw	r4,-20(fp)
   45580:	e17ffc17 	ldw	r5,-16(fp)
   45584:	100d883a 	mov	r6,r2
   45588:	0045b380 	call	45b38 <i2c_write>
   4558c:	1000041e 	bne	r2,zero,455a0 <I2C_Write16+0xb4>
        bSuccess = FALSE;
   45590:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
   45594:	010001b4 	movhi	r4,6
   45598:	211d7e04 	addi	r4,r4,30200
   4559c:	00465280 	call	46528 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, HighByte)){  
   455a0:	e0bff917 	ldw	r2,-28(fp)
   455a4:	10000a26 	beq	r2,zero,455d0 <I2C_Write16+0xe4>
   455a8:	e0bffa03 	ldbu	r2,-24(fp)
   455ac:	e13ffb17 	ldw	r4,-20(fp)
   455b0:	e17ffc17 	ldw	r5,-16(fp)
   455b4:	100d883a 	mov	r6,r2
   455b8:	0045b380 	call	45b38 <i2c_write>
   455bc:	1000041e 	bne	r2,zero,455d0 <I2C_Write16+0xe4>
        bSuccess = FALSE;
   455c0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
   455c4:	010001b4 	movhi	r4,6
   455c8:	211d8704 	addi	r4,r4,30236
   455cc:	00465280 	call	46528 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, LowByte)){  
   455d0:	e0bff917 	ldw	r2,-28(fp)
   455d4:	10000a26 	beq	r2,zero,45600 <I2C_Write16+0x114>
   455d8:	e0bffa43 	ldbu	r2,-23(fp)
   455dc:	e13ffb17 	ldw	r4,-20(fp)
   455e0:	e17ffc17 	ldw	r5,-16(fp)
   455e4:	100d883a 	mov	r6,r2
   455e8:	0045b380 	call	45b38 <i2c_write>
   455ec:	1000041e 	bne	r2,zero,45600 <I2C_Write16+0x114>
        bSuccess = FALSE;
   455f0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
   455f4:	010001b4 	movhi	r4,6
   455f8:	211d8704 	addi	r4,r4,30236
   455fc:	00465280 	call	46528 <myprintf>
    }    
    i2c_stop(clk_base, data_base);
   45600:	e13ffb17 	ldw	r4,-20(fp)
   45604:	e17ffc17 	ldw	r5,-16(fp)
   45608:	0045ac80 	call	45ac8 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   4560c:	0106d604 	movi	r4,7000
   45610:	004c0780 	call	4c078 <usleep>
    
    return bSuccess;
   45614:	e0bff917 	ldw	r2,-28(fp)

    
}
   45618:	e037883a 	mov	sp,fp
   4561c:	dfc00117 	ldw	ra,4(sp)
   45620:	df000017 	ldw	fp,0(sp)
   45624:	dec00204 	addi	sp,sp,8
   45628:	f800283a 	ret

0004562c <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
   4562c:	defff904 	addi	sp,sp,-28
   45630:	dfc00615 	stw	ra,24(sp)
   45634:	df000515 	stw	fp,20(sp)
   45638:	df000504 	addi	fp,sp,20
   4563c:	e13ffc15 	stw	r4,-16(fp)
   45640:	e17ffd15 	stw	r5,-12(fp)
   45644:	3007883a 	mov	r3,r6
   45648:	3805883a 	mov	r2,r7
   4564c:	e0fffe05 	stb	r3,-8(fp)
   45650:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
   45654:	00800044 	movi	r2,1
   45658:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   4565c:	e13ffc17 	ldw	r4,-16(fp)
   45660:	e17ffd17 	ldw	r5,-12(fp)
   45664:	0045a440 	call	45a44 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   45668:	e0bffe03 	ldbu	r2,-8(fp)
   4566c:	10803fcc 	andi	r2,r2,255
   45670:	e13ffc17 	ldw	r4,-16(fp)
   45674:	e17ffd17 	ldw	r5,-12(fp)
   45678:	100d883a 	mov	r6,r2
   4567c:	0045b380 	call	45b38 <i2c_write>
   45680:	1000041e 	bne	r2,zero,45694 <I2C_Read+0x68>
        bSuccess = FALSE;
   45684:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(1) Fail: Address NACK!\n"));
   45688:	010001b4 	movhi	r4,6
   4568c:	211d8f04 	addi	r4,r4,30268
   45690:	00465280 	call	46528 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   45694:	e0bffb17 	ldw	r2,-20(fp)
   45698:	10000a26 	beq	r2,zero,456c4 <I2C_Read+0x98>
   4569c:	e0bfff03 	ldbu	r2,-4(fp)
   456a0:	e13ffc17 	ldw	r4,-16(fp)
   456a4:	e17ffd17 	ldw	r5,-12(fp)
   456a8:	100d883a 	mov	r6,r2
   456ac:	0045b380 	call	45b38 <i2c_write>
   456b0:	1000041e 	bne	r2,zero,456c4 <I2C_Read+0x98>
        bSuccess = FALSE;
   456b4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(2) Fail: SubAddress NACK!\n"));
   456b8:	010001b4 	movhi	r4,6
   456bc:	211d9804 	addi	r4,r4,30304
   456c0:	00465280 	call	46528 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
   456c4:	e13ffc17 	ldw	r4,-16(fp)
   456c8:	e17ffd17 	ldw	r5,-12(fp)
   456cc:	0045a440 	call	45a44 <i2c_start>
    DeviceAddr |= 1; // Read
   456d0:	e0bffe03 	ldbu	r2,-8(fp)
   456d4:	10800054 	ori	r2,r2,1
   456d8:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   456dc:	e0bffb17 	ldw	r2,-20(fp)
   456e0:	10000b26 	beq	r2,zero,45710 <I2C_Read+0xe4>
   456e4:	e0bffe03 	ldbu	r2,-8(fp)
   456e8:	10803fcc 	andi	r2,r2,255
   456ec:	e13ffc17 	ldw	r4,-16(fp)
   456f0:	e17ffd17 	ldw	r5,-12(fp)
   456f4:	100d883a 	mov	r6,r2
   456f8:	0045b380 	call	45b38 <i2c_write>
   456fc:	1000041e 	bne	r2,zero,45710 <I2C_Read+0xe4>
        bSuccess = FALSE;
   45700:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(3) Fail: Address+1 NACK!\n"));
   45704:	010001b4 	movhi	r4,6
   45708:	211da104 	addi	r4,r4,30340
   4570c:	00465280 	call	46528 <myprintf>
    }
    
    if (bSuccess){
   45710:	e0bffb17 	ldw	r2,-20(fp)
   45714:	10000526 	beq	r2,zero,4572c <I2C_Read+0x100>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
   45718:	e13ffc17 	ldw	r4,-16(fp)
   4571c:	e17ffd17 	ldw	r5,-12(fp)
   45720:	e1800217 	ldw	r6,8(fp)
   45724:	000f883a 	mov	r7,zero
   45728:	0045c980 	call	45c98 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
   4572c:	e13ffc17 	ldw	r4,-16(fp)
   45730:	e17ffd17 	ldw	r5,-12(fp)
   45734:	0045ac80 	call	45ac8 <i2c_stop>
    
    return bSuccess;
   45738:	e0bffb17 	ldw	r2,-20(fp)
}
   4573c:	e037883a 	mov	sp,fp
   45740:	dfc00117 	ldw	ra,4(sp)
   45744:	df000017 	ldw	fp,0(sp)
   45748:	dec00204 	addi	sp,sp,8
   4574c:	f800283a 	ret

00045750 <I2C_Read16>:

bool I2C_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 *pControlData){
   45750:	defff804 	addi	sp,sp,-32
   45754:	dfc00715 	stw	ra,28(sp)
   45758:	df000615 	stw	fp,24(sp)
   4575c:	df000604 	addi	fp,sp,24
   45760:	e13ffc15 	stw	r4,-16(fp)
   45764:	e17ffd15 	stw	r5,-12(fp)
   45768:	3007883a 	mov	r3,r6
   4576c:	3805883a 	mov	r2,r7
   45770:	e0fffe05 	stb	r3,-8(fp)
   45774:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
   45778:	00800044 	movi	r2,1
   4577c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   45780:	e13ffc17 	ldw	r4,-16(fp)
   45784:	e17ffd17 	ldw	r5,-12(fp)
   45788:	0045a440 	call	45a44 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   4578c:	e0bffe03 	ldbu	r2,-8(fp)
   45790:	10803fcc 	andi	r2,r2,255
   45794:	e13ffc17 	ldw	r4,-16(fp)
   45798:	e17ffd17 	ldw	r5,-12(fp)
   4579c:	100d883a 	mov	r6,r2
   457a0:	0045b380 	call	45b38 <i2c_write>
   457a4:	1000041e 	bne	r2,zero,457b8 <I2C_Read16+0x68>
        bSuccess = FALSE;
   457a8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   457ac:	010001b4 	movhi	r4,6
   457b0:	211d7604 	addi	r4,r4,30168
   457b4:	00465280 	call	46528 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   457b8:	e0bffa17 	ldw	r2,-24(fp)
   457bc:	10000a26 	beq	r2,zero,457e8 <I2C_Read16+0x98>
   457c0:	e0bfff03 	ldbu	r2,-4(fp)
   457c4:	e13ffc17 	ldw	r4,-16(fp)
   457c8:	e17ffd17 	ldw	r5,-12(fp)
   457cc:	100d883a 	mov	r6,r2
   457d0:	0045b380 	call	45b38 <i2c_write>
   457d4:	1000041e 	bne	r2,zero,457e8 <I2C_Read16+0x98>
        bSuccess = FALSE;
   457d8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
   457dc:	010001b4 	movhi	r4,6
   457e0:	211d7e04 	addi	r4,r4,30200
   457e4:	00465280 	call	46528 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
   457e8:	e13ffc17 	ldw	r4,-16(fp)
   457ec:	e17ffd17 	ldw	r5,-12(fp)
   457f0:	0045a440 	call	45a44 <i2c_start>
    DeviceAddr |= 1; // Read
   457f4:	e0bffe03 	ldbu	r2,-8(fp)
   457f8:	10800054 	ori	r2,r2,1
   457fc:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   45800:	e0bffa17 	ldw	r2,-24(fp)
   45804:	10000b26 	beq	r2,zero,45834 <I2C_Read16+0xe4>
   45808:	e0bffe03 	ldbu	r2,-8(fp)
   4580c:	10803fcc 	andi	r2,r2,255
   45810:	e13ffc17 	ldw	r4,-16(fp)
   45814:	e17ffd17 	ldw	r5,-12(fp)
   45818:	100d883a 	mov	r6,r2
   4581c:	0045b380 	call	45b38 <i2c_write>
   45820:	1000041e 	bne	r2,zero,45834 <I2C_Read16+0xe4>
        bSuccess = FALSE;
   45824:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
   45828:	010001b4 	movhi	r4,6
   4582c:	211daa04 	addi	r4,r4,30376
   45830:	00465280 	call	46528 <myprintf>
    }
    
    if (bSuccess){
   45834:	e0bffa17 	ldw	r2,-24(fp)
   45838:	10000626 	beq	r2,zero,45854 <I2C_Read16+0x104>
        i2c_read(clk_base, data_base, &HighByte, TRUE);  // read
   4583c:	e0bffb44 	addi	r2,fp,-19
   45840:	e13ffc17 	ldw	r4,-16(fp)
   45844:	e17ffd17 	ldw	r5,-12(fp)
   45848:	100d883a 	mov	r6,r2
   4584c:	01c00044 	movi	r7,1
   45850:	0045c980 	call	45c98 <i2c_read>
    }        
    if (bSuccess){
   45854:	e0bffa17 	ldw	r2,-24(fp)
   45858:	10000626 	beq	r2,zero,45874 <I2C_Read16+0x124>
        i2c_read(clk_base, data_base, &LowByte, FALSE);  // read
   4585c:	e0bffb04 	addi	r2,fp,-20
   45860:	e13ffc17 	ldw	r4,-16(fp)
   45864:	e17ffd17 	ldw	r5,-12(fp)
   45868:	100d883a 	mov	r6,r2
   4586c:	000f883a 	mov	r7,zero
   45870:	0045c980 	call	45c98 <i2c_read>
    }        
    if (bSuccess)
   45874:	e0bffa17 	ldw	r2,-24(fp)
   45878:	10000a26 	beq	r2,zero,458a4 <I2C_Read16+0x154>
        *pControlData = (HighByte << 8) | LowByte;
   4587c:	e0bffb43 	ldbu	r2,-19(fp)
   45880:	10803fcc 	andi	r2,r2,255
   45884:	1004923a 	slli	r2,r2,8
   45888:	1007883a 	mov	r3,r2
   4588c:	e0bffb03 	ldbu	r2,-20(fp)
   45890:	10803fcc 	andi	r2,r2,255
   45894:	1884b03a 	or	r2,r3,r2
   45898:	1007883a 	mov	r3,r2
   4589c:	e0800217 	ldw	r2,8(fp)
   458a0:	10c0000d 	sth	r3,0(r2)
    i2c_stop(clk_base, data_base);
   458a4:	e13ffc17 	ldw	r4,-16(fp)
   458a8:	e17ffd17 	ldw	r5,-12(fp)
   458ac:	0045ac80 	call	45ac8 <i2c_stop>
    
    return bSuccess;
   458b0:	e0bffa17 	ldw	r2,-24(fp)
}
   458b4:	e037883a 	mov	sp,fp
   458b8:	dfc00117 	ldw	ra,4(sp)
   458bc:	df000017 	ldw	fp,0(sp)
   458c0:	dec00204 	addi	sp,sp,8
   458c4:	f800283a 	ret

000458c8 <I2C_MultipleRead>:


bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pBuf, alt_u16 len){
   458c8:	defff704 	addi	sp,sp,-36
   458cc:	dfc00815 	stw	ra,32(sp)
   458d0:	df000715 	stw	fp,28(sp)
   458d4:	df000704 	addi	fp,sp,28
   458d8:	e13ffb15 	stw	r4,-20(fp)
   458dc:	e17ffc15 	stw	r5,-16(fp)
   458e0:	3009883a 	mov	r4,r6
   458e4:	3807883a 	mov	r3,r7
   458e8:	e0800317 	ldw	r2,12(fp)
   458ec:	e13ffd05 	stb	r4,-12(fp)
   458f0:	e0fffe05 	stb	r3,-8(fp)
   458f4:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
   458f8:	00800044 	movi	r2,1
   458fc:	e0bffa15 	stw	r2,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   45900:	e13ffb17 	ldw	r4,-20(fp)
   45904:	e17ffc17 	ldw	r5,-16(fp)
   45908:	0045a440 	call	45a44 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   4590c:	e0bffd03 	ldbu	r2,-12(fp)
   45910:	10803fcc 	andi	r2,r2,255
   45914:	e13ffb17 	ldw	r4,-20(fp)
   45918:	e17ffc17 	ldw	r5,-16(fp)
   4591c:	100d883a 	mov	r6,r2
   45920:	0045b380 	call	45b38 <i2c_write>
   45924:	1000041e 	bne	r2,zero,45938 <I2C_MultipleRead+0x70>
        bSuccess = FALSE;
   45928:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(1) Fail: Address NACK!\n"));
   4592c:	010001b4 	movhi	r4,6
   45930:	211db304 	addi	r4,r4,30412
   45934:	00465280 	call	46528 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   45938:	e0bffa17 	ldw	r2,-24(fp)
   4593c:	10000a26 	beq	r2,zero,45968 <I2C_MultipleRead+0xa0>
   45940:	e0bffe03 	ldbu	r2,-8(fp)
   45944:	e13ffb17 	ldw	r4,-20(fp)
   45948:	e17ffc17 	ldw	r5,-16(fp)
   4594c:	100d883a 	mov	r6,r2
   45950:	0045b380 	call	45b38 <i2c_write>
   45954:	1000041e 	bne	r2,zero,45968 <I2C_MultipleRead+0xa0>
        bSuccess = FALSE;
   45958:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(2) Fail: SubAddress NACK!\n"));
   4595c:	010001b4 	movhi	r4,6
   45960:	211dbe04 	addi	r4,r4,30456
   45964:	00465280 	call	46528 <myprintf>
    }    
    if (bSuccess)        
   45968:	e0bffa17 	ldw	r2,-24(fp)
   4596c:	10000326 	beq	r2,zero,4597c <I2C_MultipleRead+0xb4>
        i2c_start(clk_base, data_base);  // restart
   45970:	e13ffb17 	ldw	r4,-20(fp)
   45974:	e17ffc17 	ldw	r5,-16(fp)
   45978:	0045a440 	call	45a44 <i2c_start>
    DeviceAddr |= 1; // Read
   4597c:	e0bffd03 	ldbu	r2,-12(fp)
   45980:	10800054 	ori	r2,r2,1
   45984:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   45988:	e0bffa17 	ldw	r2,-24(fp)
   4598c:	10000b26 	beq	r2,zero,459bc <I2C_MultipleRead+0xf4>
   45990:	e0bffd03 	ldbu	r2,-12(fp)
   45994:	10803fcc 	andi	r2,r2,255
   45998:	e13ffb17 	ldw	r4,-20(fp)
   4599c:	e17ffc17 	ldw	r5,-16(fp)
   459a0:	100d883a 	mov	r6,r2
   459a4:	0045b380 	call	45b38 <i2c_write>
   459a8:	1000041e 	bne	r2,zero,459bc <I2C_MultipleRead+0xf4>
        bSuccess = FALSE;
   459ac:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
   459b0:	010001b4 	movhi	r4,6
   459b4:	211dc904 	addi	r4,r4,30500
   459b8:	00465280 	call	46528 <myprintf>
    }
    
    if (bSuccess){
   459bc:	e0bffa17 	ldw	r2,-24(fp)
   459c0:	10001726 	beq	r2,zero,45a20 <I2C_MultipleRead+0x158>
        for(i=0;i<len && bSuccess;i++){
   459c4:	e03ff915 	stw	zero,-28(fp)
   459c8:	00001006 	br	45a0c <I2C_MultipleRead+0x144>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
   459cc:	e0bfff0b 	ldhu	r2,-4(fp)
   459d0:	10ffffc4 	addi	r3,r2,-1
   459d4:	e0bff917 	ldw	r2,-28(fp)
   459d8:	1884c03a 	cmpne	r2,r3,r2
   459dc:	10803fcc 	andi	r2,r2,255
   459e0:	e13ffb17 	ldw	r4,-20(fp)
   459e4:	e17ffc17 	ldw	r5,-16(fp)
   459e8:	e1800217 	ldw	r6,8(fp)
   459ec:	100f883a 	mov	r7,r2
   459f0:	0045c980 	call	45c98 <i2c_read>
            pBuf++;
   459f4:	e0800217 	ldw	r2,8(fp)
   459f8:	10800044 	addi	r2,r2,1
   459fc:	e0800215 	stw	r2,8(fp)
        bSuccess = FALSE;
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   45a00:	e0bff917 	ldw	r2,-28(fp)
   45a04:	10800044 	addi	r2,r2,1
   45a08:	e0bff915 	stw	r2,-28(fp)
   45a0c:	e0bfff0b 	ldhu	r2,-4(fp)
   45a10:	e0fff917 	ldw	r3,-28(fp)
   45a14:	1880020e 	bge	r3,r2,45a20 <I2C_MultipleRead+0x158>
   45a18:	e0bffa17 	ldw	r2,-24(fp)
   45a1c:	103feb1e 	bne	r2,zero,459cc <__alt_data_end+0xfffcfe6c>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
            pBuf++;
        }            
    }        
    i2c_stop(clk_base, data_base);
   45a20:	e13ffb17 	ldw	r4,-20(fp)
   45a24:	e17ffc17 	ldw	r5,-16(fp)
   45a28:	0045ac80 	call	45ac8 <i2c_stop>
    
    return bSuccess;    
   45a2c:	e0bffa17 	ldw	r2,-24(fp)
    
}
   45a30:	e037883a 	mov	sp,fp
   45a34:	dfc00117 	ldw	ra,4(sp)
   45a38:	df000017 	ldw	fp,0(sp)
   45a3c:	dec00204 	addi	sp,sp,8
   45a40:	f800283a 	ret

00045a44 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
   45a44:	defffc04 	addi	sp,sp,-16
   45a48:	dfc00315 	stw	ra,12(sp)
   45a4c:	df000215 	stw	fp,8(sp)
   45a50:	df000204 	addi	fp,sp,8
   45a54:	e13ffe15 	stw	r4,-8(fp)
   45a58:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
   45a5c:	e0bfff17 	ldw	r2,-4(fp)
   45a60:	10800104 	addi	r2,r2,4
   45a64:	00c00044 	movi	r3,1
   45a68:	10c00035 	stwio	r3,0(r2)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
   45a6c:	e0bfff17 	ldw	r2,-4(fp)
   45a70:	00c00044 	movi	r3,1
   45a74:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
   45a78:	e0bffe17 	ldw	r2,-8(fp)
   45a7c:	00c00044 	movi	r3,1
   45a80:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
   45a84:	01000584 	movi	r4,22
   45a88:	00453b00 	call	453b0 <my_wait>
     
    SDA_LOW(data_base); // data low
   45a8c:	e0bfff17 	ldw	r2,-4(fp)
   45a90:	0007883a 	mov	r3,zero
   45a94:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
   45a98:	01000584 	movi	r4,22
   45a9c:	00453b00 	call	453b0 <my_wait>
    SCL_LOW(clk_base); // clock low
   45aa0:	e0bffe17 	ldw	r2,-8(fp)
   45aa4:	0007883a 	mov	r3,zero
   45aa8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
   45aac:	01000584 	movi	r4,22
   45ab0:	00453b00 	call	453b0 <my_wait>
}
   45ab4:	e037883a 	mov	sp,fp
   45ab8:	dfc00117 	ldw	ra,4(sp)
   45abc:	df000017 	ldw	fp,0(sp)
   45ac0:	dec00204 	addi	sp,sp,8
   45ac4:	f800283a 	ret

00045ac8 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
   45ac8:	defffc04 	addi	sp,sp,-16
   45acc:	dfc00315 	stw	ra,12(sp)
   45ad0:	df000215 	stw	fp,8(sp)
   45ad4:	df000204 	addi	fp,sp,8
   45ad8:	e13ffe15 	stw	r4,-8(fp)
   45adc:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
   45ae0:	e0bfff17 	ldw	r2,-4(fp)
   45ae4:	10800104 	addi	r2,r2,4
   45ae8:	00c00044 	movi	r3,1
   45aec:	10c00035 	stwio	r3,0(r2)
    SDA_LOW(data_base); // Data Low
   45af0:	e0bfff17 	ldw	r2,-4(fp)
   45af4:	0007883a 	mov	r3,zero
   45af8:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
   45afc:	e0bffe17 	ldw	r2,-8(fp)
   45b00:	00c00044 	movi	r3,1
   45b04:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
   45b08:	01000584 	movi	r4,22
   45b0c:	00453b00 	call	453b0 <my_wait>
    SDA_HIGH(data_base); // data high
   45b10:	e0bfff17 	ldw	r2,-4(fp)
   45b14:	00c00044 	movi	r3,1
   45b18:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
   45b1c:	01000584 	movi	r4,22
   45b20:	00453b00 	call	453b0 <my_wait>
    

    
}
   45b24:	e037883a 	mov	sp,fp
   45b28:	dfc00117 	ldw	ra,4(sp)
   45b2c:	df000017 	ldw	fp,0(sp)
   45b30:	dec00204 	addi	sp,sp,8
   45b34:	f800283a 	ret

00045b38 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
   45b38:	defff704 	addi	sp,sp,-36
   45b3c:	dfc00815 	stw	ra,32(sp)
   45b40:	df000715 	stw	fp,28(sp)
   45b44:	df000704 	addi	fp,sp,28
   45b48:	e13ffd15 	stw	r4,-12(fp)
   45b4c:	e17ffe15 	stw	r5,-8(fp)
   45b50:	3005883a 	mov	r2,r6
   45b54:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
   45b58:	00bfe004 	movi	r2,-128
   45b5c:	e0bff905 	stb	r2,-28(fp)
    int i;
    int w;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
   45b60:	e0bffe17 	ldw	r2,-8(fp)
   45b64:	10800104 	addi	r2,r2,4
   45b68:	00c00044 	movi	r3,1
   45b6c:	10c00035 	stwio	r3,0(r2)
    
    for(i=0;i<8;i++){
   45b70:	e03ffa15 	stw	zero,-24(fp)
   45b74:	00001f06 	br	45bf4 <i2c_write+0xbc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
   45b78:	e0bffd17 	ldw	r2,-12(fp)
   45b7c:	0007883a 	mov	r3,zero
   45b80:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
   45b84:	e0ffff03 	ldbu	r3,-4(fp)
   45b88:	e0bff903 	ldbu	r2,-28(fp)
   45b8c:	1884703a 	and	r2,r3,r2
   45b90:	10803fcc 	andi	r2,r2,255
   45b94:	10000426 	beq	r2,zero,45ba8 <i2c_write+0x70>
            SDA_HIGH(data_base);
   45b98:	e0bffe17 	ldw	r2,-8(fp)
   45b9c:	00c00044 	movi	r3,1
   45ba0:	10c00035 	stwio	r3,0(r2)
   45ba4:	00000306 	br	45bb4 <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
   45ba8:	e0bffe17 	ldw	r2,-8(fp)
   45bac:	0007883a 	mov	r3,zero
   45bb0:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
   45bb4:	e0bff903 	ldbu	r2,-28(fp)
   45bb8:	1004d07a 	srli	r2,r2,1
   45bbc:	e0bff905 	stb	r2,-28(fp)
        // clock high
        SCL_HIGH(clk_base);
   45bc0:	e0bffd17 	ldw	r2,-12(fp)
   45bc4:	00c00044 	movi	r3,1
   45bc8:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   45bcc:	01000584 	movi	r4,22
   45bd0:	00453b00 	call	453b0 <my_wait>
        SCL_LOW(clk_base);
   45bd4:	e0bffd17 	ldw	r2,-12(fp)
   45bd8:	0007883a 	mov	r3,zero
   45bdc:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   45be0:	01000584 	movi	r4,22
   45be4:	00453b00 	call	453b0 <my_wait>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
   45be8:	e0bffa17 	ldw	r2,-24(fp)
   45bec:	10800044 	addi	r2,r2,1
   45bf0:	e0bffa15 	stw	r2,-24(fp)
   45bf4:	e0bffa17 	ldw	r2,-24(fp)
   45bf8:	10800210 	cmplti	r2,r2,8
   45bfc:	103fde1e 	bne	r2,zero,45b78 <__alt_data_end+0xfffd0018>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
   45c00:	e0bffe17 	ldw	r2,-8(fp)
   45c04:	10800104 	addi	r2,r2,4
   45c08:	0007883a 	mov	r3,zero
   45c0c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
//------------------ wait ack for muti-touch panel
SCL_DELAY;
   45c10:	01000584 	movi	r4,22
   45c14:	00453b00 	call	453b0 <my_wait>
w = 0;
   45c18:	e03ffb15 	stw	zero,-20(fp)
while(SDA_READ(data_base) && w++ < 1000000){
   45c1c:	0001883a 	nop
   45c20:	e0bffe17 	ldw	r2,-8(fp)
   45c24:	10800037 	ldwio	r2,0(r2)
   45c28:	10000626 	beq	r2,zero,45c44 <i2c_write+0x10c>
   45c2c:	e0bffb17 	ldw	r2,-20(fp)
   45c30:	10c00044 	addi	r3,r2,1
   45c34:	e0fffb15 	stw	r3,-20(fp)
   45c38:	00c003f4 	movhi	r3,15
   45c3c:	18d08fc4 	addi	r3,r3,16959
   45c40:	18bff70e 	bge	r3,r2,45c20 <__alt_data_end+0xfffd00c0>
}    
    // clock high
    SCL_HIGH(clk_base);  // clock high
   45c44:	e0bffd17 	ldw	r2,-12(fp)
   45c48:	00c00044 	movi	r3,1
   45c4c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
   45c50:	01000584 	movi	r4,22
   45c54:	00453b00 	call	453b0 <my_wait>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
   45c58:	e0bffe17 	ldw	r2,-8(fp)
   45c5c:	10800037 	ldwio	r2,0(r2)
   45c60:	1005003a 	cmpeq	r2,r2,zero
   45c64:	10803fcc 	andi	r2,r2,255
   45c68:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
   45c6c:	e0bffd17 	ldw	r2,-12(fp)
   45c70:	0007883a 	mov	r3,zero
   45c74:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   45c78:	01000584 	movi	r4,22
   45c7c:	00453b00 	call	453b0 <my_wait>
    return bAck;
   45c80:	e0bffc17 	ldw	r2,-16(fp)
}    
   45c84:	e037883a 	mov	sp,fp
   45c88:	dfc00117 	ldw	ra,4(sp)
   45c8c:	df000017 	ldw	fp,0(sp)
   45c90:	dec00204 	addi	sp,sp,8
   45c94:	f800283a 	ret

00045c98 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
   45c98:	defff804 	addi	sp,sp,-32
   45c9c:	dfc00715 	stw	ra,28(sp)
   45ca0:	df000615 	stw	fp,24(sp)
   45ca4:	df000604 	addi	fp,sp,24
   45ca8:	e13ffc15 	stw	r4,-16(fp)
   45cac:	e17ffd15 	stw	r5,-12(fp)
   45cb0:	e1bffe15 	stw	r6,-8(fp)
   45cb4:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
   45cb8:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
   45cbc:	e0bffd17 	ldw	r2,-12(fp)
   45cc0:	10800104 	addi	r2,r2,4
   45cc4:	0007883a 	mov	r3,zero
   45cc8:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
   45ccc:	e0bffc17 	ldw	r2,-16(fp)
   45cd0:	0007883a 	mov	r3,zero
   45cd4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   45cd8:	01000584 	movi	r4,22
   45cdc:	00453b00 	call	453b0 <my_wait>

    for(i=0;i<8;i++){
   45ce0:	e03ffb15 	stw	zero,-20(fp)
   45ce4:	00001606 	br	45d40 <i2c_read+0xa8>
        Data <<= 1;
   45ce8:	e0bffa03 	ldbu	r2,-24(fp)
   45cec:	1085883a 	add	r2,r2,r2
   45cf0:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
   45cf4:	e0bffc17 	ldw	r2,-16(fp)
   45cf8:	00c00044 	movi	r3,1
   45cfc:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   45d00:	01000584 	movi	r4,22
   45d04:	00453b00 	call	453b0 <my_wait>
        if (SDA_READ(data_base))  // read data   
   45d08:	e0bffd17 	ldw	r2,-12(fp)
   45d0c:	10800037 	ldwio	r2,0(r2)
   45d10:	10000326 	beq	r2,zero,45d20 <i2c_read+0x88>
            Data |= 0x01;
   45d14:	e0bffa03 	ldbu	r2,-24(fp)
   45d18:	10800054 	ori	r2,r2,1
   45d1c:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
   45d20:	e0bffc17 	ldw	r2,-16(fp)
   45d24:	0007883a 	mov	r3,zero
   45d28:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   45d2c:	01000584 	movi	r4,22
   45d30:	00453b00 	call	453b0 <my_wait>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
   45d34:	e0bffb17 	ldw	r2,-20(fp)
   45d38:	10800044 	addi	r2,r2,1
   45d3c:	e0bffb15 	stw	r2,-20(fp)
   45d40:	e0bffb17 	ldw	r2,-20(fp)
   45d44:	10800210 	cmplti	r2,r2,8
   45d48:	103fe71e 	bne	r2,zero,45ce8 <__alt_data_end+0xfffd0188>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
   45d4c:	e0bffc17 	ldw	r2,-16(fp)
   45d50:	0007883a 	mov	r3,zero
   45d54:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
   45d58:	e0bffd17 	ldw	r2,-12(fp)
   45d5c:	10800104 	addi	r2,r2,4
   45d60:	00c00044 	movi	r3,1
   45d64:	10c00035 	stwio	r3,0(r2)
    if (bAck)
   45d68:	e0bfff17 	ldw	r2,-4(fp)
   45d6c:	10000426 	beq	r2,zero,45d80 <i2c_read+0xe8>
        SDA_LOW(data_base);
   45d70:	e0bffd17 	ldw	r2,-12(fp)
   45d74:	0007883a 	mov	r3,zero
   45d78:	10c00035 	stwio	r3,0(r2)
   45d7c:	00000306 	br	45d8c <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
   45d80:	e0bffd17 	ldw	r2,-12(fp)
   45d84:	00c00044 	movi	r3,1
   45d88:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
   45d8c:	e0bffc17 	ldw	r2,-16(fp)
   45d90:	00c00044 	movi	r3,1
   45d94:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
   45d98:	01000584 	movi	r4,22
   45d9c:	00453b00 	call	453b0 <my_wait>
    SCL_LOW(clk_base); // clock low
   45da0:	e0bffc17 	ldw	r2,-16(fp)
   45da4:	0007883a 	mov	r3,zero
   45da8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   45dac:	01000584 	movi	r4,22
   45db0:	00453b00 	call	453b0 <my_wait>
    SDA_LOW(data_base);  // data low
   45db4:	e0bffd17 	ldw	r2,-12(fp)
   45db8:	0007883a 	mov	r3,zero
   45dbc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
   45dc0:	01000584 	movi	r4,22
   45dc4:	00453b00 	call	453b0 <my_wait>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
   45dc8:	e0bffe17 	ldw	r2,-8(fp)
   45dcc:	e0fffa03 	ldbu	r3,-24(fp)
   45dd0:	10c00005 	stb	r3,0(r2)
}
   45dd4:	e037883a 	mov	sp,fp
   45dd8:	dfc00117 	ldw	ra,4(sp)
   45ddc:	df000017 	ldw	fp,0(sp)
   45de0:	dec00204 	addi	sp,sp,8
   45de4:	f800283a 	ret

00045de8 <I2CL_Write>:

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
   45de8:	defff704 	addi	sp,sp,-36
   45dec:	dfc00815 	stw	ra,32(sp)
   45df0:	df000715 	stw	fp,28(sp)
   45df4:	df000704 	addi	fp,sp,28
   45df8:	e13ffb15 	stw	r4,-20(fp)
   45dfc:	e17ffc15 	stw	r5,-16(fp)
   45e00:	3009883a 	mov	r4,r6
   45e04:	3807883a 	mov	r3,r7
   45e08:	e0800217 	ldw	r2,8(fp)
   45e0c:	e13ffd05 	stb	r4,-12(fp)
   45e10:	e0fffe0d 	sth	r3,-8(fp)
   45e14:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
   45e18:	00800044 	movi	r2,1
   45e1c:	e0bff915 	stw	r2,-28(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
   45e20:	e0bffe0b 	ldhu	r2,-8(fp)
   45e24:	1004d23a 	srli	r2,r2,8
   45e28:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
   45e2c:	e0bffe0b 	ldhu	r2,-8(fp)
   45e30:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   45e34:	e13ffb17 	ldw	r4,-20(fp)
   45e38:	e17ffc17 	ldw	r5,-16(fp)
   45e3c:	0045a440 	call	45a44 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   45e40:	e0bffd03 	ldbu	r2,-12(fp)
   45e44:	10803fcc 	andi	r2,r2,255
   45e48:	e13ffb17 	ldw	r4,-20(fp)
   45e4c:	e17ffc17 	ldw	r5,-16(fp)
   45e50:	100d883a 	mov	r6,r2
   45e54:	0045b380 	call	45b38 <i2c_write>
   45e58:	1000041e 	bne	r2,zero,45e6c <I2CL_Write+0x84>
        bSuccess = FALSE;
   45e5c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   45e60:	010001b4 	movhi	r4,6
   45e64:	211d7604 	addi	r4,r4,30168
   45e68:	00465280 	call	46528 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   45e6c:	e0bff917 	ldw	r2,-28(fp)
   45e70:	10000a26 	beq	r2,zero,45e9c <I2CL_Write+0xb4>
   45e74:	e0bffa03 	ldbu	r2,-24(fp)
   45e78:	e13ffb17 	ldw	r4,-20(fp)
   45e7c:	e17ffc17 	ldw	r5,-16(fp)
   45e80:	100d883a 	mov	r6,r2
   45e84:	0045b380 	call	45b38 <i2c_write>
   45e88:	1000041e 	bne	r2,zero,45e9c <I2CL_Write+0xb4>
        bSuccess = FALSE;
   45e8c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
   45e90:	010001b4 	movhi	r4,6
   45e94:	211dd404 	addi	r4,r4,30544
   45e98:	00465280 	call	46528 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   45e9c:	e0bff917 	ldw	r2,-28(fp)
   45ea0:	10000a26 	beq	r2,zero,45ecc <I2CL_Write+0xe4>
   45ea4:	e0bffa43 	ldbu	r2,-23(fp)
   45ea8:	e13ffb17 	ldw	r4,-20(fp)
   45eac:	e17ffc17 	ldw	r5,-16(fp)
   45eb0:	100d883a 	mov	r6,r2
   45eb4:	0045b380 	call	45b38 <i2c_write>
   45eb8:	1000041e 	bne	r2,zero,45ecc <I2CL_Write+0xe4>
        bSuccess = FALSE;
   45ebc:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
   45ec0:	010001b4 	movhi	r4,6
   45ec4:	211dde04 	addi	r4,r4,30584
   45ec8:	00465280 	call	46528 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
   45ecc:	e0bff917 	ldw	r2,-28(fp)
   45ed0:	10000a26 	beq	r2,zero,45efc <I2CL_Write+0x114>
   45ed4:	e0bfff03 	ldbu	r2,-4(fp)
   45ed8:	e13ffb17 	ldw	r4,-20(fp)
   45edc:	e17ffc17 	ldw	r5,-16(fp)
   45ee0:	100d883a 	mov	r6,r2
   45ee4:	0045b380 	call	45b38 <i2c_write>
   45ee8:	1000041e 	bne	r2,zero,45efc <I2CL_Write+0x114>
        bSuccess = FALSE;
   45eec:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
   45ef0:	010001b4 	movhi	r4,6
   45ef4:	211d8704 	addi	r4,r4,30236
   45ef8:	00465280 	call	46528 <myprintf>
    }
    i2c_stop(clk_base, data_base);
   45efc:	e13ffb17 	ldw	r4,-20(fp)
   45f00:	e17ffc17 	ldw	r5,-16(fp)
   45f04:	0045ac80 	call	45ac8 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   45f08:	0106d604 	movi	r4,7000
   45f0c:	004c0780 	call	4c078 <usleep>
    
    return bSuccess;
   45f10:	e0bff917 	ldw	r2,-28(fp)
    
}
   45f14:	e037883a 	mov	sp,fp
   45f18:	dfc00117 	ldw	ra,4(sp)
   45f1c:	df000017 	ldw	fp,0(sp)
   45f20:	dec00204 	addi	sp,sp,8
   45f24:	f800283a 	ret

00045f28 <I2CL_Read>:

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
   45f28:	defff804 	addi	sp,sp,-32
   45f2c:	dfc00715 	stw	ra,28(sp)
   45f30:	df000615 	stw	fp,24(sp)
   45f34:	df000604 	addi	fp,sp,24
   45f38:	e13ffc15 	stw	r4,-16(fp)
   45f3c:	e17ffd15 	stw	r5,-12(fp)
   45f40:	3007883a 	mov	r3,r6
   45f44:	3805883a 	mov	r2,r7
   45f48:	e0fffe05 	stb	r3,-8(fp)
   45f4c:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
   45f50:	00800044 	movi	r2,1
   45f54:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
   45f58:	e0bfff0b 	ldhu	r2,-4(fp)
   45f5c:	1004d23a 	srli	r2,r2,8
   45f60:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = ControlAddr & 0xFF; 
   45f64:	e0bfff0b 	ldhu	r2,-4(fp)
   45f68:	e0bffb45 	stb	r2,-19(fp)

    i2c_start(clk_base, data_base);
   45f6c:	e13ffc17 	ldw	r4,-16(fp)
   45f70:	e17ffd17 	ldw	r5,-12(fp)
   45f74:	0045a440 	call	45a44 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   45f78:	e0bffe03 	ldbu	r2,-8(fp)
   45f7c:	10803fcc 	andi	r2,r2,255
   45f80:	e13ffc17 	ldw	r4,-16(fp)
   45f84:	e17ffd17 	ldw	r5,-12(fp)
   45f88:	100d883a 	mov	r6,r2
   45f8c:	0045b380 	call	45b38 <i2c_write>
   45f90:	1000041e 	bne	r2,zero,45fa4 <I2CL_Read+0x7c>
        bSuccess = FALSE;
   45f94:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   45f98:	010001b4 	movhi	r4,6
   45f9c:	211d7604 	addi	r4,r4,30168
   45fa0:	00465280 	call	46528 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   45fa4:	e0bffa17 	ldw	r2,-24(fp)
   45fa8:	10000a26 	beq	r2,zero,45fd4 <I2CL_Read+0xac>
   45fac:	e0bffb03 	ldbu	r2,-20(fp)
   45fb0:	e13ffc17 	ldw	r4,-16(fp)
   45fb4:	e17ffd17 	ldw	r5,-12(fp)
   45fb8:	100d883a 	mov	r6,r2
   45fbc:	0045b380 	call	45b38 <i2c_write>
   45fc0:	1000041e 	bne	r2,zero,45fd4 <I2CL_Read+0xac>
        bSuccess = FALSE;
   45fc4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
   45fc8:	010001b4 	movhi	r4,6
   45fcc:	211dd404 	addi	r4,r4,30544
   45fd0:	00465280 	call	46528 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   45fd4:	e0bffa17 	ldw	r2,-24(fp)
   45fd8:	10000a26 	beq	r2,zero,46004 <I2CL_Read+0xdc>
   45fdc:	e0bffb43 	ldbu	r2,-19(fp)
   45fe0:	e13ffc17 	ldw	r4,-16(fp)
   45fe4:	e17ffd17 	ldw	r5,-12(fp)
   45fe8:	100d883a 	mov	r6,r2
   45fec:	0045b380 	call	45b38 <i2c_write>
   45ff0:	1000041e 	bne	r2,zero,46004 <I2CL_Read+0xdc>
        bSuccess = FALSE;
   45ff4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
   45ff8:	010001b4 	movhi	r4,6
   45ffc:	211dde04 	addi	r4,r4,30584
   46000:	00465280 	call	46528 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
   46004:	e13ffc17 	ldw	r4,-16(fp)
   46008:	e17ffd17 	ldw	r5,-12(fp)
   4600c:	0045a440 	call	45a44 <i2c_start>
    DeviceAddr |= 1; // Read
   46010:	e0bffe03 	ldbu	r2,-8(fp)
   46014:	10800054 	ori	r2,r2,1
   46018:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   4601c:	e0bffa17 	ldw	r2,-24(fp)
   46020:	10000b26 	beq	r2,zero,46050 <I2CL_Read+0x128>
   46024:	e0bffe03 	ldbu	r2,-8(fp)
   46028:	10803fcc 	andi	r2,r2,255
   4602c:	e13ffc17 	ldw	r4,-16(fp)
   46030:	e17ffd17 	ldw	r5,-12(fp)
   46034:	100d883a 	mov	r6,r2
   46038:	0045b380 	call	45b38 <i2c_write>
   4603c:	1000041e 	bne	r2,zero,46050 <I2CL_Read+0x128>
        bSuccess = FALSE;
   46040:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
   46044:	010001b4 	movhi	r4,6
   46048:	211daa04 	addi	r4,r4,30376
   4604c:	00465280 	call	46528 <myprintf>
    }
    
    if (bSuccess){
   46050:	e0bffa17 	ldw	r2,-24(fp)
   46054:	10000526 	beq	r2,zero,4606c <I2CL_Read+0x144>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
   46058:	e13ffc17 	ldw	r4,-16(fp)
   4605c:	e17ffd17 	ldw	r5,-12(fp)
   46060:	e1800217 	ldw	r6,8(fp)
   46064:	000f883a 	mov	r7,zero
   46068:	0045c980 	call	45c98 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
   4606c:	e13ffc17 	ldw	r4,-16(fp)
   46070:	e17ffd17 	ldw	r5,-12(fp)
   46074:	0045ac80 	call	45ac8 <i2c_stop>
    
    return bSuccess;    
   46078:	e0bffa17 	ldw	r2,-24(fp)
}
   4607c:	e037883a 	mov	sp,fp
   46080:	dfc00117 	ldw	ra,4(sp)
   46084:	df000017 	ldw	fp,0(sp)
   46088:	dec00204 	addi	sp,sp,8
   4608c:	f800283a 	ret

00046090 <I2CL_MultipleRead>:

// read from address 0
bool I2CL_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
   46090:	defff604 	addi	sp,sp,-40
   46094:	dfc00915 	stw	ra,36(sp)
   46098:	df000815 	stw	fp,32(sp)
   4609c:	df000804 	addi	fp,sp,32
   460a0:	e13ffb15 	stw	r4,-20(fp)
   460a4:	e17ffc15 	stw	r5,-16(fp)
   460a8:	3009883a 	mov	r4,r6
   460ac:	3807883a 	mov	r3,r7
   460b0:	e0800317 	ldw	r2,12(fp)
   460b4:	e13ffd05 	stb	r4,-12(fp)
   460b8:	e0fffe0d 	sth	r3,-8(fp)
   460bc:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
   460c0:	00800044 	movi	r2,1
   460c4:	e0bff915 	stw	r2,-28(fp)
  // alt_u8 ControlAddr = 0;
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
   460c8:	e0bffe0b 	ldhu	r2,-8(fp)
   460cc:	1004d23a 	srli	r2,r2,8
   460d0:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF;     
   460d4:	e0bffe0b 	ldhu	r2,-8(fp)
   460d8:	e0bffa45 	stb	r2,-23(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   460dc:	e13ffb17 	ldw	r4,-20(fp)
   460e0:	e17ffc17 	ldw	r5,-16(fp)
   460e4:	0045a440 	call	45a44 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   460e8:	e0bffd03 	ldbu	r2,-12(fp)
   460ec:	10803fcc 	andi	r2,r2,255
   460f0:	e13ffb17 	ldw	r4,-20(fp)
   460f4:	e17ffc17 	ldw	r5,-16(fp)
   460f8:	100d883a 	mov	r6,r2
   460fc:	0045b380 	call	45b38 <i2c_write>
   46100:	1000041e 	bne	r2,zero,46114 <I2CL_MultipleRead+0x84>
        bSuccess = FALSE;
   46104:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   46108:	010001b4 	movhi	r4,6
   4610c:	211d7604 	addi	r4,r4,30168
   46110:	00465280 	call	46528 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   46114:	e0bff917 	ldw	r2,-28(fp)
   46118:	10000a26 	beq	r2,zero,46144 <I2CL_MultipleRead+0xb4>
   4611c:	e0bffa03 	ldbu	r2,-24(fp)
   46120:	e13ffb17 	ldw	r4,-20(fp)
   46124:	e17ffc17 	ldw	r5,-16(fp)
   46128:	100d883a 	mov	r6,r2
   4612c:	0045b380 	call	45b38 <i2c_write>
   46130:	1000041e 	bne	r2,zero,46144 <I2CL_MultipleRead+0xb4>
        bSuccess = FALSE;
   46134:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
   46138:	010001b4 	movhi	r4,6
   4613c:	211dd404 	addi	r4,r4,30544
   46140:	00465280 	call	46528 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   46144:	e0bff917 	ldw	r2,-28(fp)
   46148:	10000a26 	beq	r2,zero,46174 <I2CL_MultipleRead+0xe4>
   4614c:	e0bffa43 	ldbu	r2,-23(fp)
   46150:	e13ffb17 	ldw	r4,-20(fp)
   46154:	e17ffc17 	ldw	r5,-16(fp)
   46158:	100d883a 	mov	r6,r2
   4615c:	0045b380 	call	45b38 <i2c_write>
   46160:	1000041e 	bne	r2,zero,46174 <I2CL_MultipleRead+0xe4>
        bSuccess = FALSE;
   46164:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
   46168:	010001b4 	movhi	r4,6
   4616c:	211dde04 	addi	r4,r4,30584
   46170:	00465280 	call	46528 <myprintf>
    }    
    if (bSuccess)        
   46174:	e0bff917 	ldw	r2,-28(fp)
   46178:	10000326 	beq	r2,zero,46188 <I2CL_MultipleRead+0xf8>
        i2c_start(clk_base, data_base);  // restart
   4617c:	e13ffb17 	ldw	r4,-20(fp)
   46180:	e17ffc17 	ldw	r5,-16(fp)
   46184:	0045a440 	call	45a44 <i2c_start>
    DeviceAddr |= 1; // Read
   46188:	e0bffd03 	ldbu	r2,-12(fp)
   4618c:	10800054 	ori	r2,r2,1
   46190:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   46194:	e0bff917 	ldw	r2,-28(fp)
   46198:	10000b26 	beq	r2,zero,461c8 <I2CL_MultipleRead+0x138>
   4619c:	e0bffd03 	ldbu	r2,-12(fp)
   461a0:	10803fcc 	andi	r2,r2,255
   461a4:	e13ffb17 	ldw	r4,-20(fp)
   461a8:	e17ffc17 	ldw	r5,-16(fp)
   461ac:	100d883a 	mov	r6,r2
   461b0:	0045b380 	call	45b38 <i2c_write>
   461b4:	1000041e 	bne	r2,zero,461c8 <I2CL_MultipleRead+0x138>
        bSuccess = FALSE;
   461b8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
   461bc:	010001b4 	movhi	r4,6
   461c0:	211de804 	addi	r4,r4,30624
   461c4:	00465280 	call	46528 <myprintf>
    }
    
    if (bSuccess){
   461c8:	e0bff917 	ldw	r2,-28(fp)
   461cc:	10001726 	beq	r2,zero,4622c <I2CL_MultipleRead+0x19c>
        for(i=0;i<len && bSuccess;i++){
   461d0:	e03ff815 	stw	zero,-32(fp)
   461d4:	00001006 	br	46218 <I2CL_MultipleRead+0x188>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
   461d8:	e0bff817 	ldw	r2,-32(fp)
   461dc:	e0c00217 	ldw	r3,8(fp)
   461e0:	1887883a 	add	r3,r3,r2
   461e4:	e0bfff0b 	ldhu	r2,-4(fp)
   461e8:	113fffc4 	addi	r4,r2,-1
   461ec:	e0bff817 	ldw	r2,-32(fp)
   461f0:	2084c03a 	cmpne	r2,r4,r2
   461f4:	10803fcc 	andi	r2,r2,255
   461f8:	e13ffb17 	ldw	r4,-20(fp)
   461fc:	e17ffc17 	ldw	r5,-16(fp)
   46200:	180d883a 	mov	r6,r3
   46204:	100f883a 	mov	r7,r2
   46208:	0045c980 	call	45c98 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   4620c:	e0bff817 	ldw	r2,-32(fp)
   46210:	10800044 	addi	r2,r2,1
   46214:	e0bff815 	stw	r2,-32(fp)
   46218:	e0bfff0b 	ldhu	r2,-4(fp)
   4621c:	e0fff817 	ldw	r3,-32(fp)
   46220:	1880020e 	bge	r3,r2,4622c <I2CL_MultipleRead+0x19c>
   46224:	e0bff917 	ldw	r2,-28(fp)
   46228:	103feb1e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd0678>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
   4622c:	e13ffb17 	ldw	r4,-20(fp)
   46230:	e17ffc17 	ldw	r5,-16(fp)
   46234:	0045ac80 	call	45ac8 <i2c_stop>
    
    return bSuccess;    
   46238:	e0bff917 	ldw	r2,-28(fp)
    
} 
   4623c:	e037883a 	mov	sp,fp
   46240:	dfc00117 	ldw	ra,4(sp)
   46244:	df000017 	ldw	fp,0(sp)
   46248:	dec00204 	addi	sp,sp,8
   4624c:	f800283a 	ret

00046250 <I2CL_MultipleWrite>:



bool I2CL_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
   46250:	defff604 	addi	sp,sp,-40
   46254:	dfc00915 	stw	ra,36(sp)
   46258:	df000815 	stw	fp,32(sp)
   4625c:	df000804 	addi	fp,sp,32
   46260:	e13ffb15 	stw	r4,-20(fp)
   46264:	e17ffc15 	stw	r5,-16(fp)
   46268:	3009883a 	mov	r4,r6
   4626c:	3807883a 	mov	r3,r7
   46270:	e0800317 	ldw	r2,12(fp)
   46274:	e13ffd05 	stb	r4,-12(fp)
   46278:	e0fffe0d 	sth	r3,-8(fp)
   4627c:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
   46280:	00800044 	movi	r2,1
   46284:	e0bff815 	stw	r2,-32(fp)
    alt_u8 AddrHigh, AddrLow;
    int i;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
   46288:	e0bffe0b 	ldhu	r2,-8(fp)
   4628c:	1004d23a 	srli	r2,r2,8
   46290:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
   46294:	e0bffe0b 	ldhu	r2,-8(fp)
   46298:	e0bffa45 	stb	r2,-23(fp)
    

    i2c_start(clk_base, data_base);
   4629c:	e13ffb17 	ldw	r4,-20(fp)
   462a0:	e17ffc17 	ldw	r5,-16(fp)
   462a4:	0045a440 	call	45a44 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   462a8:	e0bffd03 	ldbu	r2,-12(fp)
   462ac:	10803fcc 	andi	r2,r2,255
   462b0:	e13ffb17 	ldw	r4,-20(fp)
   462b4:	e17ffc17 	ldw	r5,-16(fp)
   462b8:	100d883a 	mov	r6,r2
   462bc:	0045b380 	call	45b38 <i2c_write>
   462c0:	1000041e 	bne	r2,zero,462d4 <I2CL_MultipleWrite+0x84>
        bSuccess = FALSE;
   462c4:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   462c8:	010001b4 	movhi	r4,6
   462cc:	211d7604 	addi	r4,r4,30168
   462d0:	00465280 	call	46528 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   462d4:	e0bff817 	ldw	r2,-32(fp)
   462d8:	10000a26 	beq	r2,zero,46304 <I2CL_MultipleWrite+0xb4>
   462dc:	e0bffa03 	ldbu	r2,-24(fp)
   462e0:	e13ffb17 	ldw	r4,-20(fp)
   462e4:	e17ffc17 	ldw	r5,-16(fp)
   462e8:	100d883a 	mov	r6,r2
   462ec:	0045b380 	call	45b38 <i2c_write>
   462f0:	1000041e 	bne	r2,zero,46304 <I2CL_MultipleWrite+0xb4>
        bSuccess = FALSE;
   462f4:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
   462f8:	010001b4 	movhi	r4,6
   462fc:	211dd404 	addi	r4,r4,30544
   46300:	00465280 	call	46528 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   46304:	e0bff817 	ldw	r2,-32(fp)
   46308:	10000a26 	beq	r2,zero,46334 <I2CL_MultipleWrite+0xe4>
   4630c:	e0bffa43 	ldbu	r2,-23(fp)
   46310:	e13ffb17 	ldw	r4,-20(fp)
   46314:	e17ffc17 	ldw	r5,-16(fp)
   46318:	100d883a 	mov	r6,r2
   4631c:	0045b380 	call	45b38 <i2c_write>
   46320:	1000041e 	bne	r2,zero,46334 <I2CL_MultipleWrite+0xe4>
        bSuccess = FALSE;
   46324:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
   46328:	010001b4 	movhi	r4,6
   4632c:	211dde04 	addi	r4,r4,30584
   46330:	00465280 	call	46528 <myprintf>
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
   46334:	e0bff817 	ldw	r2,-32(fp)
   46338:	10001926 	beq	r2,zero,463a0 <I2CL_MultipleWrite+0x150>
        for(i=0;i<len && bSuccess;i++){
   4633c:	e03ff915 	stw	zero,-28(fp)
   46340:	00000d06 	br	46378 <I2CL_MultipleWrite+0x128>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
   46344:	e0bff917 	ldw	r2,-28(fp)
   46348:	e0c00217 	ldw	r3,8(fp)
   4634c:	1885883a 	add	r2,r3,r2
   46350:	10800003 	ldbu	r2,0(r2)
   46354:	10803fcc 	andi	r2,r2,255
   46358:	e13ffb17 	ldw	r4,-20(fp)
   4635c:	e17ffc17 	ldw	r5,-16(fp)
   46360:	100d883a 	mov	r6,r2
   46364:	0045b380 	call	45b38 <i2c_write>
   46368:	e0bff815 	stw	r2,-32(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
        for(i=0;i<len && bSuccess;i++){
   4636c:	e0bff917 	ldw	r2,-28(fp)
   46370:	10800044 	addi	r2,r2,1
   46374:	e0bff915 	stw	r2,-28(fp)
   46378:	e0bfff0b 	ldhu	r2,-4(fp)
   4637c:	e0fff917 	ldw	r3,-28(fp)
   46380:	1880020e 	bge	r3,r2,4638c <I2CL_MultipleWrite+0x13c>
   46384:	e0bff817 	ldw	r2,-32(fp)
   46388:	103fee1e 	bne	r2,zero,46344 <__alt_data_end+0xfffd07e4>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
        }  
        //bSuccess = FALSE;
        if (!bSuccess)
   4638c:	e0bff817 	ldw	r2,-32(fp)
   46390:	1000031e 	bne	r2,zero,463a0 <I2CL_MultipleWrite+0x150>
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
   46394:	010001b4 	movhi	r4,6
   46398:	211d8704 	addi	r4,r4,30236
   4639c:	00465280 	call	46528 <myprintf>
    }
    i2c_stop(clk_base, data_base);
   463a0:	e13ffb17 	ldw	r4,-20(fp)
   463a4:	e17ffc17 	ldw	r5,-16(fp)
   463a8:	0045ac80 	call	45ac8 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   463ac:	0106d604 	movi	r4,7000
   463b0:	004c0780 	call	4c078 <usleep>
    
    return bSuccess;
   463b4:	e0bff817 	ldw	r2,-32(fp)
    
}
   463b8:	e037883a 	mov	sp,fp
   463bc:	dfc00117 	ldw	ra,4(sp)
   463c0:	df000017 	ldw	fp,0(sp)
   463c4:	dec00204 	addi	sp,sp,8
   463c8:	f800283a 	ret

000463cc <I2CL_Read16>:
 


bool I2CL_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 *pControlData){
   463cc:	defff604 	addi	sp,sp,-40
   463d0:	dfc00915 	stw	ra,36(sp)
   463d4:	df000815 	stw	fp,32(sp)
   463d8:	df000804 	addi	fp,sp,32
   463dc:	e13ffc15 	stw	r4,-16(fp)
   463e0:	e17ffd15 	stw	r5,-12(fp)
   463e4:	3007883a 	mov	r3,r6
   463e8:	3805883a 	mov	r2,r7
   463ec:	e0fffe05 	stb	r3,-8(fp)
   463f0:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    bSuccess = I2CL_MultipleRead(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
   463f4:	e0fffe07 	ldb	r3,-8(fp)
   463f8:	e0bfff0b 	ldhu	r2,-4(fp)
   463fc:	e13ffb04 	addi	r4,fp,-20
   46400:	d9000015 	stw	r4,0(sp)
   46404:	01000084 	movi	r4,2
   46408:	d9000115 	stw	r4,4(sp)
   4640c:	e13ffc17 	ldw	r4,-16(fp)
   46410:	e17ffd17 	ldw	r5,-12(fp)
   46414:	180d883a 	mov	r6,r3
   46418:	100f883a 	mov	r7,r2
   4641c:	00460900 	call	46090 <I2CL_MultipleRead>
   46420:	e0bffa15 	stw	r2,-24(fp)
    if (bSuccess){
   46424:	e0bffa17 	ldw	r2,-24(fp)
   46428:	10000a26 	beq	r2,zero,46454 <I2CL_Read16+0x88>
        *pControlData = (szData[0] << 8 ) | szData[1];
   4642c:	e0bffb03 	ldbu	r2,-20(fp)
   46430:	10803fcc 	andi	r2,r2,255
   46434:	1004923a 	slli	r2,r2,8
   46438:	1007883a 	mov	r3,r2
   4643c:	e0bffb43 	ldbu	r2,-19(fp)
   46440:	10803fcc 	andi	r2,r2,255
   46444:	1884b03a 	or	r2,r3,r2
   46448:	1007883a 	mov	r3,r2
   4644c:	e0800217 	ldw	r2,8(fp)
   46450:	10c0000d 	sth	r3,0(r2)
    }
    return bSuccess;    
   46454:	e0bffa17 	ldw	r2,-24(fp)
}
   46458:	e037883a 	mov	sp,fp
   4645c:	dfc00117 	ldw	ra,4(sp)
   46460:	df000017 	ldw	fp,0(sp)
   46464:	dec00204 	addi	sp,sp,8
   46468:	f800283a 	ret

0004646c <I2CL_Write16>:

bool I2CL_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 ControlData){
   4646c:	defff504 	addi	sp,sp,-44
   46470:	dfc00a15 	stw	ra,40(sp)
   46474:	df000915 	stw	fp,36(sp)
   46478:	df000904 	addi	fp,sp,36
   4647c:	e13ffb15 	stw	r4,-20(fp)
   46480:	e17ffc15 	stw	r5,-16(fp)
   46484:	3009883a 	mov	r4,r6
   46488:	3807883a 	mov	r3,r7
   4648c:	e0800217 	ldw	r2,8(fp)
   46490:	e13ffd05 	stb	r4,-12(fp)
   46494:	e0fffe0d 	sth	r3,-8(fp)
   46498:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    szData[0] = (ControlData >> 8) & 0xFF;
   4649c:	e0bfff0b 	ldhu	r2,-4(fp)
   464a0:	1004d23a 	srli	r2,r2,8
   464a4:	e0bffa05 	stb	r2,-24(fp)
    szData[1] = ControlData & 0xFF;   
   464a8:	e0bfff0b 	ldhu	r2,-4(fp)
   464ac:	e0bffa45 	stb	r2,-23(fp)
    bSuccess = I2CL_MultipleWrite(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
   464b0:	e0fffd07 	ldb	r3,-12(fp)
   464b4:	e0bffe0b 	ldhu	r2,-8(fp)
   464b8:	e13ffa04 	addi	r4,fp,-24
   464bc:	d9000015 	stw	r4,0(sp)
   464c0:	01000084 	movi	r4,2
   464c4:	d9000115 	stw	r4,4(sp)
   464c8:	e13ffb17 	ldw	r4,-20(fp)
   464cc:	e17ffc17 	ldw	r5,-16(fp)
   464d0:	180d883a 	mov	r6,r3
   464d4:	100f883a 	mov	r7,r2
   464d8:	00462500 	call	46250 <I2CL_MultipleWrite>
   464dc:	e0bff915 	stw	r2,-28(fp)
    return bSuccess;    
   464e0:	e0bff917 	ldw	r2,-28(fp)
}
   464e4:	e037883a 	mov	sp,fp
   464e8:	dfc00117 	ldw	ra,4(sp)
   464ec:	df000017 	ldw	fp,0(sp)
   464f0:	dec00204 	addi	sp,sp,8
   464f4:	f800283a 	ret

000464f8 <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
   464f8:	defffd04 	addi	sp,sp,-12
   464fc:	dfc00215 	stw	ra,8(sp)
   46500:	df000115 	stw	fp,4(sp)
   46504:	df000104 	addi	fp,sp,4
   46508:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
   4650c:	e13fff17 	ldw	r4,-4(fp)
   46510:	004a3f00 	call	4a3f0 <printf>
}
   46514:	e037883a 	mov	sp,fp
   46518:	dfc00117 	ldw	ra,4(sp)
   4651c:	df000017 	ldw	fp,0(sp)
   46520:	dec00204 	addi	sp,sp,8
   46524:	f800283a 	ret

00046528 <myprintf>:





int myprintf(char *format, ...){
   46528:	deff7804 	addi	sp,sp,-544
   4652c:	dfc08415 	stw	ra,528(sp)
   46530:	df008315 	stw	fp,524(sp)
   46534:	df008304 	addi	fp,sp,524
   46538:	e1400215 	stw	r5,8(fp)
   4653c:	e1800315 	stw	r6,12(fp)
   46540:	e1c00415 	stw	r7,16(fp)
   46544:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
   46548:	e0800204 	addi	r2,fp,8
   4654c:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
   46550:	e0bffe17 	ldw	r2,-8(fp)
   46554:	e0ff7e04 	addi	r3,fp,-520
   46558:	1809883a 	mov	r4,r3
   4655c:	01408004 	movi	r5,512
   46560:	e1bfff17 	ldw	r6,-4(fp)
   46564:	100f883a 	mov	r7,r2
   46568:	004b2800 	call	4b280 <vsnprintf>
   4656c:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
   46570:	e0bf7e04 	addi	r2,fp,-520
   46574:	1009883a 	mov	r4,r2
   46578:	00464f80 	call	464f8 <debug_output>

    return rc;    
   4657c:	e0bf7d17 	ldw	r2,-524(fp)
}
   46580:	e037883a 	mov	sp,fp
   46584:	dfc00117 	ldw	ra,4(sp)
   46588:	df000017 	ldw	fp,0(sp)
   4658c:	dec00504 	addi	sp,sp,20
   46590:	f800283a 	ret

00046594 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
   46594:	defff704 	addi	sp,sp,-36
   46598:	dfc00815 	stw	ra,32(sp)
   4659c:	df000715 	stw	fp,28(sp)
   465a0:	df000704 	addi	fp,sp,28
   465a4:	e13ffe15 	stw	r4,-8(fp)
   465a8:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
   465ac:	e03ff915 	stw	zero,-28(fp)
   465b0:	00001106 	br	465f8 <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
   465b4:	e0bff917 	ldw	r2,-28(fp)
   465b8:	e0fffe17 	ldw	r3,-8(fp)
   465bc:	1885883a 	add	r2,r3,r2
   465c0:	10800003 	ldbu	r2,0(r2)
   465c4:	10803fcc 	andi	r2,r2,255
   465c8:	e0fffa04 	addi	r3,fp,-24
   465cc:	1809883a 	mov	r4,r3
   465d0:	014001b4 	movhi	r5,6
   465d4:	295df304 	addi	r5,r5,30668
   465d8:	100d883a 	mov	r6,r2
   465dc:	004a5840 	call	4a584 <sprintf>
        DEBUG((szText));
   465e0:	e0bffa04 	addi	r2,fp,-24
   465e4:	1009883a 	mov	r4,r2
   465e8:	00465280 	call	46528 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
   465ec:	e0bff917 	ldw	r2,-28(fp)
   465f0:	10800044 	addi	r2,r2,1
   465f4:	e0bff915 	stw	r2,-28(fp)
   465f8:	e0fff917 	ldw	r3,-28(fp)
   465fc:	e0bfff17 	ldw	r2,-4(fp)
   46600:	18bfec16 	blt	r3,r2,465b4 <__alt_data_end+0xfffd0a54>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
   46604:	e0bfff17 	ldw	r2,-4(fp)
}
   46608:	e037883a 	mov	sp,fp
   4660c:	dfc00117 	ldw	ra,4(sp)
   46610:	df000017 	ldw	fp,0(sp)
   46614:	dec00204 	addi	sp,sp,8
   46618:	f800283a 	ret

0004661c <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
   4661c:	defff704 	addi	sp,sp,-36
   46620:	dfc00815 	stw	ra,32(sp)
   46624:	df000715 	stw	fp,28(sp)
   46628:	df000704 	addi	fp,sp,28
   4662c:	e13ffe15 	stw	r4,-8(fp)
   46630:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
   46634:	e03ff915 	stw	zero,-28(fp)
   46638:	00001206 	br	46684 <myprintf_dwordarray+0x68>
        sprintf(szText, "[%08X]", *(pArray+i));
   4663c:	e0bff917 	ldw	r2,-28(fp)
   46640:	1085883a 	add	r2,r2,r2
   46644:	1085883a 	add	r2,r2,r2
   46648:	e0fffe17 	ldw	r3,-8(fp)
   4664c:	1885883a 	add	r2,r3,r2
   46650:	10800017 	ldw	r2,0(r2)
   46654:	e0fffa04 	addi	r3,fp,-24
   46658:	1809883a 	mov	r4,r3
   4665c:	014001b4 	movhi	r5,6
   46660:	295df504 	addi	r5,r5,30676
   46664:	100d883a 	mov	r6,r2
   46668:	004a5840 	call	4a584 <sprintf>
        DEBUG((szText));
   4666c:	e0bffa04 	addi	r2,fp,-24
   46670:	1009883a 	mov	r4,r2
   46674:	00465280 	call	46528 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
   46678:	e0bff917 	ldw	r2,-28(fp)
   4667c:	10800044 	addi	r2,r2,1
   46680:	e0bff915 	stw	r2,-28(fp)
   46684:	e0fff917 	ldw	r3,-28(fp)
   46688:	e0bfff17 	ldw	r2,-4(fp)
   4668c:	18bfeb16 	blt	r3,r2,4663c <__alt_data_end+0xfffd0adc>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
   46690:	e0bfff17 	ldw	r2,-4(fp)
}
   46694:	e037883a 	mov	sp,fp
   46698:	dfc00117 	ldw	ra,4(sp)
   4669c:	df000017 	ldw	fp,0(sp)
   466a0:	dec00204 	addi	sp,sp,8
   466a4:	f800283a 	ret

000466a8 <QUEUE_New>:
#include "queue.h"




QUEUE_STRUCT* QUEUE_New(int nQueueNum){
   466a8:	defffb04 	addi	sp,sp,-20
   466ac:	dfc00415 	stw	ra,16(sp)
   466b0:	df000315 	stw	fp,12(sp)
   466b4:	df000304 	addi	fp,sp,12
   466b8:	e13fff15 	stw	r4,-4(fp)
    int nSize;
    QUEUE_STRUCT *pQueue;
    nSize = sizeof(QUEUE_STRUCT)+nQueueNum*sizeof(alt_u32);
   466bc:	e0bfff17 	ldw	r2,-4(fp)
   466c0:	10800144 	addi	r2,r2,5
   466c4:	1085883a 	add	r2,r2,r2
   466c8:	1085883a 	add	r2,r2,r2
   466cc:	e0bffd15 	stw	r2,-12(fp)
    pQueue = (QUEUE_STRUCT *)malloc(nSize);
   466d0:	e0bffd17 	ldw	r2,-12(fp)
   466d4:	1009883a 	mov	r4,r2
   466d8:	0049cc40 	call	49cc4 <malloc>
   466dc:	e0bffe15 	stw	r2,-8(fp)
    memset((void *)pQueue, 0, nSize);
   466e0:	e0bffd17 	ldw	r2,-12(fp)
   466e4:	e13ffe17 	ldw	r4,-8(fp)
   466e8:	000b883a 	mov	r5,zero
   466ec:	100d883a 	mov	r6,r2
   466f0:	004a3940 	call	4a394 <memset>
    pQueue->num = nQueueNum;
   466f4:	e0ffff17 	ldw	r3,-4(fp)
   466f8:	e0bffe17 	ldw	r2,-8(fp)
   466fc:	10c00015 	stw	r3,0(r2)
    return pQueue;
   46700:	e0bffe17 	ldw	r2,-8(fp)
}
   46704:	e037883a 	mov	sp,fp
   46708:	dfc00117 	ldw	ra,4(sp)
   4670c:	df000017 	ldw	fp,0(sp)
   46710:	dec00204 	addi	sp,sp,8
   46714:	f800283a 	ret

00046718 <QUEUE_Delete>:

void QUEUE_Delete(QUEUE_STRUCT *pQueue){
   46718:	defffd04 	addi	sp,sp,-12
   4671c:	dfc00215 	stw	ra,8(sp)
   46720:	df000115 	stw	fp,4(sp)
   46724:	df000104 	addi	fp,sp,4
   46728:	e13fff15 	stw	r4,-4(fp)
    free(pQueue);
   4672c:	e13fff17 	ldw	r4,-4(fp)
   46730:	0049cd80 	call	49cd8 <free>
}
   46734:	e037883a 	mov	sp,fp
   46738:	dfc00117 	ldw	ra,4(sp)
   4673c:	df000017 	ldw	fp,0(sp)
   46740:	dec00204 	addi	sp,sp,8
   46744:	f800283a 	ret

00046748 <QUEUE_IsEmpty>:

bool QUEUE_IsEmpty(QUEUE_STRUCT *pQueue){
   46748:	defffe04 	addi	sp,sp,-8
   4674c:	df000115 	stw	fp,4(sp)
   46750:	df000104 	addi	fp,sp,4
   46754:	e13fff15 	stw	r4,-4(fp)
    if (pQueue->front == pQueue->rear)
   46758:	e0bfff17 	ldw	r2,-4(fp)
   4675c:	10c00117 	ldw	r3,4(r2)
   46760:	e0bfff17 	ldw	r2,-4(fp)
   46764:	10800217 	ldw	r2,8(r2)
   46768:	1880021e 	bne	r3,r2,46774 <QUEUE_IsEmpty+0x2c>
        return TRUE;
   4676c:	00800044 	movi	r2,1
   46770:	00000106 	br	46778 <QUEUE_IsEmpty+0x30>
    return FALSE;
   46774:	0005883a 	mov	r2,zero
}
   46778:	e037883a 	mov	sp,fp
   4677c:	df000017 	ldw	fp,0(sp)
   46780:	dec00104 	addi	sp,sp,4
   46784:	f800283a 	ret

00046788 <QUEUE_IsFull>:

bool QUEUE_IsFull(QUEUE_STRUCT *pQueue){
   46788:	defffd04 	addi	sp,sp,-12
   4678c:	dfc00215 	stw	ra,8(sp)
   46790:	df000115 	stw	fp,4(sp)
   46794:	df000104 	addi	fp,sp,4
   46798:	e13fff15 	stw	r4,-4(fp)
    if (((pQueue->front+1)%pQueue->num) == pQueue->rear)
   4679c:	e0bfff17 	ldw	r2,-4(fp)
   467a0:	10800117 	ldw	r2,4(r2)
   467a4:	10c00044 	addi	r3,r2,1
   467a8:	e0bfff17 	ldw	r2,-4(fp)
   467ac:	10800017 	ldw	r2,0(r2)
   467b0:	1809883a 	mov	r4,r3
   467b4:	100b883a 	mov	r5,r2
   467b8:	00479000 	call	47900 <__umodsi3>
   467bc:	1007883a 	mov	r3,r2
   467c0:	e0bfff17 	ldw	r2,-4(fp)
   467c4:	10800217 	ldw	r2,8(r2)
   467c8:	1880021e 	bne	r3,r2,467d4 <QUEUE_IsFull+0x4c>
        return TRUE;
   467cc:	00800044 	movi	r2,1
   467d0:	00000106 	br	467d8 <QUEUE_IsFull+0x50>
    return FALSE;
   467d4:	0005883a 	mov	r2,zero
}
   467d8:	e037883a 	mov	sp,fp
   467dc:	dfc00117 	ldw	ra,4(sp)
   467e0:	df000017 	ldw	fp,0(sp)
   467e4:	dec00204 	addi	sp,sp,8
   467e8:	f800283a 	ret

000467ec <QUEUE_Push>:

bool QUEUE_Push(QUEUE_STRUCT *pQueue, alt_u32 data32){
   467ec:	defffc04 	addi	sp,sp,-16
   467f0:	dfc00315 	stw	ra,12(sp)
   467f4:	df000215 	stw	fp,8(sp)
   467f8:	df000204 	addi	fp,sp,8
   467fc:	e13ffe15 	stw	r4,-8(fp)
   46800:	e17fff15 	stw	r5,-4(fp)
    if (QUEUE_IsFull(pQueue))
   46804:	e13ffe17 	ldw	r4,-8(fp)
   46808:	00467880 	call	46788 <QUEUE_IsFull>
   4680c:	10000226 	beq	r2,zero,46818 <QUEUE_Push+0x2c>
        return FALSE;
   46810:	0005883a 	mov	r2,zero
   46814:	00001506 	br	4686c <QUEUE_Push+0x80>
    pQueue->data[pQueue->front] = data32;
   46818:	e0bffe17 	ldw	r2,-8(fp)
   4681c:	10800117 	ldw	r2,4(r2)
   46820:	e0fffe17 	ldw	r3,-8(fp)
   46824:	108000c4 	addi	r2,r2,3
   46828:	1085883a 	add	r2,r2,r2
   4682c:	1085883a 	add	r2,r2,r2
   46830:	1885883a 	add	r2,r3,r2
   46834:	e0ffff17 	ldw	r3,-4(fp)
   46838:	10c00015 	stw	r3,0(r2)
    pQueue->front = (pQueue->front+1)%pQueue->num;        
   4683c:	e0bffe17 	ldw	r2,-8(fp)
   46840:	10800117 	ldw	r2,4(r2)
   46844:	10c00044 	addi	r3,r2,1
   46848:	e0bffe17 	ldw	r2,-8(fp)
   4684c:	10800017 	ldw	r2,0(r2)
   46850:	1809883a 	mov	r4,r3
   46854:	100b883a 	mov	r5,r2
   46858:	00479000 	call	47900 <__umodsi3>
   4685c:	1007883a 	mov	r3,r2
   46860:	e0bffe17 	ldw	r2,-8(fp)
   46864:	10c00115 	stw	r3,4(r2)
    return TRUE;
   46868:	00800044 	movi	r2,1
}
   4686c:	e037883a 	mov	sp,fp
   46870:	dfc00117 	ldw	ra,4(sp)
   46874:	df000017 	ldw	fp,0(sp)
   46878:	dec00204 	addi	sp,sp,8
   4687c:	f800283a 	ret

00046880 <QUEUE_Pop>:

alt_u32 QUEUE_Pop(QUEUE_STRUCT *pQueue){
   46880:	defffc04 	addi	sp,sp,-16
   46884:	dfc00315 	stw	ra,12(sp)
   46888:	df000215 	stw	fp,8(sp)
   4688c:	df000204 	addi	fp,sp,8
   46890:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data32;
    if (QUEUE_IsEmpty(pQueue))
   46894:	e13fff17 	ldw	r4,-4(fp)
   46898:	00467480 	call	46748 <QUEUE_IsEmpty>
   4689c:	10000226 	beq	r2,zero,468a8 <QUEUE_Pop+0x28>
        return 0;
   468a0:	0005883a 	mov	r2,zero
   468a4:	00001506 	br	468fc <QUEUE_Pop+0x7c>
    data32 = pQueue->data[pQueue->rear];
   468a8:	e0bfff17 	ldw	r2,-4(fp)
   468ac:	10800217 	ldw	r2,8(r2)
   468b0:	e0ffff17 	ldw	r3,-4(fp)
   468b4:	108000c4 	addi	r2,r2,3
   468b8:	1085883a 	add	r2,r2,r2
   468bc:	1085883a 	add	r2,r2,r2
   468c0:	1885883a 	add	r2,r3,r2
   468c4:	10800017 	ldw	r2,0(r2)
   468c8:	e0bffe15 	stw	r2,-8(fp)
    pQueue->rear = (pQueue->rear+1)%pQueue->num;        
   468cc:	e0bfff17 	ldw	r2,-4(fp)
   468d0:	10800217 	ldw	r2,8(r2)
   468d4:	10c00044 	addi	r3,r2,1
   468d8:	e0bfff17 	ldw	r2,-4(fp)
   468dc:	10800017 	ldw	r2,0(r2)
   468e0:	1809883a 	mov	r4,r3
   468e4:	100b883a 	mov	r5,r2
   468e8:	00479000 	call	47900 <__umodsi3>
   468ec:	1007883a 	mov	r3,r2
   468f0:	e0bfff17 	ldw	r2,-4(fp)
   468f4:	10c00215 	stw	r3,8(r2)
    return data32;
   468f8:	e0bffe17 	ldw	r2,-8(fp)
}
   468fc:	e037883a 	mov	sp,fp
   46900:	dfc00117 	ldw	ra,4(sp)
   46904:	df000017 	ldw	fp,0(sp)
   46908:	dec00204 	addi	sp,sp,8
   4690c:	f800283a 	ret

00046910 <QUEUE_Empty>:

void QUEUE_Empty(QUEUE_STRUCT *pQueue){
   46910:	defffe04 	addi	sp,sp,-8
   46914:	df000115 	stw	fp,4(sp)
   46918:	df000104 	addi	fp,sp,4
   4691c:	e13fff15 	stw	r4,-4(fp)
    pQueue->front = 0;
   46920:	e0bfff17 	ldw	r2,-4(fp)
   46924:	10000115 	stw	zero,4(r2)
    pQueue->rear = 0;
   46928:	e0bfff17 	ldw	r2,-4(fp)
   4692c:	10000215 	stw	zero,8(r2)
}
   46930:	e037883a 	mov	sp,fp
   46934:	df000017 	ldw	fp,0(sp)
   46938:	dec00104 	addi	sp,sp,4
   4693c:	f800283a 	ret

00046940 <Touch_Init>:
bool touch_is_pen_pressed(TERASIC_TOUCH_PANEL *p);
void touch_empty_fifo(TERASIC_TOUCH_PANEL *p);
void touch_clear_input(TERASIC_TOUCH_PANEL *p);

// init touch panel
TOUCH_HANDLE Touch_Init(const alt_u32 spi_base, const alt_u32 penirq_base, const alt_u32 penirq_irq){
   46940:	defff804 	addi	sp,sp,-32
   46944:	dfc00715 	stw	ra,28(sp)
   46948:	df000615 	stw	fp,24(sp)
   4694c:	df000604 	addi	fp,sp,24
   46950:	e13ffd15 	stw	r4,-12(fp)
   46954:	e17ffe15 	stw	r5,-8(fp)
   46958:	e1bfff15 	stw	r6,-4(fp)
    bool bSuccess = TRUE;
   4695c:	00800044 	movi	r2,1
   46960:	e0bffb15 	stw	r2,-20(fp)
    
    TERASIC_TOUCH_PANEL *p;
    
    p = malloc(sizeof(TERASIC_TOUCH_PANEL));
   46964:	01001804 	movi	r4,96
   46968:	0049cc40 	call	49cc4 <malloc>
   4696c:	e0bffc15 	stw	r2,-16(fp)
    if (!p)
   46970:	e0bffc17 	ldw	r2,-16(fp)
   46974:	1000021e 	bne	r2,zero,46980 <Touch_Init+0x40>
        return p;
   46978:	e0bffc17 	ldw	r2,-16(fp)
   4697c:	00004706 	br	46a9c <Touch_Init+0x15c>

    
    //
    memset(p, 0, sizeof(TERASIC_TOUCH_PANEL));
   46980:	e13ffc17 	ldw	r4,-16(fp)
   46984:	000b883a 	mov	r5,zero
   46988:	01801804 	movi	r6,96
   4698c:	004a3940 	call	4a394 <memset>
    p->spi_base = spi_base;
   46990:	e0bffc17 	ldw	r2,-16(fp)
   46994:	e0fffd17 	ldw	r3,-12(fp)
   46998:	10c00015 	stw	r3,0(r2)
    p->penirq_base = penirq_base;
   4699c:	e0bffc17 	ldw	r2,-16(fp)
   469a0:	e0fffe17 	ldw	r3,-8(fp)
   469a4:	10c00115 	stw	r3,4(r2)
    p->irq_mask = 0x01;  // 1-pin
   469a8:	e0bffc17 	ldw	r2,-16(fp)
   469ac:	00c00044 	movi	r3,1
   469b0:	10c00315 	stw	r3,12(r2)
    p->penirq_irq = penirq_irq;
   469b4:	e0bffc17 	ldw	r2,-16(fp)
   469b8:	e0ffff17 	ldw	r3,-4(fp)
   469bc:	10c00215 	stw	r3,8(r2)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   469c0:	008001f4 	movhi	r2,7
   469c4:	10afa404 	addi	r2,r2,-16752
   469c8:	10800017 	ldw	r2,0(r2)
    p->alarm_dur = alt_ticks_per_second()/SAMPLE_RATE;
   469cc:	1009883a 	mov	r4,r2
   469d0:	01400f04 	movi	r5,60
   469d4:	00478f80 	call	478f8 <__udivsi3>
   469d8:	1007883a 	mov	r3,r2
   469dc:	e0bffc17 	ldw	r2,-16(fp)
   469e0:	10c01615 	stw	r3,88(r2)
    
    // enalbe penirq_n interrupt (P1=1, P1=0)
    touch_enable_penirq(p);    
   469e4:	e13ffc17 	ldw	r4,-16(fp)
   469e8:	0046d840 	call	46d84 <touch_enable_penirq>
    

    // enable interrupt, 1-pin
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, p->irq_mask); 
   469ec:	e0bffc17 	ldw	r2,-16(fp)
   469f0:	10800117 	ldw	r2,4(r2)
   469f4:	10800204 	addi	r2,r2,8
   469f8:	e0fffc17 	ldw	r3,-16(fp)
   469fc:	18c00317 	ldw	r3,12(r3)
   46a00:	10c00035 	stwio	r3,0(r2)
    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);
   46a04:	e0bffc17 	ldw	r2,-16(fp)
   46a08:	10800117 	ldw	r2,4(r2)
   46a0c:	10800304 	addi	r2,r2,12
   46a10:	0007883a 	mov	r3,zero
   46a14:	10c00035 	stwio	r3,0(r2)
    // register ISR
    // register callback function

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if ((alt_ic_isr_register(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,
   46a18:	e0bffc17 	ldw	r2,-16(fp)
   46a1c:	10800217 	ldw	r2,8(r2)
   46a20:	d8000015 	stw	zero,0(sp)
   46a24:	0009883a 	mov	r4,zero
   46a28:	100b883a 	mov	r5,r2
   46a2c:	01800134 	movhi	r6,4
   46a30:	319b2704 	addi	r6,r6,27804
   46a34:	e1fffc17 	ldw	r7,-16(fp)
   46a38:	004b9c80 	call	4b9c8 <alt_ic_isr_register>
   46a3c:	10000126 	beq	r2,zero,46a44 <Touch_Init+0x104>
		                   ) != 0)){
 #else
  if ((alt_irq_register(p->penirq_irq, (void *)p, touch_isr) != 0)){
 #endif
        DEBUG_OUT(("[TOUCH]register IRQ fail\n"));
        bSuccess = FALSE;
   46a40:	e03ffb15 	stw	zero,-20(fp)
    }else{        
        DEBUG_OUT(("[TOUCH]register IRQ success\n"));
    }

    if (bSuccess){    
   46a44:	e0bffb17 	ldw	r2,-20(fp)
   46a48:	10000c26 	beq	r2,zero,46a7c <Touch_Init+0x13c>
        if (alt_alarm_start(&p->alarm, p->alarm_dur, touch_alarm_callback, p) == 0){
   46a4c:	e0bffc17 	ldw	r2,-16(fp)
   46a50:	10c01004 	addi	r3,r2,64
   46a54:	e0bffc17 	ldw	r2,-16(fp)
   46a58:	10801617 	ldw	r2,88(r2)
   46a5c:	1809883a 	mov	r4,r3
   46a60:	100b883a 	mov	r5,r2
   46a64:	01800134 	movhi	r6,4
   46a68:	319c8e04 	addi	r6,r6,29240
   46a6c:	e1fffc17 	ldw	r7,-16(fp)
   46a70:	004b8880 	call	4b888 <alt_alarm_start>
   46a74:	10000126 	beq	r2,zero,46a7c <Touch_Init+0x13c>
            DEBUG_OUT(("[TOUCH]alarm start success\n"));
        }else{
            DEBUG_OUT(("[TOUCH]alarm start fail\n"));
            bSuccess = FALSE;
   46a78:	e03ffb15 	stw	zero,-20(fp)
        }
    }
    
    if (!bSuccess && p){
   46a7c:	e0bffb17 	ldw	r2,-20(fp)
   46a80:	1000051e 	bne	r2,zero,46a98 <Touch_Init+0x158>
   46a84:	e0bffc17 	ldw	r2,-16(fp)
   46a88:	10000326 	beq	r2,zero,46a98 <Touch_Init+0x158>
        free(p);
   46a8c:	e13ffc17 	ldw	r4,-16(fp)
   46a90:	0049cd80 	call	49cd8 <free>
        p = NULL;
   46a94:	e03ffc15 	stw	zero,-16(fp)
    }        
                
    return p;        
   46a98:	e0bffc17 	ldw	r2,-16(fp)
    

}
   46a9c:	e037883a 	mov	sp,fp
   46aa0:	dfc00117 	ldw	ra,4(sp)
   46aa4:	df000017 	ldw	fp,0(sp)
   46aa8:	dec00204 	addi	sp,sp,8
   46aac:	f800283a 	ret

00046ab0 <Touch_UnInit>:

// uninit touch panel
void Touch_UnInit(TOUCH_HANDLE pHandle){
   46ab0:	defffc04 	addi	sp,sp,-16
   46ab4:	dfc00315 	stw	ra,12(sp)
   46ab8:	df000215 	stw	fp,8(sp)
   46abc:	df000204 	addi	fp,sp,8
   46ac0:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
   46ac4:	e0bfff17 	ldw	r2,-4(fp)
   46ac8:	e0bffe15 	stw	r2,-8(fp)
    if (!p)
   46acc:	e0bffe17 	ldw	r2,-8(fp)
   46ad0:	1000011e 	bne	r2,zero,46ad8 <Touch_UnInit+0x28>
        return;
   46ad4:	00000b06 	br	46b04 <Touch_UnInit+0x54>
        
    // stop alarm
    alt_alarm_stop(&(p->alarm));
   46ad8:	e0bffe17 	ldw	r2,-8(fp)
   46adc:	10801004 	addi	r2,r2,64
   46ae0:	1009883a 	mov	r4,r2
   46ae4:	004bedc0 	call	4bedc <alt_alarm_stop>
    // disable irq
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, 0x00);
   46ae8:	e0bffe17 	ldw	r2,-8(fp)
   46aec:	10800117 	ldw	r2,4(r2)
   46af0:	10800204 	addi	r2,r2,8
   46af4:	0007883a 	mov	r3,zero
   46af8:	10c00035 	stwio	r3,0(r2)
    
    // zero varialbe
    free(p);
   46afc:	e13ffe17 	ldw	r4,-8(fp)
   46b00:	0049cd80 	call	49cd8 <free>
}
   46b04:	e037883a 	mov	sp,fp
   46b08:	dfc00117 	ldw	ra,4(sp)
   46b0c:	df000017 	ldw	fp,0(sp)
   46b10:	dec00204 	addi	sp,sp,8
   46b14:	f800283a 	ret

00046b18 <Touch_EmptyFifo>:


void Touch_EmptyFifo(TOUCH_HANDLE pHandle){
   46b18:	defffc04 	addi	sp,sp,-16
   46b1c:	dfc00315 	stw	ra,12(sp)
   46b20:	df000215 	stw	fp,8(sp)
   46b24:	df000204 	addi	fp,sp,8
   46b28:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
   46b2c:	e0bfff17 	ldw	r2,-4(fp)
   46b30:	e0bffe15 	stw	r2,-8(fp)
    touch_empty_fifo(p);
   46b34:	e13ffe17 	ldw	r4,-8(fp)
   46b38:	0046d140 	call	46d14 <touch_empty_fifo>
}
   46b3c:	e037883a 	mov	sp,fp
   46b40:	dfc00117 	ldw	ra,4(sp)
   46b44:	df000017 	ldw	fp,0(sp)
   46b48:	dec00204 	addi	sp,sp,8
   46b4c:	f800283a 	ret

00046b50 <Touch_GetXY>:

// get x/y from internal FIFO
bool Touch_GetXY(TOUCH_HANDLE pHandle, int *x, int *y){
   46b50:	defff904 	addi	sp,sp,-28
   46b54:	dfc00615 	stw	ra,24(sp)
   46b58:	df000515 	stw	fp,20(sp)
   46b5c:	dc000415 	stw	r16,16(sp)
   46b60:	df000504 	addi	fp,sp,20
   46b64:	e13ffc15 	stw	r4,-16(fp)
   46b68:	e17ffd15 	stw	r5,-12(fp)
   46b6c:	e1bffe15 	stw	r6,-8(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
   46b70:	e0bffc17 	ldw	r2,-16(fp)
   46b74:	e0bffb15 	stw	r2,-20(fp)
    if (!p)
   46b78:	e0bffb17 	ldw	r2,-20(fp)
   46b7c:	1000021e 	bne	r2,zero,46b88 <Touch_GetXY+0x38>
        return FALSE;    
   46b80:	0005883a 	mov	r2,zero
   46b84:	00003f06 	br	46c84 <Touch_GetXY+0x134>
    
    if (p->fifo_front == p->fifo_rear){
   46b88:	e0bffb17 	ldw	r2,-20(fp)
   46b8c:	10c0040b 	ldhu	r3,16(r2)
   46b90:	e0bffb17 	ldw	r2,-20(fp)
   46b94:	1080048b 	ldhu	r2,18(r2)
   46b98:	18ffffcc 	andi	r3,r3,65535
   46b9c:	10bfffcc 	andi	r2,r2,65535
   46ba0:	1880021e 	bne	r3,r2,46bac <Touch_GetXY+0x5c>
        // empty
        return FALSE;
   46ba4:	0005883a 	mov	r2,zero
   46ba8:	00003606 	br	46c84 <Touch_GetXY+0x134>
    }
    *x = p->fifo_x[p->fifo_rear];
   46bac:	e0bffb17 	ldw	r2,-20(fp)
   46bb0:	1080048b 	ldhu	r2,18(r2)
   46bb4:	10bfffcc 	andi	r2,r2,65535
   46bb8:	e0fffb17 	ldw	r3,-20(fp)
   46bbc:	10800284 	addi	r2,r2,10
   46bc0:	1085883a 	add	r2,r2,r2
   46bc4:	1885883a 	add	r2,r3,r2
   46bc8:	1080000b 	ldhu	r2,0(r2)
   46bcc:	10ffffcc 	andi	r3,r2,65535
   46bd0:	e0bffd17 	ldw	r2,-12(fp)
   46bd4:	10c00015 	stw	r3,0(r2)
    *y = p->fifo_y[p->fifo_rear];
   46bd8:	e0bffb17 	ldw	r2,-20(fp)
   46bdc:	1080048b 	ldhu	r2,18(r2)
   46be0:	10bfffcc 	andi	r2,r2,65535
   46be4:	e0fffb17 	ldw	r3,-20(fp)
   46be8:	10800504 	addi	r2,r2,20
   46bec:	1085883a 	add	r2,r2,r2
   46bf0:	1885883a 	add	r2,r3,r2
   46bf4:	1080000b 	ldhu	r2,0(r2)
   46bf8:	10ffffcc 	andi	r3,r2,65535
   46bfc:	e0bffe17 	ldw	r2,-8(fp)
   46c00:	10c00015 	stw	r3,0(r2)
    //
    p->fifo_rear++;
   46c04:	e0bffb17 	ldw	r2,-20(fp)
   46c08:	1080048b 	ldhu	r2,18(r2)
   46c0c:	10800044 	addi	r2,r2,1
   46c10:	1007883a 	mov	r3,r2
   46c14:	e0bffb17 	ldw	r2,-20(fp)
   46c18:	10c0048d 	sth	r3,18(r2)
    p->fifo_rear %= FIFO_SIZE;
   46c1c:	e0bffb17 	ldw	r2,-20(fp)
   46c20:	1080048b 	ldhu	r2,18(r2)
   46c24:	10bfffcc 	andi	r2,r2,65535
   46c28:	1009883a 	mov	r4,r2
   46c2c:	01400284 	movi	r5,10
   46c30:	00479000 	call	47900 <__umodsi3>
   46c34:	1007883a 	mov	r3,r2
   46c38:	e0bffb17 	ldw	r2,-20(fp)
   46c3c:	10c0048d 	sth	r3,18(r2)
    //
    // translate
    touch_xy_transform(x, y);
   46c40:	e13ffd17 	ldw	r4,-12(fp)
   46c44:	e17ffe17 	ldw	r5,-8(fp)
   46c48:	00472b00 	call	472b0 <touch_xy_transform>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   46c4c:	008001f4 	movhi	r2,7
   46c50:	10afa504 	addi	r2,r2,-16748
   46c54:	10800017 	ldw	r2,0(r2)

    DEBUG_OUT("[TOUCH] x=%d, y=%d\n", *x,*y);
//    touch_clear_input(p);
//    touch_empty_fifo(p);
    p->next_active_time = alt_nticks() + ACTIVE_DELAY_TIME;
   46c58:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   46c5c:	008001f4 	movhi	r2,7
   46c60:	10afa404 	addi	r2,r2,-16752
   46c64:	10800017 	ldw	r2,0(r2)
   46c68:	1009883a 	mov	r4,r2
   46c6c:	01400f04 	movi	r5,60
   46c70:	00478f80 	call	478f8 <__udivsi3>
   46c74:	8087883a 	add	r3,r16,r2
   46c78:	e0bffb17 	ldw	r2,-20(fp)
   46c7c:	10c01715 	stw	r3,92(r2)
    
    return TRUE;
   46c80:	00800044 	movi	r2,1
}
   46c84:	e6ffff04 	addi	sp,fp,-4
   46c88:	dfc00217 	ldw	ra,8(sp)
   46c8c:	df000117 	ldw	fp,4(sp)
   46c90:	dc000017 	ldw	r16,0(sp)
   46c94:	dec00304 	addi	sp,sp,12
   46c98:	f800283a 	ret

00046c9c <touch_isr>:



// penirq_n ISR
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
void touch_isr(void* context){
   46c9c:	defffb04 	addi	sp,sp,-20
   46ca0:	dfc00415 	stw	ra,16(sp)
   46ca4:	df000315 	stw	fp,12(sp)
   46ca8:	df000304 	addi	fp,sp,12
   46cac:	e13fff15 	stw	r4,-4(fp)
#else
void touch_isr(void* context, alt_u32 id){
#endif
    alt_u8 mask;
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)context;
   46cb0:	e0bfff17 	ldw	r2,-4(fp)
   46cb4:	e0bffd15 	stw	r2,-12(fp)

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_disable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
   46cb8:	0009883a 	mov	r4,zero
   46cbc:	014000c4 	movi	r5,3
   46cc0:	004bab40 	call	4bab4 <alt_ic_irq_disable>
#else
    alt_irq_disable(id);
#endif

    // get the edge capture mask
    mask = IORD_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base);
   46cc4:	e0bffd17 	ldw	r2,-12(fp)
   46cc8:	10800117 	ldw	r2,4(r2)
   46ccc:	10800304 	addi	r2,r2,12
   46cd0:	10800037 	ldwio	r2,0(r2)
   46cd4:	e0bffe05 	stb	r2,-8(fp)
    //if ((mask & Touch.irq_mask) == 0)  // 1-pin
    //    return;
    DEBUG_OUT("Touched!!\n");
    usleep(1000);
   46cd8:	0100fa04 	movi	r4,1000
   46cdc:	004c0780 	call	4c078 <usleep>
    }
    IOWR(PIO_RED_LED_BASE, 0, Touch.pen_pressed);
#endif                    
    
    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);    
   46ce0:	e0bffd17 	ldw	r2,-12(fp)
   46ce4:	10800117 	ldw	r2,4(r2)
   46ce8:	10800304 	addi	r2,r2,12
   46cec:	0007883a 	mov	r3,zero
   46cf0:	10c00035 	stwio	r3,0(r2)
    
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_enable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
   46cf4:	0009883a 	mov	r4,zero
   46cf8:	014000c4 	movi	r5,3
   46cfc:	004ba180 	call	4ba18 <alt_ic_irq_enable>
#else
    alt_irq_enable(id);
#endif

}
   46d00:	e037883a 	mov	sp,fp
   46d04:	dfc00117 	ldw	ra,4(sp)
   46d08:	df000017 	ldw	fp,0(sp)
   46d0c:	dec00204 	addi	sp,sp,8
   46d10:	f800283a 	ret

00046d14 <touch_empty_fifo>:

void touch_empty_fifo(TERASIC_TOUCH_PANEL *p){
   46d14:	defffe04 	addi	sp,sp,-8
   46d18:	df000115 	stw	fp,4(sp)
   46d1c:	df000104 	addi	fp,sp,4
   46d20:	e13fff15 	stw	r4,-4(fp)
    p->fifo_rear = p->fifo_front;
   46d24:	e0bfff17 	ldw	r2,-4(fp)
   46d28:	10c0040b 	ldhu	r3,16(r2)
   46d2c:	e0bfff17 	ldw	r2,-4(fp)
   46d30:	10c0048d 	sth	r3,18(r2)
}
   46d34:	e037883a 	mov	sp,fp
   46d38:	df000017 	ldw	fp,0(sp)
   46d3c:	dec00104 	addi	sp,sp,4
   46d40:	f800283a 	ret

00046d44 <touch_is_pen_pressed>:

bool touch_is_pen_pressed(TERASIC_TOUCH_PANEL *p){
   46d44:	defffd04 	addi	sp,sp,-12
   46d48:	df000215 	stw	fp,8(sp)
   46d4c:	df000204 	addi	fp,sp,8
   46d50:	e13fff15 	stw	r4,-4(fp)
    bool bPressed;
    bPressed = (IORD(p->penirq_base, 0) & 0x01)?FALSE:TRUE;
   46d54:	e0bfff17 	ldw	r2,-4(fp)
   46d58:	10800117 	ldw	r2,4(r2)
   46d5c:	10800037 	ldwio	r2,0(r2)
   46d60:	1080004c 	andi	r2,r2,1
   46d64:	1005003a 	cmpeq	r2,r2,zero
   46d68:	10803fcc 	andi	r2,r2,255
   46d6c:	e0bffe15 	stw	r2,-8(fp)
    return bPressed;
   46d70:	e0bffe17 	ldw	r2,-8(fp)
}
   46d74:	e037883a 	mov	sp,fp
   46d78:	df000017 	ldw	fp,0(sp)
   46d7c:	dec00104 	addi	sp,sp,4
   46d80:	f800283a 	ret

00046d84 <touch_enable_penirq>:


void touch_enable_penirq(TERASIC_TOUCH_PANEL *p){
   46d84:	defff904 	addi	sp,sp,-28
   46d88:	dfc00615 	stw	ra,24(sp)
   46d8c:	df000515 	stw	fp,20(sp)
   46d90:	df000504 	addi	fp,sp,20
   46d94:	e13fff15 	stw	r4,-4(fp)
    const alt_u8 CommandGetX = 0x82;
   46d98:	00bfe084 	movi	r2,-126
   46d9c:	e0bffe05 	stb	r2,-8(fp)
    const alt_u8 CommandGetY = 0xD2;
   46da0:	00bff484 	movi	r2,-46
   46da4:	e0bffe45 	stb	r2,-7(fp)
    alt_u8 data8;
    
    alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetX), &CommandGetX, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
   46da8:	e0bfff17 	ldw	r2,-4(fp)
   46dac:	10800017 	ldw	r2,0(r2)
   46db0:	d8000015 	stw	zero,0(sp)
   46db4:	d8000115 	stw	zero,4(sp)
   46db8:	00c00044 	movi	r3,1
   46dbc:	d8c00215 	stw	r3,8(sp)
   46dc0:	1009883a 	mov	r4,r2
   46dc4:	000b883a 	mov	r5,zero
   46dc8:	01800044 	movi	r6,1
   46dcc:	e1fffe04 	addi	r7,fp,-8
   46dd0:	004c4d80 	call	4c4d8 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_MERGE);
   46dd4:	e0bfff17 	ldw	r2,-4(fp)
   46dd8:	10800017 	ldw	r2,0(r2)
   46ddc:	00c00044 	movi	r3,1
   46de0:	d8c00015 	stw	r3,0(sp)
   46de4:	e0fffe84 	addi	r3,fp,-6
   46de8:	d8c00115 	stw	r3,4(sp)
   46dec:	00c00044 	movi	r3,1
   46df0:	d8c00215 	stw	r3,8(sp)
   46df4:	1009883a 	mov	r4,r2
   46df8:	000b883a 	mov	r5,zero
   46dfc:	000d883a 	mov	r6,zero
   46e00:	000f883a 	mov	r7,zero
   46e04:	004c4d80 	call	4c4d8 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
   46e08:	e0bfff17 	ldw	r2,-4(fp)
   46e0c:	10800017 	ldw	r2,0(r2)
   46e10:	00c00044 	movi	r3,1
   46e14:	d8c00015 	stw	r3,0(sp)
   46e18:	e0fffe84 	addi	r3,fp,-6
   46e1c:	d8c00115 	stw	r3,4(sp)
   46e20:	00c00084 	movi	r3,2
   46e24:	d8c00215 	stw	r3,8(sp)
   46e28:	1009883a 	mov	r4,r2
   46e2c:	000b883a 	mov	r5,zero
   46e30:	000d883a 	mov	r6,zero
   46e34:	000f883a 	mov	r7,zero
   46e38:	004c4d80 	call	4c4d8 <alt_avalon_spi_command>
   
    alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
   46e3c:	e0bfff17 	ldw	r2,-4(fp)
   46e40:	10c00017 	ldw	r3,0(r2)
   46e44:	e0bffe44 	addi	r2,fp,-7
   46e48:	d8000015 	stw	zero,0(sp)
   46e4c:	d8000115 	stw	zero,4(sp)
   46e50:	01000044 	movi	r4,1
   46e54:	d9000215 	stw	r4,8(sp)
   46e58:	1809883a 	mov	r4,r3
   46e5c:	000b883a 	mov	r5,zero
   46e60:	01800044 	movi	r6,1
   46e64:	100f883a 	mov	r7,r2
   46e68:	004c4d80 	call	4c4d8 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_MERGE);
   46e6c:	e0bfff17 	ldw	r2,-4(fp)
   46e70:	10800017 	ldw	r2,0(r2)
   46e74:	00c00044 	movi	r3,1
   46e78:	d8c00015 	stw	r3,0(sp)
   46e7c:	e0fffe84 	addi	r3,fp,-6
   46e80:	d8c00115 	stw	r3,4(sp)
   46e84:	00c00044 	movi	r3,1
   46e88:	d8c00215 	stw	r3,8(sp)
   46e8c:	1009883a 	mov	r4,r2
   46e90:	000b883a 	mov	r5,zero
   46e94:	000d883a 	mov	r6,zero
   46e98:	000f883a 	mov	r7,zero
   46e9c:	004c4d80 	call	4c4d8 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
   46ea0:	e0bfff17 	ldw	r2,-4(fp)
   46ea4:	10800017 	ldw	r2,0(r2)
   46ea8:	00c00044 	movi	r3,1
   46eac:	d8c00015 	stw	r3,0(sp)
   46eb0:	e0fffe84 	addi	r3,fp,-6
   46eb4:	d8c00115 	stw	r3,4(sp)
   46eb8:	00c00084 	movi	r3,2
   46ebc:	d8c00215 	stw	r3,8(sp)
   46ec0:	1009883a 	mov	r4,r2
   46ec4:	000b883a 	mov	r5,zero
   46ec8:	000d883a 	mov	r6,zero
   46ecc:	000f883a 	mov	r7,zero
   46ed0:	004c4d80 	call	4c4d8 <alt_avalon_spi_command>
}
   46ed4:	e037883a 	mov	sp,fp
   46ed8:	dfc00117 	ldw	ra,4(sp)
   46edc:	df000017 	ldw	fp,0(sp)
   46ee0:	dec00204 	addi	sp,sp,8
   46ee4:	f800283a 	ret

00046ee8 <touch_clear_input>:

void touch_clear_input(TERASIC_TOUCH_PANEL *p){
   46ee8:	defffd04 	addi	sp,sp,-12
   46eec:	dfc00215 	stw	ra,8(sp)
   46ef0:	df000115 	stw	fp,4(sp)
   46ef4:	df000104 	addi	fp,sp,4
   46ef8:	e13fff15 	stw	r4,-4(fp)
    touch_enable_penirq(p);
   46efc:	e13fff17 	ldw	r4,-4(fp)
   46f00:	0046d840 	call	46d84 <touch_enable_penirq>
}
   46f04:	e037883a 	mov	sp,fp
   46f08:	dfc00117 	ldw	ra,4(sp)
   46f0c:	df000017 	ldw	fp,0(sp)
   46f10:	dec00204 	addi	sp,sp,8
   46f14:	f800283a 	ret

00046f18 <touch_get_xy>:

// get x/y by SPI command
void touch_get_xy(TERASIC_TOUCH_PANEL *p){
   46f18:	defff604 	addi	sp,sp,-40
   46f1c:	dfc00915 	stw	ra,36(sp)
   46f20:	df000815 	stw	fp,32(sp)
   46f24:	df000804 	addi	fp,sp,32
   46f28:	e13fff15 	stw	r4,-4(fp)
    alt_u16 x, y;
    int result;
    const alt_u8 CommandGetX = 0x92;
   46f2c:	00bfe484 	movi	r2,-110
   46f30:	e0bffe05 	stb	r2,-8(fp)
    const alt_u8 CommandGetY = 0xD2;
   46f34:	00bff484 	movi	r2,-46
   46f38:	e0bffe45 	stb	r2,-7(fp)
    
       
    //DEBUG_OUT(("[TOUCH] get x/y\n"));

    // x
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetX), &CommandGetX, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
   46f3c:	e0bfff17 	ldw	r2,-4(fp)
   46f40:	10c00017 	ldw	r3,0(r2)
   46f44:	e0bffe04 	addi	r2,fp,-8
   46f48:	d8000015 	stw	zero,0(sp)
   46f4c:	d8000115 	stw	zero,4(sp)
   46f50:	01000044 	movi	r4,1
   46f54:	d9000215 	stw	r4,8(sp)
   46f58:	1809883a 	mov	r4,r3
   46f5c:	000b883a 	mov	r5,zero
   46f60:	01800044 	movi	r6,1
   46f64:	100f883a 	mov	r7,r2
   46f68:	004c4d80 	call	4c4d8 <alt_avalon_spi_command>
   46f6c:	e0bffb15 	stw	r2,-20(fp)
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
   46f70:	e0bfff17 	ldw	r2,-4(fp)
   46f74:	10800017 	ldw	r2,0(r2)
   46f78:	00c00044 	movi	r3,1
   46f7c:	d8c00015 	stw	r3,0(sp)
   46f80:	e0fffe84 	addi	r3,fp,-6
   46f84:	d8c00115 	stw	r3,4(sp)
   46f88:	00c00044 	movi	r3,1
   46f8c:	d8c00215 	stw	r3,8(sp)
   46f90:	1009883a 	mov	r4,r2
   46f94:	000b883a 	mov	r5,zero
   46f98:	000d883a 	mov	r6,zero
   46f9c:	000f883a 	mov	r7,zero
   46fa0:	004c4d80 	call	4c4d8 <alt_avalon_spi_command>
   46fa4:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(high_byte)){
   46fa8:	e0bffb17 	ldw	r2,-20(fp)
   46fac:	10800060 	cmpeqi	r2,r2,1
   46fb0:	1000011e 	bne	r2,zero,46fb8 <touch_get_xy+0xa0>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
   46fb4:	00009b06 	br	47224 <touch_get_xy+0x30c>
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
   46fb8:	e0bfff17 	ldw	r2,-4(fp)
   46fbc:	10800017 	ldw	r2,0(r2)
   46fc0:	00c00044 	movi	r3,1
   46fc4:	d8c00015 	stw	r3,0(sp)
   46fc8:	e0fffec4 	addi	r3,fp,-5
   46fcc:	d8c00115 	stw	r3,4(sp)
   46fd0:	00c00084 	movi	r3,2
   46fd4:	d8c00215 	stw	r3,8(sp)
   46fd8:	1009883a 	mov	r4,r2
   46fdc:	000b883a 	mov	r5,zero
   46fe0:	000d883a 	mov	r6,zero
   46fe4:	000f883a 	mov	r7,zero
   46fe8:	004c4d80 	call	4c4d8 <alt_avalon_spi_command>
   46fec:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(low_byte)){
   46ff0:	e0bffb17 	ldw	r2,-20(fp)
   46ff4:	10800060 	cmpeqi	r2,r2,1
   46ff8:	1000011e 	bne	r2,zero,47000 <touch_get_xy+0xe8>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
   46ffc:	00008906 	br	47224 <touch_get_xy+0x30c>
    }  
    ResponseX = (high_byte << 8) | low_byte;        
   47000:	e0bffe83 	ldbu	r2,-6(fp)
   47004:	10803fcc 	andi	r2,r2,255
   47008:	1004923a 	slli	r2,r2,8
   4700c:	1007883a 	mov	r3,r2
   47010:	e0bffec3 	ldbu	r2,-5(fp)
   47014:	10803fcc 	andi	r2,r2,255
   47018:	1884b03a 	or	r2,r3,r2
   4701c:	e0bffc0d 	sth	r2,-16(fp)
    
    // y
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
   47020:	e0bfff17 	ldw	r2,-4(fp)
   47024:	10c00017 	ldw	r3,0(r2)
   47028:	e0bffe44 	addi	r2,fp,-7
   4702c:	d8000015 	stw	zero,0(sp)
   47030:	d8000115 	stw	zero,4(sp)
   47034:	01000044 	movi	r4,1
   47038:	d9000215 	stw	r4,8(sp)
   4703c:	1809883a 	mov	r4,r3
   47040:	000b883a 	mov	r5,zero
   47044:	01800044 	movi	r6,1
   47048:	100f883a 	mov	r7,r2
   4704c:	004c4d80 	call	4c4d8 <alt_avalon_spi_command>
   47050:	e0bffb15 	stw	r2,-20(fp)
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
   47054:	e0bfff17 	ldw	r2,-4(fp)
   47058:	10800017 	ldw	r2,0(r2)
   4705c:	00c00044 	movi	r3,1
   47060:	d8c00015 	stw	r3,0(sp)
   47064:	e0fffe84 	addi	r3,fp,-6
   47068:	d8c00115 	stw	r3,4(sp)
   4706c:	00c00044 	movi	r3,1
   47070:	d8c00215 	stw	r3,8(sp)
   47074:	1009883a 	mov	r4,r2
   47078:	000b883a 	mov	r5,zero
   4707c:	000d883a 	mov	r6,zero
   47080:	000f883a 	mov	r7,zero
   47084:	004c4d80 	call	4c4d8 <alt_avalon_spi_command>
   47088:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(high_byte)){
   4708c:	e0bffb17 	ldw	r2,-20(fp)
   47090:	10800060 	cmpeqi	r2,r2,1
   47094:	1000011e 	bne	r2,zero,4709c <touch_get_xy+0x184>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
   47098:	00006206 	br	47224 <touch_get_xy+0x30c>
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
   4709c:	e0bfff17 	ldw	r2,-4(fp)
   470a0:	10800017 	ldw	r2,0(r2)
   470a4:	00c00044 	movi	r3,1
   470a8:	d8c00015 	stw	r3,0(sp)
   470ac:	e0fffec4 	addi	r3,fp,-5
   470b0:	d8c00115 	stw	r3,4(sp)
   470b4:	00c00084 	movi	r3,2
   470b8:	d8c00215 	stw	r3,8(sp)
   470bc:	1009883a 	mov	r4,r2
   470c0:	000b883a 	mov	r5,zero
   470c4:	000d883a 	mov	r6,zero
   470c8:	000f883a 	mov	r7,zero
   470cc:	004c4d80 	call	4c4d8 <alt_avalon_spi_command>
   470d0:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(low_byte)){
   470d4:	e0bffb17 	ldw	r2,-20(fp)
   470d8:	10800060 	cmpeqi	r2,r2,1
   470dc:	1000011e 	bne	r2,zero,470e4 <touch_get_xy+0x1cc>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
   470e0:	00005006 	br	47224 <touch_get_xy+0x30c>
    }  
    ResponseY = (high_byte << 8) | low_byte;        
   470e4:	e0bffe83 	ldbu	r2,-6(fp)
   470e8:	10803fcc 	andi	r2,r2,255
   470ec:	1004923a 	slli	r2,r2,8
   470f0:	1007883a 	mov	r3,r2
   470f4:	e0bffec3 	ldbu	r2,-5(fp)
   470f8:	10803fcc 	andi	r2,r2,255
   470fc:	1884b03a 	or	r2,r3,r2
   47100:	e0bffc8d 	sth	r2,-14(fp)

    if (!touch_is_pen_pressed(p))
   47104:	e13fff17 	ldw	r4,-4(fp)
   47108:	0046d440 	call	46d44 <touch_is_pen_pressed>
   4710c:	1000011e 	bne	r2,zero,47114 <touch_get_xy+0x1fc>
        return; // do not use this data    
   47110:	00004406 	br	47224 <touch_get_xy+0x30c>
        
    x = (ResponseX >> 3 ) & 0xFFF;  // 12 bits    
   47114:	e0bffc0b 	ldhu	r2,-16(fp)
   47118:	1004d0fa 	srli	r2,r2,3
   4711c:	1083ffcc 	andi	r2,r2,4095
   47120:	e0bffd0d 	sth	r2,-12(fp)
    y = (ResponseY >> 3 ) & 0xFFF;  // 12 bits
   47124:	e0bffc8b 	ldhu	r2,-14(fp)
   47128:	1004d0fa 	srli	r2,r2,3
   4712c:	1083ffcc 	andi	r2,r2,4095
   47130:	e0bffd8d 	sth	r2,-10(fp)
    
    
    // check whether the fifo is full!
    if (((p->fifo_front+1)%FIFO_SIZE) == p->fifo_rear){
   47134:	e0bfff17 	ldw	r2,-4(fp)
   47138:	1080040b 	ldhu	r2,16(r2)
   4713c:	10bfffcc 	andi	r2,r2,65535
   47140:	10800044 	addi	r2,r2,1
   47144:	1009883a 	mov	r4,r2
   47148:	01400284 	movi	r5,10
   4714c:	00478ac0 	call	478ac <__modsi3>
   47150:	1007883a 	mov	r3,r2
   47154:	e0bfff17 	ldw	r2,-4(fp)
   47158:	1080048b 	ldhu	r2,18(r2)
   4715c:	10bfffcc 	andi	r2,r2,65535
   47160:	18800f1e 	bne	r3,r2,471a0 <touch_get_xy+0x288>
        // full, pop an old one
        p->fifo_rear++;
   47164:	e0bfff17 	ldw	r2,-4(fp)
   47168:	1080048b 	ldhu	r2,18(r2)
   4716c:	10800044 	addi	r2,r2,1
   47170:	1007883a 	mov	r3,r2
   47174:	e0bfff17 	ldw	r2,-4(fp)
   47178:	10c0048d 	sth	r3,18(r2)
        p->fifo_rear %= FIFO_SIZE;        
   4717c:	e0bfff17 	ldw	r2,-4(fp)
   47180:	1080048b 	ldhu	r2,18(r2)
   47184:	10bfffcc 	andi	r2,r2,65535
   47188:	1009883a 	mov	r4,r2
   4718c:	01400284 	movi	r5,10
   47190:	00479000 	call	47900 <__umodsi3>
   47194:	1007883a 	mov	r3,r2
   47198:	e0bfff17 	ldw	r2,-4(fp)
   4719c:	10c0048d 	sth	r3,18(r2)
        
    }
    DEBUG_OUT("[ ADC] x=%d, y=%d\n", x,y);

    // push now
    p->fifo_x[p->fifo_front] = x;
   471a0:	e0bfff17 	ldw	r2,-4(fp)
   471a4:	1080040b 	ldhu	r2,16(r2)
   471a8:	10bfffcc 	andi	r2,r2,65535
   471ac:	e0ffff17 	ldw	r3,-4(fp)
   471b0:	10800284 	addi	r2,r2,10
   471b4:	1085883a 	add	r2,r2,r2
   471b8:	1885883a 	add	r2,r3,r2
   471bc:	e0fffd0b 	ldhu	r3,-12(fp)
   471c0:	10c0000d 	sth	r3,0(r2)
    p->fifo_y[p->fifo_front] = y;    
   471c4:	e0bfff17 	ldw	r2,-4(fp)
   471c8:	1080040b 	ldhu	r2,16(r2)
   471cc:	10bfffcc 	andi	r2,r2,65535
   471d0:	e0ffff17 	ldw	r3,-4(fp)
   471d4:	10800504 	addi	r2,r2,20
   471d8:	1085883a 	add	r2,r2,r2
   471dc:	1885883a 	add	r2,r3,r2
   471e0:	e0fffd8b 	ldhu	r3,-10(fp)
   471e4:	10c0000d 	sth	r3,0(r2)
    p->fifo_front++;
   471e8:	e0bfff17 	ldw	r2,-4(fp)
   471ec:	1080040b 	ldhu	r2,16(r2)
   471f0:	10800044 	addi	r2,r2,1
   471f4:	1007883a 	mov	r3,r2
   471f8:	e0bfff17 	ldw	r2,-4(fp)
   471fc:	10c0040d 	sth	r3,16(r2)
    p->fifo_front %= FIFO_SIZE;   
   47200:	e0bfff17 	ldw	r2,-4(fp)
   47204:	1080040b 	ldhu	r2,16(r2)
   47208:	10bfffcc 	andi	r2,r2,65535
   4720c:	1009883a 	mov	r4,r2
   47210:	01400284 	movi	r5,10
   47214:	00479000 	call	47900 <__umodsi3>
   47218:	1007883a 	mov	r3,r2
   4721c:	e0bfff17 	ldw	r2,-4(fp)
   47220:	10c0040d 	sth	r3,16(r2)
    
}
   47224:	e037883a 	mov	sp,fp
   47228:	dfc00117 	ldw	ra,4(sp)
   4722c:	df000017 	ldw	fp,0(sp)
   47230:	dec00204 	addi	sp,sp,8
   47234:	f800283a 	ret

00047238 <touch_alarm_callback>:

// polling x/y when penirq_n is low
alt_u32 touch_alarm_callback(void *context){
   47238:	defffc04 	addi	sp,sp,-16
   4723c:	dfc00315 	stw	ra,12(sp)
   47240:	df000215 	stw	fp,8(sp)
   47244:	df000204 	addi	fp,sp,8
   47248:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)context;
   4724c:	e0bfff17 	ldw	r2,-4(fp)
   47250:	e0bffe15 	stw	r2,-8(fp)
    
    if (touch_is_pen_pressed(p)){//Touch.pen_pressed){
   47254:	e13ffe17 	ldw	r4,-8(fp)
   47258:	0046d440 	call	46d44 <touch_is_pen_pressed>
   4725c:	10000926 	beq	r2,zero,47284 <touch_alarm_callback+0x4c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   47260:	008001f4 	movhi	r2,7
   47264:	10afa504 	addi	r2,r2,-16748
   47268:	10800017 	ldw	r2,0(r2)
        if (alt_nticks() > p->next_active_time)
   4726c:	e0fffe17 	ldw	r3,-8(fp)
   47270:	18c01717 	ldw	r3,92(r3)
   47274:	1880072e 	bgeu	r3,r2,47294 <touch_alarm_callback+0x5c>
            touch_get_xy(p);
   47278:	e13ffe17 	ldw	r4,-8(fp)
   4727c:	0046f180 	call	46f18 <touch_get_xy>
   47280:	00000406 	br	47294 <touch_alarm_callback+0x5c>
      //  p->last_active_time = alt_nticks(); 
    }else{
       // touch_empty_fifo(p);
        //if ((alt_nticks() - Touch.last_active_time) > alt_ticks_per_second()/10){
         touch_enable_penirq(p);
   47284:	e13ffe17 	ldw	r4,-8(fp)
   47288:	0046d840 	call	46d84 <touch_enable_penirq>
         touch_clear_input(p);
   4728c:	e13ffe17 	ldw	r4,-8(fp)
   47290:	0046ee80 	call	46ee8 <touch_clear_input>
          //  p->last_active_time = alt_nticks(); 
        //}            
    }        
    return p->alarm_dur;
   47294:	e0bffe17 	ldw	r2,-8(fp)
   47298:	10801617 	ldw	r2,88(r2)
}
   4729c:	e037883a 	mov	sp,fp
   472a0:	dfc00117 	ldw	ra,4(sp)
   472a4:	df000017 	ldw	fp,0(sp)
   472a8:	dec00204 	addi	sp,sp,8
   472ac:	f800283a 	ret

000472b0 <touch_xy_transform>:

void touch_xy_transform(int *x, int *y){
   472b0:	defff904 	addi	sp,sp,-28
   472b4:	dfc00615 	stw	ra,24(sp)
   472b8:	df000515 	stw	fp,20(sp)
   472bc:	df000504 	addi	fp,sp,20
   472c0:	e13ffe15 	stw	r4,-8(fp)
   472c4:	e17fff15 	stw	r5,-4(fp)
    int xx, yy;
    const int y_ignore = 200;
   472c8:	00803204 	movi	r2,200
   472cc:	e0bffc15 	stw	r2,-16(fp)
    xx = *y;
   472d0:	e0bfff17 	ldw	r2,-4(fp)
   472d4:	10800017 	ldw	r2,0(r2)
   472d8:	e0bffd15 	stw	r2,-12(fp)
    yy = *x;
   472dc:	e0bffe17 	ldw	r2,-8(fp)
   472e0:	10800017 	ldw	r2,0(r2)
   472e4:	e0bffb15 	stw	r2,-20(fp)

    // scale & swap
   // xx = 4096 -1 - xx;
    xx = xx * X_RES / 4096;
   472e8:	e0bffd17 	ldw	r2,-12(fp)
   472ec:	10803c24 	muli	r2,r2,240
   472f0:	1000010e 	bge	r2,zero,472f8 <touch_xy_transform+0x48>
   472f4:	1083ffc4 	addi	r2,r2,4095
   472f8:	1005d33a 	srai	r2,r2,12
   472fc:	e0bffd15 	stw	r2,-12(fp)

   // yy = 4096 -1 - yy;

    // special calibrate for LT24
    if (yy > (4096-y_ignore))
   47300:	00c40004 	movi	r3,4096
   47304:	e0bffc17 	ldw	r2,-16(fp)
   47308:	1887c83a 	sub	r3,r3,r2
   4730c:	e0bffb17 	ldw	r2,-20(fp)
   47310:	1880040e 	bge	r3,r2,47324 <touch_xy_transform+0x74>
    	yy = 4096-y_ignore;
   47314:	00c40004 	movi	r3,4096
   47318:	e0bffc17 	ldw	r2,-16(fp)
   4731c:	1885c83a 	sub	r2,r3,r2
   47320:	e0bffb15 	stw	r2,-20(fp)
    yy = yy * 4095/ (4096-y_ignore);
   47324:	e0bffb17 	ldw	r2,-20(fp)
   47328:	10c3ffe4 	muli	r3,r2,4095
   4732c:	01040004 	movi	r4,4096
   47330:	e0bffc17 	ldw	r2,-16(fp)
   47334:	2085c83a 	sub	r2,r4,r2
   47338:	1809883a 	mov	r4,r3
   4733c:	100b883a 	mov	r5,r2
   47340:	00478640 	call	47864 <__divsi3>
   47344:	e0bffb15 	stw	r2,-20(fp)
    
    yy = yy * Y_RES / 4096;
   47348:	e0bffb17 	ldw	r2,-20(fp)
   4734c:	10805024 	muli	r2,r2,320
   47350:	1000010e 	bge	r2,zero,47358 <touch_xy_transform+0xa8>
   47354:	1083ffc4 	addi	r2,r2,4095
   47358:	1005d33a 	srai	r2,r2,12
   4735c:	e0bffb15 	stw	r2,-20(fp)

    // swap
    *x = xx;
   47360:	e0bffe17 	ldw	r2,-8(fp)
   47364:	e0fffd17 	ldw	r3,-12(fp)
   47368:	10c00015 	stw	r3,0(r2)
    *y = yy;    
   4736c:	e0bfff17 	ldw	r2,-4(fp)
   47370:	e0fffb17 	ldw	r3,-20(fp)
   47374:	10c00015 	stw	r3,0(r2)
    
}
   47378:	e037883a 	mov	sp,fp
   4737c:	dfc00117 	ldw	ra,4(sp)
   47380:	df000017 	ldw	fp,0(sp)
   47384:	dec00204 	addi	sp,sp,8
   47388:	f800283a 	ret

0004738c <sqrt>:
   4738c:	defff104 	addi	sp,sp,-60
   47390:	dd000d15 	stw	r20,52(sp)
   47394:	dcc00c15 	stw	r19,48(sp)
   47398:	dc800b15 	stw	r18,44(sp)
   4739c:	dc400a15 	stw	r17,40(sp)
   473a0:	dc000915 	stw	r16,36(sp)
   473a4:	2023883a 	mov	r17,r4
   473a8:	2821883a 	mov	r16,r5
   473ac:	dfc00e15 	stw	ra,56(sp)
   473b0:	048001f4 	movhi	r18,7
   473b4:	94a6e104 	addi	r18,r18,-25724
   473b8:	00474d80 	call	474d8 <__ieee754_sqrt>
   473bc:	91400017 	ldw	r5,0(r18)
   473c0:	013fffc4 	movi	r4,-1
   473c4:	1027883a 	mov	r19,r2
   473c8:	1829883a 	mov	r20,r3
   473cc:	29000a26 	beq	r5,r4,473f8 <sqrt+0x6c>
   473d0:	8809883a 	mov	r4,r17
   473d4:	800b883a 	mov	r5,r16
   473d8:	00477840 	call	47784 <__fpclassifyd>
   473dc:	10000626 	beq	r2,zero,473f8 <sqrt+0x6c>
   473e0:	8809883a 	mov	r4,r17
   473e4:	800b883a 	mov	r5,r16
   473e8:	000d883a 	mov	r6,zero
   473ec:	000f883a 	mov	r7,zero
   473f0:	0048a580 	call	48a58 <__ledf2>
   473f4:	10000a16 	blt	r2,zero,47420 <sqrt+0x94>
   473f8:	9805883a 	mov	r2,r19
   473fc:	a007883a 	mov	r3,r20
   47400:	dfc00e17 	ldw	ra,56(sp)
   47404:	dd000d17 	ldw	r20,52(sp)
   47408:	dcc00c17 	ldw	r19,48(sp)
   4740c:	dc800b17 	ldw	r18,44(sp)
   47410:	dc400a17 	ldw	r17,40(sp)
   47414:	dc000917 	ldw	r16,36(sp)
   47418:	dec00f04 	addi	sp,sp,60
   4741c:	f800283a 	ret
   47420:	00800044 	movi	r2,1
   47424:	94800017 	ldw	r18,0(r18)
   47428:	d8800015 	stw	r2,0(sp)
   4742c:	008001b4 	movhi	r2,6
   47430:	109df704 	addi	r2,r2,30684
   47434:	d8800115 	stw	r2,4(sp)
   47438:	d8000815 	stw	zero,32(sp)
   4743c:	dc400415 	stw	r17,16(sp)
   47440:	dc000515 	stw	r16,20(sp)
   47444:	dc400215 	stw	r17,8(sp)
   47448:	dc000315 	stw	r16,12(sp)
   4744c:	9000111e 	bne	r18,zero,47494 <sqrt+0x108>
   47450:	d8000615 	stw	zero,24(sp)
   47454:	d8000715 	stw	zero,28(sp)
   47458:	d809883a 	mov	r4,sp
   4745c:	00477ec0 	call	477ec <matherr>
   47460:	10001526 	beq	r2,zero,474b8 <sqrt+0x12c>
   47464:	d8800817 	ldw	r2,32(sp)
   47468:	1000171e 	bne	r2,zero,474c8 <sqrt+0x13c>
   4746c:	d8800617 	ldw	r2,24(sp)
   47470:	d8c00717 	ldw	r3,28(sp)
   47474:	dfc00e17 	ldw	ra,56(sp)
   47478:	dd000d17 	ldw	r20,52(sp)
   4747c:	dcc00c17 	ldw	r19,48(sp)
   47480:	dc800b17 	ldw	r18,44(sp)
   47484:	dc400a17 	ldw	r17,40(sp)
   47488:	dc000917 	ldw	r16,36(sp)
   4748c:	dec00f04 	addi	sp,sp,60
   47490:	f800283a 	ret
   47494:	0009883a 	mov	r4,zero
   47498:	000b883a 	mov	r5,zero
   4749c:	000d883a 	mov	r6,zero
   474a0:	000f883a 	mov	r7,zero
   474a4:	00481840 	call	48184 <__divdf3>
   474a8:	d8800615 	stw	r2,24(sp)
   474ac:	d8c00715 	stw	r3,28(sp)
   474b0:	00800084 	movi	r2,2
   474b4:	90bfe81e 	bne	r18,r2,47458 <__alt_data_end+0xfffd18f8>
   474b8:	0049cb40 	call	49cb4 <__errno>
   474bc:	00c00844 	movi	r3,33
   474c0:	10c00015 	stw	r3,0(r2)
   474c4:	003fe706 	br	47464 <__alt_data_end+0xfffd1904>
   474c8:	0049cb40 	call	49cb4 <__errno>
   474cc:	d8c00817 	ldw	r3,32(sp)
   474d0:	10c00015 	stw	r3,0(r2)
   474d4:	003fe506 	br	4746c <__alt_data_end+0xfffd190c>

000474d8 <__ieee754_sqrt>:
   474d8:	defffd04 	addi	sp,sp,-12
   474dc:	dc400115 	stw	r17,4(sp)
   474e0:	dc000015 	stw	r16,0(sp)
   474e4:	dfc00215 	stw	ra,8(sp)
   474e8:	28dffc2c 	andhi	r3,r5,32752
   474ec:	009ffc34 	movhi	r2,32752
   474f0:	2821883a 	mov	r16,r5
   474f4:	2023883a 	mov	r17,r4
   474f8:	18808226 	beq	r3,r2,47704 <__ieee754_sqrt+0x22c>
   474fc:	200f883a 	mov	r7,r4
   47500:	01405f0e 	bge	zero,r5,47680 <__ieee754_sqrt+0x1a8>
   47504:	2805d53a 	srai	r2,r5,20
   47508:	10006826 	beq	r2,zero,476ac <__ieee754_sqrt+0x1d4>
   4750c:	00c00434 	movhi	r3,16
   47510:	18ffffc4 	addi	r3,r3,-1
   47514:	10bf0044 	addi	r2,r2,-1023
   47518:	80e0703a 	and	r16,r16,r3
   4751c:	10c0004c 	andi	r3,r2,1
   47520:	84000434 	orhi	r16,r16,16
   47524:	18004f1e 	bne	r3,zero,47664 <__ieee754_sqrt+0x18c>
   47528:	3808d7fa 	srli	r4,r7,31
   4752c:	8421883a 	add	r16,r16,r16
   47530:	101bd07a 	srai	r13,r2,1
   47534:	8107883a 	add	r3,r16,r4
   47538:	01800584 	movi	r6,22
   4753c:	39c9883a 	add	r4,r7,r7
   47540:	0013883a 	mov	r9,zero
   47544:	000b883a 	mov	r5,zero
   47548:	00800834 	movhi	r2,32
   4754c:	288f883a 	add	r7,r5,r2
   47550:	2010d7fa 	srli	r8,r4,31
   47554:	31bfffc4 	addi	r6,r6,-1
   47558:	19c00316 	blt	r3,r7,47568 <__ieee754_sqrt+0x90>
   4755c:	19c7c83a 	sub	r3,r3,r7
   47560:	388b883a 	add	r5,r7,r2
   47564:	4893883a 	add	r9,r9,r2
   47568:	18c7883a 	add	r3,r3,r3
   4756c:	1a07883a 	add	r3,r3,r8
   47570:	2109883a 	add	r4,r4,r4
   47574:	1004d07a 	srli	r2,r2,1
   47578:	303ff41e 	bne	r6,zero,4754c <__alt_data_end+0xfffd19ec>
   4757c:	01a00034 	movhi	r6,32768
   47580:	02000804 	movi	r8,32
   47584:	0005883a 	mov	r2,zero
   47588:	0015883a 	mov	r10,zero
   4758c:	3019883a 	mov	r12,r6
   47590:	00000806 	br	475b4 <__ieee754_sqrt+0xdc>
   47594:	19403026 	beq	r3,r5,47658 <__ieee754_sqrt+0x180>
   47598:	200ed7fa 	srli	r7,r4,31
   4759c:	18c7883a 	add	r3,r3,r3
   475a0:	423fffc4 	addi	r8,r8,-1
   475a4:	19c7883a 	add	r3,r3,r7
   475a8:	2109883a 	add	r4,r4,r4
   475ac:	300cd07a 	srli	r6,r6,1
   475b0:	40001326 	beq	r8,zero,47600 <__ieee754_sqrt+0x128>
   475b4:	328f883a 	add	r7,r6,r10
   475b8:	28fff60e 	bge	r5,r3,47594 <__alt_data_end+0xfffd1a34>
   475bc:	3ae0002c 	andhi	r11,r7,32768
   475c0:	3995883a 	add	r10,r7,r6
   475c4:	5b002126 	beq	r11,r12,4764c <__ieee754_sqrt+0x174>
   475c8:	2817883a 	mov	r11,r5
   475cc:	1947c83a 	sub	r3,r3,r5
   475d0:	21c0012e 	bgeu	r4,r7,475d8 <__ieee754_sqrt+0x100>
   475d4:	18ffffc4 	addi	r3,r3,-1
   475d8:	21c9c83a 	sub	r4,r4,r7
   475dc:	200ed7fa 	srli	r7,r4,31
   475e0:	18c7883a 	add	r3,r3,r3
   475e4:	423fffc4 	addi	r8,r8,-1
   475e8:	1185883a 	add	r2,r2,r6
   475ec:	580b883a 	mov	r5,r11
   475f0:	19c7883a 	add	r3,r3,r7
   475f4:	2109883a 	add	r4,r4,r4
   475f8:	300cd07a 	srli	r6,r6,1
   475fc:	403fed1e 	bne	r8,zero,475b4 <__alt_data_end+0xfffd1a54>
   47600:	1906b03a 	or	r3,r3,r4
   47604:	18000426 	beq	r3,zero,47618 <__ieee754_sqrt+0x140>
   47608:	00ffffc4 	movi	r3,-1
   4760c:	10c04d26 	beq	r2,r3,47744 <__ieee754_sqrt+0x26c>
   47610:	10c0004c 	andi	r3,r2,1
   47614:	1885883a 	add	r2,r3,r2
   47618:	1004d07a 	srli	r2,r2,1
   4761c:	4809d07a 	srai	r4,r9,1
   47620:	00cff834 	movhi	r3,16352
   47624:	4a40004c 	andi	r9,r9,1
   47628:	20c9883a 	add	r4,r4,r3
   4762c:	4800121e 	bne	r9,zero,47678 <__ieee754_sqrt+0x1a0>
   47630:	6806953a 	slli	r3,r13,20
   47634:	1907883a 	add	r3,r3,r4
   47638:	dfc00217 	ldw	ra,8(sp)
   4763c:	dc400117 	ldw	r17,4(sp)
   47640:	dc000017 	ldw	r16,0(sp)
   47644:	dec00304 	addi	sp,sp,12
   47648:	f800283a 	ret
   4764c:	503fde16 	blt	r10,zero,475c8 <__alt_data_end+0xfffd1a68>
   47650:	2ac00044 	addi	r11,r5,1
   47654:	003fdd06 	br	475cc <__alt_data_end+0xfffd1a6c>
   47658:	21ffd82e 	bgeu	r4,r7,475bc <__alt_data_end+0xfffd1a5c>
   4765c:	180b883a 	mov	r5,r3
   47660:	003fcd06 	br	47598 <__alt_data_end+0xfffd1a38>
   47664:	3806d7fa 	srli	r3,r7,31
   47668:	8421883a 	add	r16,r16,r16
   4766c:	39cf883a 	add	r7,r7,r7
   47670:	80e1883a 	add	r16,r16,r3
   47674:	003fac06 	br	47528 <__alt_data_end+0xfffd19c8>
   47678:	10a00034 	orhi	r2,r2,32768
   4767c:	003fec06 	br	47630 <__alt_data_end+0xfffd1ad0>
   47680:	00a00034 	movhi	r2,32768
   47684:	10bfffc4 	addi	r2,r2,-1
   47688:	2884703a 	and	r2,r5,r2
   4768c:	1104b03a 	or	r2,r2,r4
   47690:	10002926 	beq	r2,zero,47738 <__ieee754_sqrt+0x260>
   47694:	2800321e 	bne	r5,zero,47760 <__ieee754_sqrt+0x288>
   47698:	0005883a 	mov	r2,zero
   4769c:	3820d2fa 	srli	r16,r7,11
   476a0:	10bffac4 	addi	r2,r2,-21
   476a4:	380e957a 	slli	r7,r7,21
   476a8:	803ffc26 	beq	r16,zero,4769c <__alt_data_end+0xfffd1b3c>
   476ac:	80c0042c 	andhi	r3,r16,16
   476b0:	1800271e 	bne	r3,zero,47750 <__ieee754_sqrt+0x278>
   476b4:	8421883a 	add	r16,r16,r16
   476b8:	8100042c 	andhi	r4,r16,16
   476bc:	18c00044 	addi	r3,r3,1
   476c0:	203ffc26 	beq	r4,zero,476b4 <__alt_data_end+0xfffd1b54>
   476c4:	01400044 	movi	r5,1
   476c8:	01000804 	movi	r4,32
   476cc:	28cbc83a 	sub	r5,r5,r3
   476d0:	20c9c83a 	sub	r4,r4,r3
   476d4:	3908d83a 	srl	r4,r7,r4
   476d8:	1145883a 	add	r2,r2,r5
   476dc:	38ce983a 	sll	r7,r7,r3
   476e0:	8120b03a 	or	r16,r16,r4
   476e4:	00c00434 	movhi	r3,16
   476e8:	18ffffc4 	addi	r3,r3,-1
   476ec:	10bf0044 	addi	r2,r2,-1023
   476f0:	80e0703a 	and	r16,r16,r3
   476f4:	10c0004c 	andi	r3,r2,1
   476f8:	84000434 	orhi	r16,r16,16
   476fc:	183f8a26 	beq	r3,zero,47528 <__alt_data_end+0xfffd19c8>
   47700:	003fd806 	br	47664 <__alt_data_end+0xfffd1b04>
   47704:	200d883a 	mov	r6,r4
   47708:	280f883a 	mov	r7,r5
   4770c:	0048b440 	call	48b44 <__muldf3>
   47710:	1009883a 	mov	r4,r2
   47714:	180b883a 	mov	r5,r3
   47718:	880d883a 	mov	r6,r17
   4771c:	800f883a 	mov	r7,r16
   47720:	00479080 	call	47908 <__adddf3>
   47724:	dfc00217 	ldw	ra,8(sp)
   47728:	dc400117 	ldw	r17,4(sp)
   4772c:	dc000017 	ldw	r16,0(sp)
   47730:	dec00304 	addi	sp,sp,12
   47734:	f800283a 	ret
   47738:	2005883a 	mov	r2,r4
   4773c:	2807883a 	mov	r3,r5
   47740:	003fbd06 	br	47638 <__alt_data_end+0xfffd1ad8>
   47744:	4a400044 	addi	r9,r9,1
   47748:	0005883a 	mov	r2,zero
   4774c:	003fb306 	br	4761c <__alt_data_end+0xfffd1abc>
   47750:	01000804 	movi	r4,32
   47754:	01400044 	movi	r5,1
   47758:	0007883a 	mov	r3,zero
   4775c:	003fdd06 	br	476d4 <__alt_data_end+0xfffd1b74>
   47760:	200d883a 	mov	r6,r4
   47764:	280f883a 	mov	r7,r5
   47768:	00492300 	call	49230 <__subdf3>
   4776c:	1009883a 	mov	r4,r2
   47770:	180b883a 	mov	r5,r3
   47774:	100d883a 	mov	r6,r2
   47778:	180f883a 	mov	r7,r3
   4777c:	00481840 	call	48184 <__divdf3>
   47780:	003fad06 	br	47638 <__alt_data_end+0xfffd1ad8>

00047784 <__fpclassifyd>:
   47784:	00a00034 	movhi	r2,32768
   47788:	10bfffc4 	addi	r2,r2,-1
   4778c:	288a703a 	and	r5,r5,r2
   47790:	28000726 	beq	r5,zero,477b0 <__fpclassifyd+0x2c>
   47794:	00bffc34 	movhi	r2,65520
   47798:	2885883a 	add	r2,r5,r2
   4779c:	00dff834 	movhi	r3,32736
   477a0:	18ffffc4 	addi	r3,r3,-1
   477a4:	18800636 	bltu	r3,r2,477c0 <__fpclassifyd+0x3c>
   477a8:	00800104 	movi	r2,4
   477ac:	f800283a 	ret
   477b0:	2005003a 	cmpeq	r2,r4,zero
   477b4:	00c000c4 	movi	r3,3
   477b8:	1885c83a 	sub	r2,r3,r2
   477bc:	f800283a 	ret
   477c0:	00800434 	movhi	r2,16
   477c4:	10bfffc4 	addi	r2,r2,-1
   477c8:	11400236 	bltu	r2,r5,477d4 <__fpclassifyd+0x50>
   477cc:	008000c4 	movi	r2,3
   477d0:	f800283a 	ret
   477d4:	009ffc34 	movhi	r2,32752
   477d8:	28800226 	beq	r5,r2,477e4 <__fpclassifyd+0x60>
   477dc:	0005883a 	mov	r2,zero
   477e0:	f800283a 	ret
   477e4:	2005003a 	cmpeq	r2,r4,zero
   477e8:	f800283a 	ret

000477ec <matherr>:
   477ec:	0005883a 	mov	r2,zero
   477f0:	f800283a 	ret

000477f4 <udivmodsi4>:
   477f4:	2900182e 	bgeu	r5,r4,47858 <udivmodsi4+0x64>
   477f8:	28001716 	blt	r5,zero,47858 <udivmodsi4+0x64>
   477fc:	00800804 	movi	r2,32
   47800:	00c00044 	movi	r3,1
   47804:	00000206 	br	47810 <udivmodsi4+0x1c>
   47808:	10001126 	beq	r2,zero,47850 <udivmodsi4+0x5c>
   4780c:	28000516 	blt	r5,zero,47824 <udivmodsi4+0x30>
   47810:	294b883a 	add	r5,r5,r5
   47814:	10bfffc4 	addi	r2,r2,-1
   47818:	18c7883a 	add	r3,r3,r3
   4781c:	293ffa36 	bltu	r5,r4,47808 <__alt_data_end+0xfffd1ca8>
   47820:	18000b26 	beq	r3,zero,47850 <udivmodsi4+0x5c>
   47824:	0005883a 	mov	r2,zero
   47828:	21400236 	bltu	r4,r5,47834 <udivmodsi4+0x40>
   4782c:	2149c83a 	sub	r4,r4,r5
   47830:	10c4b03a 	or	r2,r2,r3
   47834:	1806d07a 	srli	r3,r3,1
   47838:	280ad07a 	srli	r5,r5,1
   4783c:	183ffa1e 	bne	r3,zero,47828 <__alt_data_end+0xfffd1cc8>
   47840:	3000011e 	bne	r6,zero,47848 <udivmodsi4+0x54>
   47844:	f800283a 	ret
   47848:	2005883a 	mov	r2,r4
   4784c:	f800283a 	ret
   47850:	0005883a 	mov	r2,zero
   47854:	003ffa06 	br	47840 <__alt_data_end+0xfffd1ce0>
   47858:	00c00044 	movi	r3,1
   4785c:	0005883a 	mov	r2,zero
   47860:	003ff106 	br	47828 <__alt_data_end+0xfffd1cc8>

00047864 <__divsi3>:
   47864:	deffff04 	addi	sp,sp,-4
   47868:	dfc00015 	stw	ra,0(sp)
   4786c:	20000916 	blt	r4,zero,47894 <__divsi3+0x30>
   47870:	000f883a 	mov	r7,zero
   47874:	28000a16 	blt	r5,zero,478a0 <__divsi3+0x3c>
   47878:	000d883a 	mov	r6,zero
   4787c:	00477f40 	call	477f4 <udivmodsi4>
   47880:	38000126 	beq	r7,zero,47888 <__divsi3+0x24>
   47884:	0085c83a 	sub	r2,zero,r2
   47888:	dfc00017 	ldw	ra,0(sp)
   4788c:	dec00104 	addi	sp,sp,4
   47890:	f800283a 	ret
   47894:	0109c83a 	sub	r4,zero,r4
   47898:	01c00044 	movi	r7,1
   4789c:	283ff60e 	bge	r5,zero,47878 <__alt_data_end+0xfffd1d18>
   478a0:	014bc83a 	sub	r5,zero,r5
   478a4:	39c0005c 	xori	r7,r7,1
   478a8:	003ff306 	br	47878 <__alt_data_end+0xfffd1d18>

000478ac <__modsi3>:
   478ac:	20000316 	blt	r4,zero,478bc <__modsi3+0x10>
   478b0:	28000c16 	blt	r5,zero,478e4 <__modsi3+0x38>
   478b4:	01800044 	movi	r6,1
   478b8:	00477f41 	jmpi	477f4 <udivmodsi4>
   478bc:	deffff04 	addi	sp,sp,-4
   478c0:	dfc00015 	stw	ra,0(sp)
   478c4:	0109c83a 	sub	r4,zero,r4
   478c8:	28000916 	blt	r5,zero,478f0 <__modsi3+0x44>
   478cc:	01800044 	movi	r6,1
   478d0:	00477f40 	call	477f4 <udivmodsi4>
   478d4:	0085c83a 	sub	r2,zero,r2
   478d8:	dfc00017 	ldw	ra,0(sp)
   478dc:	dec00104 	addi	sp,sp,4
   478e0:	f800283a 	ret
   478e4:	014bc83a 	sub	r5,zero,r5
   478e8:	01800044 	movi	r6,1
   478ec:	00477f41 	jmpi	477f4 <udivmodsi4>
   478f0:	014bc83a 	sub	r5,zero,r5
   478f4:	003ff506 	br	478cc <__alt_data_end+0xfffd1d6c>

000478f8 <__udivsi3>:
   478f8:	000d883a 	mov	r6,zero
   478fc:	00477f41 	jmpi	477f4 <udivmodsi4>

00047900 <__umodsi3>:
   47900:	01800044 	movi	r6,1
   47904:	00477f41 	jmpi	477f4 <udivmodsi4>

00047908 <__adddf3>:
   47908:	00800434 	movhi	r2,16
   4790c:	10bfffc4 	addi	r2,r2,-1
   47910:	defffb04 	addi	sp,sp,-20
   47914:	2890703a 	and	r8,r5,r2
   47918:	2806d7fa 	srli	r3,r5,31
   4791c:	3884703a 	and	r2,r7,r2
   47920:	2014d77a 	srli	r10,r4,29
   47924:	3812d53a 	srli	r9,r7,20
   47928:	dc400115 	stw	r17,4(sp)
   4792c:	100490fa 	slli	r2,r2,3
   47930:	2822d53a 	srli	r17,r5,20
   47934:	380ed7fa 	srli	r7,r7,31
   47938:	400a90fa 	slli	r5,r8,3
   4793c:	3010d77a 	srli	r8,r6,29
   47940:	dc800215 	stw	r18,8(sp)
   47944:	dc000015 	stw	r16,0(sp)
   47948:	dfc00415 	stw	ra,16(sp)
   4794c:	dcc00315 	stw	r19,12(sp)
   47950:	1c803fcc 	andi	r18,r3,255
   47954:	202090fa 	slli	r16,r4,3
   47958:	8c41ffcc 	andi	r17,r17,2047
   4795c:	2a8ab03a 	or	r5,r5,r10
   47960:	4901ffcc 	andi	r4,r9,2047
   47964:	1204b03a 	or	r2,r2,r8
   47968:	300c90fa 	slli	r6,r6,3
   4796c:	91c07126 	beq	r18,r7,47b34 <__adddf3+0x22c>
   47970:	8907c83a 	sub	r3,r17,r4
   47974:	00c0a00e 	bge	zero,r3,47bf8 <__adddf3+0x2f0>
   47978:	2000291e 	bne	r4,zero,47a20 <__adddf3+0x118>
   4797c:	1188b03a 	or	r4,r2,r6
   47980:	20008b1e 	bne	r4,zero,47bb0 <__adddf3+0x2a8>
   47984:	808001cc 	andi	r2,r16,7
   47988:	10005a26 	beq	r2,zero,47af4 <__adddf3+0x1ec>
   4798c:	80c003cc 	andi	r3,r16,15
   47990:	00800104 	movi	r2,4
   47994:	18805726 	beq	r3,r2,47af4 <__adddf3+0x1ec>
   47998:	81000104 	addi	r4,r16,4
   4799c:	2421803a 	cmpltu	r16,r4,r16
   479a0:	2c0b883a 	add	r5,r5,r16
   479a4:	2880202c 	andhi	r2,r5,128
   479a8:	9007883a 	mov	r3,r18
   479ac:	2021883a 	mov	r16,r4
   479b0:	10005326 	beq	r2,zero,47b00 <__adddf3+0x1f8>
   479b4:	8c400044 	addi	r17,r17,1
   479b8:	0081ffc4 	movi	r2,2047
   479bc:	8880ae26 	beq	r17,r2,47c78 <__adddf3+0x370>
   479c0:	00bfe034 	movhi	r2,65408
   479c4:	10bfffc4 	addi	r2,r2,-1
   479c8:	288a703a 	and	r5,r5,r2
   479cc:	2804977a 	slli	r2,r5,29
   479d0:	280a927a 	slli	r5,r5,9
   479d4:	8020d0fa 	srli	r16,r16,3
   479d8:	280ad33a 	srli	r5,r5,12
   479dc:	1404b03a 	or	r2,r2,r16
   479e0:	8c41ffcc 	andi	r17,r17,2047
   479e4:	8822953a 	slli	r17,r17,20
   479e8:	18c03fcc 	andi	r3,r3,255
   479ec:	180897fa 	slli	r4,r3,31
   479f0:	00c00434 	movhi	r3,16
   479f4:	18ffffc4 	addi	r3,r3,-1
   479f8:	28c6703a 	and	r3,r5,r3
   479fc:	1c46b03a 	or	r3,r3,r17
   47a00:	1906b03a 	or	r3,r3,r4
   47a04:	dfc00417 	ldw	ra,16(sp)
   47a08:	dcc00317 	ldw	r19,12(sp)
   47a0c:	dc800217 	ldw	r18,8(sp)
   47a10:	dc400117 	ldw	r17,4(sp)
   47a14:	dc000017 	ldw	r16,0(sp)
   47a18:	dec00504 	addi	sp,sp,20
   47a1c:	f800283a 	ret
   47a20:	0101ffc4 	movi	r4,2047
   47a24:	893fd726 	beq	r17,r4,47984 <__alt_data_end+0xfffd1e24>
   47a28:	10802034 	orhi	r2,r2,128
   47a2c:	01000e04 	movi	r4,56
   47a30:	20c09416 	blt	r4,r3,47c84 <__adddf3+0x37c>
   47a34:	010007c4 	movi	r4,31
   47a38:	20c0b716 	blt	r4,r3,47d18 <__adddf3+0x410>
   47a3c:	01000804 	movi	r4,32
   47a40:	20c9c83a 	sub	r4,r4,r3
   47a44:	30ced83a 	srl	r7,r6,r3
   47a48:	1110983a 	sll	r8,r2,r4
   47a4c:	3108983a 	sll	r4,r6,r4
   47a50:	10c6d83a 	srl	r3,r2,r3
   47a54:	41c4b03a 	or	r2,r8,r7
   47a58:	2008c03a 	cmpne	r4,r4,zero
   47a5c:	110cb03a 	or	r6,r2,r4
   47a60:	818dc83a 	sub	r6,r16,r6
   47a64:	81a1803a 	cmpltu	r16,r16,r6
   47a68:	28cbc83a 	sub	r5,r5,r3
   47a6c:	2c0bc83a 	sub	r5,r5,r16
   47a70:	3021883a 	mov	r16,r6
   47a74:	2880202c 	andhi	r2,r5,128
   47a78:	103fc226 	beq	r2,zero,47984 <__alt_data_end+0xfffd1e24>
   47a7c:	04c02034 	movhi	r19,128
   47a80:	9cffffc4 	addi	r19,r19,-1
   47a84:	2ce6703a 	and	r19,r5,r19
   47a88:	98006c26 	beq	r19,zero,47c3c <__adddf3+0x334>
   47a8c:	9809883a 	mov	r4,r19
   47a90:	0049c080 	call	49c08 <__clzsi2>
   47a94:	10fffe04 	addi	r3,r2,-8
   47a98:	010007c4 	movi	r4,31
   47a9c:	20c06d16 	blt	r4,r3,47c54 <__adddf3+0x34c>
   47aa0:	01000a04 	movi	r4,40
   47aa4:	2085c83a 	sub	r2,r4,r2
   47aa8:	8084d83a 	srl	r2,r16,r2
   47aac:	98e6983a 	sll	r19,r19,r3
   47ab0:	80e0983a 	sll	r16,r16,r3
   47ab4:	14c4b03a 	or	r2,r2,r19
   47ab8:	1c406a16 	blt	r3,r17,47c64 <__adddf3+0x35c>
   47abc:	1c63c83a 	sub	r17,r3,r17
   47ac0:	89400044 	addi	r5,r17,1
   47ac4:	00c007c4 	movi	r3,31
   47ac8:	19408616 	blt	r3,r5,47ce4 <__adddf3+0x3dc>
   47acc:	1c47c83a 	sub	r3,r3,r17
   47ad0:	8148d83a 	srl	r4,r16,r5
   47ad4:	80e0983a 	sll	r16,r16,r3
   47ad8:	10c6983a 	sll	r3,r2,r3
   47adc:	114ad83a 	srl	r5,r2,r5
   47ae0:	8004c03a 	cmpne	r2,r16,zero
   47ae4:	20e0b03a 	or	r16,r4,r3
   47ae8:	80a0b03a 	or	r16,r16,r2
   47aec:	0023883a 	mov	r17,zero
   47af0:	003fa406 	br	47984 <__alt_data_end+0xfffd1e24>
   47af4:	2880202c 	andhi	r2,r5,128
   47af8:	9007883a 	mov	r3,r18
   47afc:	103fad1e 	bne	r2,zero,479b4 <__alt_data_end+0xfffd1e54>
   47b00:	2804977a 	slli	r2,r5,29
   47b04:	8020d0fa 	srli	r16,r16,3
   47b08:	0101ffc4 	movi	r4,2047
   47b0c:	280ad0fa 	srli	r5,r5,3
   47b10:	1404b03a 	or	r2,r2,r16
   47b14:	8900031e 	bne	r17,r4,47b24 <__adddf3+0x21c>
   47b18:	1148b03a 	or	r4,r2,r5
   47b1c:	20005626 	beq	r4,zero,47c78 <__adddf3+0x370>
   47b20:	29400234 	orhi	r5,r5,8
   47b24:	01000434 	movhi	r4,16
   47b28:	213fffc4 	addi	r4,r4,-1
   47b2c:	290a703a 	and	r5,r5,r4
   47b30:	003fab06 	br	479e0 <__alt_data_end+0xfffd1e80>
   47b34:	890fc83a 	sub	r7,r17,r4
   47b38:	01c0560e 	bge	zero,r7,47c94 <__adddf3+0x38c>
   47b3c:	20002426 	beq	r4,zero,47bd0 <__adddf3+0x2c8>
   47b40:	0101ffc4 	movi	r4,2047
   47b44:	893f8f26 	beq	r17,r4,47984 <__alt_data_end+0xfffd1e24>
   47b48:	10802034 	orhi	r2,r2,128
   47b4c:	01000e04 	movi	r4,56
   47b50:	21c09d0e 	bge	r4,r7,47dc8 <__adddf3+0x4c0>
   47b54:	118cb03a 	or	r6,r2,r6
   47b58:	300cc03a 	cmpne	r6,r6,zero
   47b5c:	000f883a 	mov	r7,zero
   47b60:	340d883a 	add	r6,r6,r16
   47b64:	3421803a 	cmpltu	r16,r6,r16
   47b68:	394b883a 	add	r5,r7,r5
   47b6c:	2c0b883a 	add	r5,r5,r16
   47b70:	3021883a 	mov	r16,r6
   47b74:	2880202c 	andhi	r2,r5,128
   47b78:	103f8226 	beq	r2,zero,47984 <__alt_data_end+0xfffd1e24>
   47b7c:	8c400044 	addi	r17,r17,1
   47b80:	0081ffc4 	movi	r2,2047
   47b84:	8880cb26 	beq	r17,r2,47eb4 <__adddf3+0x5ac>
   47b88:	00bfe034 	movhi	r2,65408
   47b8c:	10bfffc4 	addi	r2,r2,-1
   47b90:	288a703a 	and	r5,r5,r2
   47b94:	8006d07a 	srli	r3,r16,1
   47b98:	280497fa 	slli	r2,r5,31
   47b9c:	8400004c 	andi	r16,r16,1
   47ba0:	80e0b03a 	or	r16,r16,r3
   47ba4:	80a0b03a 	or	r16,r16,r2
   47ba8:	280ad07a 	srli	r5,r5,1
   47bac:	003f7506 	br	47984 <__alt_data_end+0xfffd1e24>
   47bb0:	18ffffc4 	addi	r3,r3,-1
   47bb4:	1800481e 	bne	r3,zero,47cd8 <__adddf3+0x3d0>
   47bb8:	818dc83a 	sub	r6,r16,r6
   47bbc:	81a1803a 	cmpltu	r16,r16,r6
   47bc0:	288bc83a 	sub	r5,r5,r2
   47bc4:	2c0bc83a 	sub	r5,r5,r16
   47bc8:	3021883a 	mov	r16,r6
   47bcc:	003fa906 	br	47a74 <__alt_data_end+0xfffd1f14>
   47bd0:	1188b03a 	or	r4,r2,r6
   47bd4:	203f6b26 	beq	r4,zero,47984 <__alt_data_end+0xfffd1e24>
   47bd8:	39ffffc4 	addi	r7,r7,-1
   47bdc:	3800931e 	bne	r7,zero,47e2c <__adddf3+0x524>
   47be0:	340d883a 	add	r6,r6,r16
   47be4:	3421803a 	cmpltu	r16,r6,r16
   47be8:	114b883a 	add	r5,r2,r5
   47bec:	2c0b883a 	add	r5,r5,r16
   47bf0:	3021883a 	mov	r16,r6
   47bf4:	003fdf06 	br	47b74 <__alt_data_end+0xfffd2014>
   47bf8:	1800531e 	bne	r3,zero,47d48 <__adddf3+0x440>
   47bfc:	88c00044 	addi	r3,r17,1
   47c00:	18c1ffcc 	andi	r3,r3,2047
   47c04:	01000044 	movi	r4,1
   47c08:	20c0a00e 	bge	r4,r3,47e8c <__adddf3+0x584>
   47c0c:	8187c83a 	sub	r3,r16,r6
   47c10:	80c9803a 	cmpltu	r4,r16,r3
   47c14:	28a7c83a 	sub	r19,r5,r2
   47c18:	9927c83a 	sub	r19,r19,r4
   47c1c:	9900202c 	andhi	r4,r19,128
   47c20:	20006226 	beq	r4,zero,47dac <__adddf3+0x4a4>
   47c24:	3421c83a 	sub	r16,r6,r16
   47c28:	1145c83a 	sub	r2,r2,r5
   47c2c:	340d803a 	cmpltu	r6,r6,r16
   47c30:	11a7c83a 	sub	r19,r2,r6
   47c34:	3825883a 	mov	r18,r7
   47c38:	983f941e 	bne	r19,zero,47a8c <__alt_data_end+0xfffd1f2c>
   47c3c:	8009883a 	mov	r4,r16
   47c40:	0049c080 	call	49c08 <__clzsi2>
   47c44:	10800804 	addi	r2,r2,32
   47c48:	10fffe04 	addi	r3,r2,-8
   47c4c:	010007c4 	movi	r4,31
   47c50:	20ff930e 	bge	r4,r3,47aa0 <__alt_data_end+0xfffd1f40>
   47c54:	10bff604 	addi	r2,r2,-40
   47c58:	8084983a 	sll	r2,r16,r2
   47c5c:	0021883a 	mov	r16,zero
   47c60:	1c7f960e 	bge	r3,r17,47abc <__alt_data_end+0xfffd1f5c>
   47c64:	017fe034 	movhi	r5,65408
   47c68:	297fffc4 	addi	r5,r5,-1
   47c6c:	88e3c83a 	sub	r17,r17,r3
   47c70:	114a703a 	and	r5,r2,r5
   47c74:	003f4306 	br	47984 <__alt_data_end+0xfffd1e24>
   47c78:	000b883a 	mov	r5,zero
   47c7c:	0005883a 	mov	r2,zero
   47c80:	003f5706 	br	479e0 <__alt_data_end+0xfffd1e80>
   47c84:	118cb03a 	or	r6,r2,r6
   47c88:	300cc03a 	cmpne	r6,r6,zero
   47c8c:	0007883a 	mov	r3,zero
   47c90:	003f7306 	br	47a60 <__alt_data_end+0xfffd1f00>
   47c94:	3800961e 	bne	r7,zero,47ef0 <__adddf3+0x5e8>
   47c98:	89000044 	addi	r4,r17,1
   47c9c:	2201ffcc 	andi	r8,r4,2047
   47ca0:	01c00044 	movi	r7,1
   47ca4:	3a00680e 	bge	r7,r8,47e48 <__adddf3+0x540>
   47ca8:	01c1ffc4 	movi	r7,2047
   47cac:	21c0a726 	beq	r4,r7,47f4c <__adddf3+0x644>
   47cb0:	340d883a 	add	r6,r6,r16
   47cb4:	3421803a 	cmpltu	r16,r6,r16
   47cb8:	114b883a 	add	r5,r2,r5
   47cbc:	2c0b883a 	add	r5,r5,r16
   47cc0:	282097fa 	slli	r16,r5,31
   47cc4:	300cd07a 	srli	r6,r6,1
   47cc8:	280ad07a 	srli	r5,r5,1
   47ccc:	2023883a 	mov	r17,r4
   47cd0:	81a0b03a 	or	r16,r16,r6
   47cd4:	003f2b06 	br	47984 <__alt_data_end+0xfffd1e24>
   47cd8:	0101ffc4 	movi	r4,2047
   47cdc:	893f531e 	bne	r17,r4,47a2c <__alt_data_end+0xfffd1ecc>
   47ce0:	003f2806 	br	47984 <__alt_data_end+0xfffd1e24>
   47ce4:	893ff844 	addi	r4,r17,-31
   47ce8:	00c00804 	movi	r3,32
   47cec:	1108d83a 	srl	r4,r2,r4
   47cf0:	28c05126 	beq	r5,r3,47e38 <__adddf3+0x530>
   47cf4:	00c00fc4 	movi	r3,63
   47cf8:	1c63c83a 	sub	r17,r3,r17
   47cfc:	1444983a 	sll	r2,r2,r17
   47d00:	1420b03a 	or	r16,r2,r16
   47d04:	8020c03a 	cmpne	r16,r16,zero
   47d08:	8120b03a 	or	r16,r16,r4
   47d0c:	000b883a 	mov	r5,zero
   47d10:	0023883a 	mov	r17,zero
   47d14:	003f1b06 	br	47984 <__alt_data_end+0xfffd1e24>
   47d18:	193ff804 	addi	r4,r3,-32
   47d1c:	01c00804 	movi	r7,32
   47d20:	1108d83a 	srl	r4,r2,r4
   47d24:	19c04626 	beq	r3,r7,47e40 <__adddf3+0x538>
   47d28:	01c01004 	movi	r7,64
   47d2c:	38c7c83a 	sub	r3,r7,r3
   47d30:	10c4983a 	sll	r2,r2,r3
   47d34:	118cb03a 	or	r6,r2,r6
   47d38:	300cc03a 	cmpne	r6,r6,zero
   47d3c:	310cb03a 	or	r6,r6,r4
   47d40:	0007883a 	mov	r3,zero
   47d44:	003f4606 	br	47a60 <__alt_data_end+0xfffd1f00>
   47d48:	88002b26 	beq	r17,zero,47df8 <__adddf3+0x4f0>
   47d4c:	0201ffc4 	movi	r8,2047
   47d50:	22002f26 	beq	r4,r8,47e10 <__adddf3+0x508>
   47d54:	00c7c83a 	sub	r3,zero,r3
   47d58:	29402034 	orhi	r5,r5,128
   47d5c:	02000e04 	movi	r8,56
   47d60:	40c07616 	blt	r8,r3,47f3c <__adddf3+0x634>
   47d64:	020007c4 	movi	r8,31
   47d68:	40c0d216 	blt	r8,r3,480b4 <__adddf3+0x7ac>
   47d6c:	02000804 	movi	r8,32
   47d70:	40d1c83a 	sub	r8,r8,r3
   47d74:	2a14983a 	sll	r10,r5,r8
   47d78:	80d2d83a 	srl	r9,r16,r3
   47d7c:	8210983a 	sll	r8,r16,r8
   47d80:	28cad83a 	srl	r5,r5,r3
   47d84:	5252b03a 	or	r9,r10,r9
   47d88:	4006c03a 	cmpne	r3,r8,zero
   47d8c:	48e0b03a 	or	r16,r9,r3
   47d90:	3421c83a 	sub	r16,r6,r16
   47d94:	114bc83a 	sub	r5,r2,r5
   47d98:	340d803a 	cmpltu	r6,r6,r16
   47d9c:	298bc83a 	sub	r5,r5,r6
   47da0:	2023883a 	mov	r17,r4
   47da4:	3825883a 	mov	r18,r7
   47da8:	003f3206 	br	47a74 <__alt_data_end+0xfffd1f14>
   47dac:	98c4b03a 	or	r2,r19,r3
   47db0:	10001c1e 	bne	r2,zero,47e24 <__adddf3+0x51c>
   47db4:	0007883a 	mov	r3,zero
   47db8:	000b883a 	mov	r5,zero
   47dbc:	0021883a 	mov	r16,zero
   47dc0:	0023883a 	mov	r17,zero
   47dc4:	003f4e06 	br	47b00 <__alt_data_end+0xfffd1fa0>
   47dc8:	010007c4 	movi	r4,31
   47dcc:	21c03c16 	blt	r4,r7,47ec0 <__adddf3+0x5b8>
   47dd0:	01000804 	movi	r4,32
   47dd4:	21c9c83a 	sub	r4,r4,r7
   47dd8:	31d0d83a 	srl	r8,r6,r7
   47ddc:	1112983a 	sll	r9,r2,r4
   47de0:	3108983a 	sll	r4,r6,r4
   47de4:	11ced83a 	srl	r7,r2,r7
   47de8:	4a04b03a 	or	r2,r9,r8
   47dec:	2008c03a 	cmpne	r4,r4,zero
   47df0:	110cb03a 	or	r6,r2,r4
   47df4:	003f5a06 	br	47b60 <__alt_data_end+0xfffd2000>
   47df8:	2c10b03a 	or	r8,r5,r16
   47dfc:	40000426 	beq	r8,zero,47e10 <__adddf3+0x508>
   47e00:	00c6303a 	nor	r3,zero,r3
   47e04:	183fe226 	beq	r3,zero,47d90 <__alt_data_end+0xfffd2230>
   47e08:	0201ffc4 	movi	r8,2047
   47e0c:	223fd31e 	bne	r4,r8,47d5c <__alt_data_end+0xfffd21fc>
   47e10:	100b883a 	mov	r5,r2
   47e14:	3021883a 	mov	r16,r6
   47e18:	2023883a 	mov	r17,r4
   47e1c:	3825883a 	mov	r18,r7
   47e20:	003ed806 	br	47984 <__alt_data_end+0xfffd1e24>
   47e24:	1821883a 	mov	r16,r3
   47e28:	003f1706 	br	47a88 <__alt_data_end+0xfffd1f28>
   47e2c:	0101ffc4 	movi	r4,2047
   47e30:	893f461e 	bne	r17,r4,47b4c <__alt_data_end+0xfffd1fec>
   47e34:	003ed306 	br	47984 <__alt_data_end+0xfffd1e24>
   47e38:	0005883a 	mov	r2,zero
   47e3c:	003fb006 	br	47d00 <__alt_data_end+0xfffd21a0>
   47e40:	0005883a 	mov	r2,zero
   47e44:	003fbb06 	br	47d34 <__alt_data_end+0xfffd21d4>
   47e48:	2c06b03a 	or	r3,r5,r16
   47e4c:	8800841e 	bne	r17,zero,48060 <__adddf3+0x758>
   47e50:	1800b226 	beq	r3,zero,4811c <__adddf3+0x814>
   47e54:	1186b03a 	or	r3,r2,r6
   47e58:	183eca26 	beq	r3,zero,47984 <__alt_data_end+0xfffd1e24>
   47e5c:	340d883a 	add	r6,r6,r16
   47e60:	114b883a 	add	r5,r2,r5
   47e64:	3421803a 	cmpltu	r16,r6,r16
   47e68:	2c0b883a 	add	r5,r5,r16
   47e6c:	2880202c 	andhi	r2,r5,128
   47e70:	1000c026 	beq	r2,zero,48174 <__adddf3+0x86c>
   47e74:	00bfe034 	movhi	r2,65408
   47e78:	10bfffc4 	addi	r2,r2,-1
   47e7c:	288a703a 	and	r5,r5,r2
   47e80:	3021883a 	mov	r16,r6
   47e84:	3823883a 	mov	r17,r7
   47e88:	003ebe06 	br	47984 <__alt_data_end+0xfffd1e24>
   47e8c:	2c06b03a 	or	r3,r5,r16
   47e90:	8800221e 	bne	r17,zero,47f1c <__adddf3+0x614>
   47e94:	1800481e 	bne	r3,zero,47fb8 <__adddf3+0x6b0>
   47e98:	1186b03a 	or	r3,r2,r6
   47e9c:	18000426 	beq	r3,zero,47eb0 <__adddf3+0x5a8>
   47ea0:	100b883a 	mov	r5,r2
   47ea4:	3021883a 	mov	r16,r6
   47ea8:	3825883a 	mov	r18,r7
   47eac:	003eb506 	br	47984 <__alt_data_end+0xfffd1e24>
   47eb0:	0007883a 	mov	r3,zero
   47eb4:	000b883a 	mov	r5,zero
   47eb8:	0021883a 	mov	r16,zero
   47ebc:	003f1006 	br	47b00 <__alt_data_end+0xfffd1fa0>
   47ec0:	393ff804 	addi	r4,r7,-32
   47ec4:	02000804 	movi	r8,32
   47ec8:	1108d83a 	srl	r4,r2,r4
   47ecc:	3a007726 	beq	r7,r8,480ac <__adddf3+0x7a4>
   47ed0:	02001004 	movi	r8,64
   47ed4:	41cfc83a 	sub	r7,r8,r7
   47ed8:	11c4983a 	sll	r2,r2,r7
   47edc:	118cb03a 	or	r6,r2,r6
   47ee0:	300cc03a 	cmpne	r6,r6,zero
   47ee4:	310cb03a 	or	r6,r6,r4
   47ee8:	000f883a 	mov	r7,zero
   47eec:	003f1c06 	br	47b60 <__alt_data_end+0xfffd2000>
   47ef0:	88001a1e 	bne	r17,zero,47f5c <__adddf3+0x654>
   47ef4:	2c10b03a 	or	r8,r5,r16
   47ef8:	40005526 	beq	r8,zero,48050 <__adddf3+0x748>
   47efc:	01ce303a 	nor	r7,zero,r7
   47f00:	3800511e 	bne	r7,zero,48048 <__adddf3+0x740>
   47f04:	81a1883a 	add	r16,r16,r6
   47f08:	114b883a 	add	r5,r2,r5
   47f0c:	818d803a 	cmpltu	r6,r16,r6
   47f10:	298b883a 	add	r5,r5,r6
   47f14:	2023883a 	mov	r17,r4
   47f18:	003f1606 	br	47b74 <__alt_data_end+0xfffd2014>
   47f1c:	1800341e 	bne	r3,zero,47ff0 <__adddf3+0x6e8>
   47f20:	1186b03a 	or	r3,r2,r6
   47f24:	18006f26 	beq	r3,zero,480e4 <__adddf3+0x7dc>
   47f28:	100b883a 	mov	r5,r2
   47f2c:	3021883a 	mov	r16,r6
   47f30:	3825883a 	mov	r18,r7
   47f34:	0441ffc4 	movi	r17,2047
   47f38:	003e9206 	br	47984 <__alt_data_end+0xfffd1e24>
   47f3c:	2c20b03a 	or	r16,r5,r16
   47f40:	8020c03a 	cmpne	r16,r16,zero
   47f44:	000b883a 	mov	r5,zero
   47f48:	003f9106 	br	47d90 <__alt_data_end+0xfffd2230>
   47f4c:	2023883a 	mov	r17,r4
   47f50:	000b883a 	mov	r5,zero
   47f54:	0021883a 	mov	r16,zero
   47f58:	003ee906 	br	47b00 <__alt_data_end+0xfffd1fa0>
   47f5c:	0201ffc4 	movi	r8,2047
   47f60:	22003b26 	beq	r4,r8,48050 <__adddf3+0x748>
   47f64:	01cfc83a 	sub	r7,zero,r7
   47f68:	29402034 	orhi	r5,r5,128
   47f6c:	02000e04 	movi	r8,56
   47f70:	41c06216 	blt	r8,r7,480fc <__adddf3+0x7f4>
   47f74:	020007c4 	movi	r8,31
   47f78:	41c07016 	blt	r8,r7,4813c <__adddf3+0x834>
   47f7c:	02000804 	movi	r8,32
   47f80:	41d1c83a 	sub	r8,r8,r7
   47f84:	2a14983a 	sll	r10,r5,r8
   47f88:	81d2d83a 	srl	r9,r16,r7
   47f8c:	8210983a 	sll	r8,r16,r8
   47f90:	29cad83a 	srl	r5,r5,r7
   47f94:	5252b03a 	or	r9,r10,r9
   47f98:	400ec03a 	cmpne	r7,r8,zero
   47f9c:	49e0b03a 	or	r16,r9,r7
   47fa0:	81a1883a 	add	r16,r16,r6
   47fa4:	2885883a 	add	r2,r5,r2
   47fa8:	818d803a 	cmpltu	r6,r16,r6
   47fac:	118b883a 	add	r5,r2,r6
   47fb0:	2023883a 	mov	r17,r4
   47fb4:	003eef06 	br	47b74 <__alt_data_end+0xfffd2014>
   47fb8:	1186b03a 	or	r3,r2,r6
   47fbc:	183e7126 	beq	r3,zero,47984 <__alt_data_end+0xfffd1e24>
   47fc0:	8187c83a 	sub	r3,r16,r6
   47fc4:	80d1803a 	cmpltu	r8,r16,r3
   47fc8:	2889c83a 	sub	r4,r5,r2
   47fcc:	2209c83a 	sub	r4,r4,r8
   47fd0:	2200202c 	andhi	r8,r4,128
   47fd4:	40005426 	beq	r8,zero,48128 <__adddf3+0x820>
   47fd8:	3421c83a 	sub	r16,r6,r16
   47fdc:	114bc83a 	sub	r5,r2,r5
   47fe0:	340d803a 	cmpltu	r6,r6,r16
   47fe4:	298bc83a 	sub	r5,r5,r6
   47fe8:	3825883a 	mov	r18,r7
   47fec:	003e6506 	br	47984 <__alt_data_end+0xfffd1e24>
   47ff0:	1186b03a 	or	r3,r2,r6
   47ff4:	18002b26 	beq	r3,zero,480a4 <__adddf3+0x79c>
   47ff8:	2806d0fa 	srli	r3,r5,3
   47ffc:	8020d0fa 	srli	r16,r16,3
   48000:	280a977a 	slli	r5,r5,29
   48004:	1900022c 	andhi	r4,r3,8
   48008:	2c20b03a 	or	r16,r5,r16
   4800c:	20000826 	beq	r4,zero,48030 <__adddf3+0x728>
   48010:	1008d0fa 	srli	r4,r2,3
   48014:	2140022c 	andhi	r5,r4,8
   48018:	2800051e 	bne	r5,zero,48030 <__adddf3+0x728>
   4801c:	300cd0fa 	srli	r6,r6,3
   48020:	1004977a 	slli	r2,r2,29
   48024:	2007883a 	mov	r3,r4
   48028:	3825883a 	mov	r18,r7
   4802c:	11a0b03a 	or	r16,r2,r6
   48030:	800ad77a 	srli	r5,r16,29
   48034:	180690fa 	slli	r3,r3,3
   48038:	802090fa 	slli	r16,r16,3
   4803c:	0441ffc4 	movi	r17,2047
   48040:	28cab03a 	or	r5,r5,r3
   48044:	003e4f06 	br	47984 <__alt_data_end+0xfffd1e24>
   48048:	0201ffc4 	movi	r8,2047
   4804c:	223fc71e 	bne	r4,r8,47f6c <__alt_data_end+0xfffd240c>
   48050:	100b883a 	mov	r5,r2
   48054:	3021883a 	mov	r16,r6
   48058:	2023883a 	mov	r17,r4
   4805c:	003e4906 	br	47984 <__alt_data_end+0xfffd1e24>
   48060:	18002a26 	beq	r3,zero,4810c <__adddf3+0x804>
   48064:	1186b03a 	or	r3,r2,r6
   48068:	18000e26 	beq	r3,zero,480a4 <__adddf3+0x79c>
   4806c:	2806d0fa 	srli	r3,r5,3
   48070:	8020d0fa 	srli	r16,r16,3
   48074:	280a977a 	slli	r5,r5,29
   48078:	1900022c 	andhi	r4,r3,8
   4807c:	2c20b03a 	or	r16,r5,r16
   48080:	203feb26 	beq	r4,zero,48030 <__alt_data_end+0xfffd24d0>
   48084:	1008d0fa 	srli	r4,r2,3
   48088:	2140022c 	andhi	r5,r4,8
   4808c:	283fe81e 	bne	r5,zero,48030 <__alt_data_end+0xfffd24d0>
   48090:	300cd0fa 	srli	r6,r6,3
   48094:	1004977a 	slli	r2,r2,29
   48098:	2007883a 	mov	r3,r4
   4809c:	11a0b03a 	or	r16,r2,r6
   480a0:	003fe306 	br	48030 <__alt_data_end+0xfffd24d0>
   480a4:	0441ffc4 	movi	r17,2047
   480a8:	003e3606 	br	47984 <__alt_data_end+0xfffd1e24>
   480ac:	0005883a 	mov	r2,zero
   480b0:	003f8a06 	br	47edc <__alt_data_end+0xfffd237c>
   480b4:	1a3ff804 	addi	r8,r3,-32
   480b8:	02400804 	movi	r9,32
   480bc:	2a10d83a 	srl	r8,r5,r8
   480c0:	1a402a26 	beq	r3,r9,4816c <__adddf3+0x864>
   480c4:	02401004 	movi	r9,64
   480c8:	48c7c83a 	sub	r3,r9,r3
   480cc:	28ca983a 	sll	r5,r5,r3
   480d0:	2c20b03a 	or	r16,r5,r16
   480d4:	8020c03a 	cmpne	r16,r16,zero
   480d8:	8220b03a 	or	r16,r16,r8
   480dc:	000b883a 	mov	r5,zero
   480e0:	003f2b06 	br	47d90 <__alt_data_end+0xfffd2230>
   480e4:	0007883a 	mov	r3,zero
   480e8:	01402034 	movhi	r5,128
   480ec:	297fffc4 	addi	r5,r5,-1
   480f0:	043ffe04 	movi	r16,-8
   480f4:	0441ffc4 	movi	r17,2047
   480f8:	003e8106 	br	47b00 <__alt_data_end+0xfffd1fa0>
   480fc:	2c20b03a 	or	r16,r5,r16
   48100:	8020c03a 	cmpne	r16,r16,zero
   48104:	000b883a 	mov	r5,zero
   48108:	003fa506 	br	47fa0 <__alt_data_end+0xfffd2440>
   4810c:	100b883a 	mov	r5,r2
   48110:	3021883a 	mov	r16,r6
   48114:	0441ffc4 	movi	r17,2047
   48118:	003e1a06 	br	47984 <__alt_data_end+0xfffd1e24>
   4811c:	100b883a 	mov	r5,r2
   48120:	3021883a 	mov	r16,r6
   48124:	003e1706 	br	47984 <__alt_data_end+0xfffd1e24>
   48128:	20c4b03a 	or	r2,r4,r3
   4812c:	103f6026 	beq	r2,zero,47eb0 <__alt_data_end+0xfffd2350>
   48130:	200b883a 	mov	r5,r4
   48134:	1821883a 	mov	r16,r3
   48138:	003e1206 	br	47984 <__alt_data_end+0xfffd1e24>
   4813c:	3a3ff804 	addi	r8,r7,-32
   48140:	02400804 	movi	r9,32
   48144:	2a10d83a 	srl	r8,r5,r8
   48148:	3a400c26 	beq	r7,r9,4817c <__adddf3+0x874>
   4814c:	02401004 	movi	r9,64
   48150:	49cfc83a 	sub	r7,r9,r7
   48154:	29ca983a 	sll	r5,r5,r7
   48158:	2c20b03a 	or	r16,r5,r16
   4815c:	8020c03a 	cmpne	r16,r16,zero
   48160:	8220b03a 	or	r16,r16,r8
   48164:	000b883a 	mov	r5,zero
   48168:	003f8d06 	br	47fa0 <__alt_data_end+0xfffd2440>
   4816c:	000b883a 	mov	r5,zero
   48170:	003fd706 	br	480d0 <__alt_data_end+0xfffd2570>
   48174:	3021883a 	mov	r16,r6
   48178:	003e0206 	br	47984 <__alt_data_end+0xfffd1e24>
   4817c:	000b883a 	mov	r5,zero
   48180:	003ff506 	br	48158 <__alt_data_end+0xfffd25f8>

00048184 <__divdf3>:
   48184:	defff204 	addi	sp,sp,-56
   48188:	dcc00715 	stw	r19,28(sp)
   4818c:	2826d53a 	srli	r19,r5,20
   48190:	dd400915 	stw	r21,36(sp)
   48194:	282ad7fa 	srli	r21,r5,31
   48198:	ddc00b15 	stw	r23,44(sp)
   4819c:	dd800a15 	stw	r22,40(sp)
   481a0:	dc800615 	stw	r18,24(sp)
   481a4:	dfc00d15 	stw	ra,52(sp)
   481a8:	04800434 	movhi	r18,16
   481ac:	94bfffc4 	addi	r18,r18,-1
   481b0:	df000c15 	stw	fp,48(sp)
   481b4:	dd000815 	stw	r20,32(sp)
   481b8:	dc400515 	stw	r17,20(sp)
   481bc:	dc000415 	stw	r16,16(sp)
   481c0:	9cc1ffcc 	andi	r19,r19,2047
   481c4:	202d883a 	mov	r22,r4
   481c8:	2ca4703a 	and	r18,r5,r18
   481cc:	adc03fcc 	andi	r23,r21,255
   481d0:	98006a26 	beq	r19,zero,4837c <__divdf3+0x1f8>
   481d4:	0081ffc4 	movi	r2,2047
   481d8:	2021883a 	mov	r16,r4
   481dc:	98803726 	beq	r19,r2,482bc <__divdf3+0x138>
   481e0:	90800434 	orhi	r2,r18,16
   481e4:	100490fa 	slli	r2,r2,3
   481e8:	2024d77a 	srli	r18,r4,29
   481ec:	202090fa 	slli	r16,r4,3
   481f0:	9cff0044 	addi	r19,r19,-1023
   481f4:	14a4b03a 	or	r18,r2,r18
   481f8:	0029883a 	mov	r20,zero
   481fc:	0039883a 	mov	fp,zero
   48200:	3804d53a 	srli	r2,r7,20
   48204:	382cd7fa 	srli	r22,r7,31
   48208:	04400434 	movhi	r17,16
   4820c:	8c7fffc4 	addi	r17,r17,-1
   48210:	1081ffcc 	andi	r2,r2,2047
   48214:	3011883a 	mov	r8,r6
   48218:	3c62703a 	and	r17,r7,r17
   4821c:	b2403fcc 	andi	r9,r22,255
   48220:	10007326 	beq	r2,zero,483f0 <__divdf3+0x26c>
   48224:	0101ffc4 	movi	r4,2047
   48228:	11006b26 	beq	r2,r4,483d8 <__divdf3+0x254>
   4822c:	89000434 	orhi	r4,r17,16
   48230:	200890fa 	slli	r4,r4,3
   48234:	3022d77a 	srli	r17,r6,29
   48238:	301090fa 	slli	r8,r6,3
   4823c:	10bf0044 	addi	r2,r2,-1023
   48240:	2462b03a 	or	r17,r4,r17
   48244:	000d883a 	mov	r6,zero
   48248:	ad8af03a 	xor	r5,r21,r22
   4824c:	3508b03a 	or	r4,r6,r20
   48250:	00c003c4 	movi	r3,15
   48254:	280f883a 	mov	r7,r5
   48258:	2d003fcc 	andi	r20,r5,255
   4825c:	19009236 	bltu	r3,r4,484a8 <__divdf3+0x324>
   48260:	2109883a 	add	r4,r4,r4
   48264:	00c00174 	movhi	r3,5
   48268:	18e09f04 	addi	r3,r3,-32132
   4826c:	2109883a 	add	r4,r4,r4
   48270:	20c9883a 	add	r4,r4,r3
   48274:	20c00017 	ldw	r3,0(r4)
   48278:	1800683a 	jmp	r3
   4827c:	000484a8 	cmpgeui	zero,zero,4626
   48280:	00048318 	cmpnei	zero,zero,4620
   48284:	00048498 	cmpnei	zero,zero,4626
   48288:	000482e8 	cmpgeui	zero,zero,4619
   4828c:	00048498 	cmpnei	zero,zero,4626
   48290:	00048480 	call	4848 <__reset-0x3b7b8>
   48294:	00048498 	cmpnei	zero,zero,4626
   48298:	000482e8 	cmpgeui	zero,zero,4619
   4829c:	00048318 	cmpnei	zero,zero,4620
   482a0:	00048318 	cmpnei	zero,zero,4620
   482a4:	00048480 	call	4848 <__reset-0x3b7b8>
   482a8:	000482e8 	cmpgeui	zero,zero,4619
   482ac:	000482d8 	cmpnei	zero,zero,4619
   482b0:	000482d8 	cmpnei	zero,zero,4619
   482b4:	000482d8 	cmpnei	zero,zero,4619
   482b8:	00048794 	movui	zero,4638
   482bc:	9104b03a 	or	r2,r18,r4
   482c0:	10006c1e 	bne	r2,zero,48474 <__divdf3+0x2f0>
   482c4:	05000204 	movi	r20,8
   482c8:	0025883a 	mov	r18,zero
   482cc:	0021883a 	mov	r16,zero
   482d0:	07000084 	movi	fp,2
   482d4:	003fca06 	br	48200 <__alt_data_end+0xfffd26a0>
   482d8:	9023883a 	mov	r17,r18
   482dc:	8011883a 	mov	r8,r16
   482e0:	b813883a 	mov	r9,r23
   482e4:	e00d883a 	mov	r6,fp
   482e8:	00800084 	movi	r2,2
   482ec:	30800926 	beq	r6,r2,48314 <__divdf3+0x190>
   482f0:	008000c4 	movi	r2,3
   482f4:	3081d026 	beq	r6,r2,48a38 <__divdf3+0x8b4>
   482f8:	00800044 	movi	r2,1
   482fc:	3081881e 	bne	r6,r2,48920 <__divdf3+0x79c>
   48300:	480f883a 	mov	r7,r9
   48304:	0005883a 	mov	r2,zero
   48308:	0025883a 	mov	r18,zero
   4830c:	0021883a 	mov	r16,zero
   48310:	00000506 	br	48328 <__divdf3+0x1a4>
   48314:	4829883a 	mov	r20,r9
   48318:	a1c0004c 	andi	r7,r20,1
   4831c:	0081ffc4 	movi	r2,2047
   48320:	0025883a 	mov	r18,zero
   48324:	0021883a 	mov	r16,zero
   48328:	1004953a 	slli	r2,r2,20
   4832c:	39c03fcc 	andi	r7,r7,255
   48330:	380e97fa 	slli	r7,r7,31
   48334:	00c00434 	movhi	r3,16
   48338:	18ffffc4 	addi	r3,r3,-1
   4833c:	90e4703a 	and	r18,r18,r3
   48340:	9086b03a 	or	r3,r18,r2
   48344:	19c6b03a 	or	r3,r3,r7
   48348:	8005883a 	mov	r2,r16
   4834c:	dfc00d17 	ldw	ra,52(sp)
   48350:	df000c17 	ldw	fp,48(sp)
   48354:	ddc00b17 	ldw	r23,44(sp)
   48358:	dd800a17 	ldw	r22,40(sp)
   4835c:	dd400917 	ldw	r21,36(sp)
   48360:	dd000817 	ldw	r20,32(sp)
   48364:	dcc00717 	ldw	r19,28(sp)
   48368:	dc800617 	ldw	r18,24(sp)
   4836c:	dc400517 	ldw	r17,20(sp)
   48370:	dc000417 	ldw	r16,16(sp)
   48374:	dec00e04 	addi	sp,sp,56
   48378:	f800283a 	ret
   4837c:	9104b03a 	or	r2,r18,r4
   48380:	10003726 	beq	r2,zero,48460 <__divdf3+0x2dc>
   48384:	90012626 	beq	r18,zero,48820 <__divdf3+0x69c>
   48388:	9009883a 	mov	r4,r18
   4838c:	d9800215 	stw	r6,8(sp)
   48390:	d9c00115 	stw	r7,4(sp)
   48394:	0049c080 	call	49c08 <__clzsi2>
   48398:	d9800217 	ldw	r6,8(sp)
   4839c:	d9c00117 	ldw	r7,4(sp)
   483a0:	00c009c4 	movi	r3,39
   483a4:	18811a16 	blt	r3,r2,48810 <__divdf3+0x68c>
   483a8:	01400a04 	movi	r5,40
   483ac:	143ffe04 	addi	r16,r2,-8
   483b0:	288bc83a 	sub	r5,r5,r2
   483b4:	9424983a 	sll	r18,r18,r16
   483b8:	b14ad83a 	srl	r5,r22,r5
   483bc:	b420983a 	sll	r16,r22,r16
   483c0:	2ca4b03a 	or	r18,r5,r18
   483c4:	04ff0344 	movi	r19,-1011
   483c8:	98a7c83a 	sub	r19,r19,r2
   483cc:	0029883a 	mov	r20,zero
   483d0:	0039883a 	mov	fp,zero
   483d4:	003f8a06 	br	48200 <__alt_data_end+0xfffd26a0>
   483d8:	8988b03a 	or	r4,r17,r6
   483dc:	20001e1e 	bne	r4,zero,48458 <__divdf3+0x2d4>
   483e0:	0023883a 	mov	r17,zero
   483e4:	0011883a 	mov	r8,zero
   483e8:	01800084 	movi	r6,2
   483ec:	003f9606 	br	48248 <__alt_data_end+0xfffd26e8>
   483f0:	8988b03a 	or	r4,r17,r6
   483f4:	20001426 	beq	r4,zero,48448 <__divdf3+0x2c4>
   483f8:	8800fd26 	beq	r17,zero,487f0 <__divdf3+0x66c>
   483fc:	8809883a 	mov	r4,r17
   48400:	d9800215 	stw	r6,8(sp)
   48404:	da400115 	stw	r9,4(sp)
   48408:	0049c080 	call	49c08 <__clzsi2>
   4840c:	d9800217 	ldw	r6,8(sp)
   48410:	da400117 	ldw	r9,4(sp)
   48414:	010009c4 	movi	r4,39
   48418:	2080f116 	blt	r4,r2,487e0 <__divdf3+0x65c>
   4841c:	01000a04 	movi	r4,40
   48420:	123ffe04 	addi	r8,r2,-8
   48424:	2089c83a 	sub	r4,r4,r2
   48428:	8a22983a 	sll	r17,r17,r8
   4842c:	3108d83a 	srl	r4,r6,r4
   48430:	3210983a 	sll	r8,r6,r8
   48434:	2462b03a 	or	r17,r4,r17
   48438:	013f0344 	movi	r4,-1011
   4843c:	2085c83a 	sub	r2,r4,r2
   48440:	000d883a 	mov	r6,zero
   48444:	003f8006 	br	48248 <__alt_data_end+0xfffd26e8>
   48448:	0023883a 	mov	r17,zero
   4844c:	0011883a 	mov	r8,zero
   48450:	01800044 	movi	r6,1
   48454:	003f7c06 	br	48248 <__alt_data_end+0xfffd26e8>
   48458:	018000c4 	movi	r6,3
   4845c:	003f7a06 	br	48248 <__alt_data_end+0xfffd26e8>
   48460:	05000104 	movi	r20,4
   48464:	0025883a 	mov	r18,zero
   48468:	0021883a 	mov	r16,zero
   4846c:	07000044 	movi	fp,1
   48470:	003f6306 	br	48200 <__alt_data_end+0xfffd26a0>
   48474:	05000304 	movi	r20,12
   48478:	070000c4 	movi	fp,3
   4847c:	003f6006 	br	48200 <__alt_data_end+0xfffd26a0>
   48480:	000f883a 	mov	r7,zero
   48484:	04800434 	movhi	r18,16
   48488:	94bfffc4 	addi	r18,r18,-1
   4848c:	043fffc4 	movi	r16,-1
   48490:	0081ffc4 	movi	r2,2047
   48494:	003fa406 	br	48328 <__alt_data_end+0xfffd27c8>
   48498:	0005883a 	mov	r2,zero
   4849c:	0025883a 	mov	r18,zero
   484a0:	0021883a 	mov	r16,zero
   484a4:	003fa006 	br	48328 <__alt_data_end+0xfffd27c8>
   484a8:	9885c83a 	sub	r2,r19,r2
   484ac:	d8800015 	stw	r2,0(sp)
   484b0:	8c80ef36 	bltu	r17,r18,48870 <__divdf3+0x6ec>
   484b4:	9440ed26 	beq	r18,r17,4886c <__divdf3+0x6e8>
   484b8:	d8c00017 	ldw	r3,0(sp)
   484bc:	002d883a 	mov	r22,zero
   484c0:	18ffffc4 	addi	r3,r3,-1
   484c4:	d8c00015 	stw	r3,0(sp)
   484c8:	9007883a 	mov	r3,r18
   484cc:	4026d63a 	srli	r19,r8,24
   484d0:	8822923a 	slli	r17,r17,8
   484d4:	1809883a 	mov	r4,r3
   484d8:	402e923a 	slli	r23,r8,8
   484dc:	9c66b03a 	or	r19,r19,r17
   484e0:	982ad43a 	srli	r21,r19,16
   484e4:	d8c00315 	stw	r3,12(sp)
   484e8:	9f3fffcc 	andi	fp,r19,65535
   484ec:	a80b883a 	mov	r5,r21
   484f0:	00478f80 	call	478f8 <__udivsi3>
   484f4:	d8c00317 	ldw	r3,12(sp)
   484f8:	a80b883a 	mov	r5,r21
   484fc:	1025883a 	mov	r18,r2
   48500:	1809883a 	mov	r4,r3
   48504:	00479000 	call	47900 <__umodsi3>
   48508:	1004943a 	slli	r2,r2,16
   4850c:	8006d43a 	srli	r3,r16,16
   48510:	9709383a 	mul	r4,r18,fp
   48514:	10c6b03a 	or	r3,r2,r3
   48518:	1900062e 	bgeu	r3,r4,48534 <__divdf3+0x3b0>
   4851c:	1cc7883a 	add	r3,r3,r19
   48520:	90bfffc4 	addi	r2,r18,-1
   48524:	1cc0e436 	bltu	r3,r19,488b8 <__divdf3+0x734>
   48528:	1900e32e 	bgeu	r3,r4,488b8 <__divdf3+0x734>
   4852c:	94bfff84 	addi	r18,r18,-2
   48530:	1cc7883a 	add	r3,r3,r19
   48534:	1907c83a 	sub	r3,r3,r4
   48538:	1809883a 	mov	r4,r3
   4853c:	a80b883a 	mov	r5,r21
   48540:	d8c00315 	stw	r3,12(sp)
   48544:	00478f80 	call	478f8 <__udivsi3>
   48548:	d8c00317 	ldw	r3,12(sp)
   4854c:	a80b883a 	mov	r5,r21
   48550:	1023883a 	mov	r17,r2
   48554:	1809883a 	mov	r4,r3
   48558:	00479000 	call	47900 <__umodsi3>
   4855c:	1004943a 	slli	r2,r2,16
   48560:	8f0b383a 	mul	r5,r17,fp
   48564:	843fffcc 	andi	r16,r16,65535
   48568:	1420b03a 	or	r16,r2,r16
   4856c:	8140062e 	bgeu	r16,r5,48588 <__divdf3+0x404>
   48570:	84e1883a 	add	r16,r16,r19
   48574:	88bfffc4 	addi	r2,r17,-1
   48578:	84c0cd36 	bltu	r16,r19,488b0 <__divdf3+0x72c>
   4857c:	8140cc2e 	bgeu	r16,r5,488b0 <__divdf3+0x72c>
   48580:	8c7fff84 	addi	r17,r17,-2
   48584:	84e1883a 	add	r16,r16,r19
   48588:	9004943a 	slli	r2,r18,16
   4858c:	b8ffffcc 	andi	r3,r23,65535
   48590:	b824d43a 	srli	r18,r23,16
   48594:	88a2b03a 	or	r17,r17,r2
   48598:	8808d43a 	srli	r4,r17,16
   4859c:	88bfffcc 	andi	r2,r17,65535
   485a0:	10cd383a 	mul	r6,r2,r3
   485a4:	20cf383a 	mul	r7,r4,r3
   485a8:	1485383a 	mul	r2,r2,r18
   485ac:	3010d43a 	srli	r8,r6,16
   485b0:	814bc83a 	sub	r5,r16,r5
   485b4:	3885883a 	add	r2,r7,r2
   485b8:	1205883a 	add	r2,r2,r8
   485bc:	2489383a 	mul	r4,r4,r18
   485c0:	11c0022e 	bgeu	r2,r7,485cc <__divdf3+0x448>
   485c4:	01c00074 	movhi	r7,1
   485c8:	21c9883a 	add	r4,r4,r7
   485cc:	100ed43a 	srli	r7,r2,16
   485d0:	1020943a 	slli	r16,r2,16
   485d4:	31bfffcc 	andi	r6,r6,65535
   485d8:	21c9883a 	add	r4,r4,r7
   485dc:	81a1883a 	add	r16,r16,r6
   485e0:	29009736 	bltu	r5,r4,48840 <__divdf3+0x6bc>
   485e4:	29009526 	beq	r5,r4,4883c <__divdf3+0x6b8>
   485e8:	2909c83a 	sub	r4,r5,r4
   485ec:	b421c83a 	sub	r16,r22,r16
   485f0:	b42d803a 	cmpltu	r22,r22,r16
   485f4:	25adc83a 	sub	r22,r4,r22
   485f8:	b4c0c326 	beq	r22,r19,48908 <__divdf3+0x784>
   485fc:	b009883a 	mov	r4,r22
   48600:	a80b883a 	mov	r5,r21
   48604:	d8c00315 	stw	r3,12(sp)
   48608:	00478f80 	call	478f8 <__udivsi3>
   4860c:	b009883a 	mov	r4,r22
   48610:	a80b883a 	mov	r5,r21
   48614:	d8800115 	stw	r2,4(sp)
   48618:	00479000 	call	47900 <__umodsi3>
   4861c:	da000117 	ldw	r8,4(sp)
   48620:	1004943a 	slli	r2,r2,16
   48624:	800ad43a 	srli	r5,r16,16
   48628:	4709383a 	mul	r4,r8,fp
   4862c:	d8c00317 	ldw	r3,12(sp)
   48630:	114ab03a 	or	r5,r2,r5
   48634:	2900062e 	bgeu	r5,r4,48650 <__divdf3+0x4cc>
   48638:	2ccb883a 	add	r5,r5,r19
   4863c:	40bfffc4 	addi	r2,r8,-1
   48640:	2cc0b536 	bltu	r5,r19,48918 <__divdf3+0x794>
   48644:	2900b42e 	bgeu	r5,r4,48918 <__divdf3+0x794>
   48648:	423fff84 	addi	r8,r8,-2
   4864c:	2ccb883a 	add	r5,r5,r19
   48650:	290dc83a 	sub	r6,r5,r4
   48654:	3009883a 	mov	r4,r6
   48658:	a80b883a 	mov	r5,r21
   4865c:	d8c00315 	stw	r3,12(sp)
   48660:	da000115 	stw	r8,4(sp)
   48664:	d9800215 	stw	r6,8(sp)
   48668:	00478f80 	call	478f8 <__udivsi3>
   4866c:	d9800217 	ldw	r6,8(sp)
   48670:	a80b883a 	mov	r5,r21
   48674:	102d883a 	mov	r22,r2
   48678:	3009883a 	mov	r4,r6
   4867c:	00479000 	call	47900 <__umodsi3>
   48680:	1004943a 	slli	r2,r2,16
   48684:	b739383a 	mul	fp,r22,fp
   48688:	843fffcc 	andi	r16,r16,65535
   4868c:	1408b03a 	or	r4,r2,r16
   48690:	d8c00317 	ldw	r3,12(sp)
   48694:	da000117 	ldw	r8,4(sp)
   48698:	2700062e 	bgeu	r4,fp,486b4 <__divdf3+0x530>
   4869c:	24c9883a 	add	r4,r4,r19
   486a0:	b0bfffc4 	addi	r2,r22,-1
   486a4:	24c09a36 	bltu	r4,r19,48910 <__divdf3+0x78c>
   486a8:	2700992e 	bgeu	r4,fp,48910 <__divdf3+0x78c>
   486ac:	b5bfff84 	addi	r22,r22,-2
   486b0:	24c9883a 	add	r4,r4,r19
   486b4:	4010943a 	slli	r8,r8,16
   486b8:	2739c83a 	sub	fp,r4,fp
   486bc:	b210b03a 	or	r8,r22,r8
   486c0:	400ad43a 	srli	r5,r8,16
   486c4:	40bfffcc 	andi	r2,r8,65535
   486c8:	10c9383a 	mul	r4,r2,r3
   486cc:	1485383a 	mul	r2,r2,r18
   486d0:	28c7383a 	mul	r3,r5,r3
   486d4:	200cd43a 	srli	r6,r4,16
   486d8:	2ca5383a 	mul	r18,r5,r18
   486dc:	1885883a 	add	r2,r3,r2
   486e0:	1185883a 	add	r2,r2,r6
   486e4:	10c0022e 	bgeu	r2,r3,486f0 <__divdf3+0x56c>
   486e8:	00c00074 	movhi	r3,1
   486ec:	90e5883a 	add	r18,r18,r3
   486f0:	1006d43a 	srli	r3,r2,16
   486f4:	1004943a 	slli	r2,r2,16
   486f8:	213fffcc 	andi	r4,r4,65535
   486fc:	90e5883a 	add	r18,r18,r3
   48700:	1109883a 	add	r4,r2,r4
   48704:	e480602e 	bgeu	fp,r18,48888 <__divdf3+0x704>
   48708:	e4f9883a 	add	fp,fp,r19
   4870c:	40bfffc4 	addi	r2,r8,-1
   48710:	e4c06b2e 	bgeu	fp,r19,488c0 <__divdf3+0x73c>
   48714:	1011883a 	mov	r8,r2
   48718:	e4805e26 	beq	fp,r18,48894 <__divdf3+0x710>
   4871c:	42000054 	ori	r8,r8,1
   48720:	d8c00017 	ldw	r3,0(sp)
   48724:	1880ffc4 	addi	r2,r3,1023
   48728:	00806d0e 	bge	zero,r2,488e0 <__divdf3+0x75c>
   4872c:	40c001cc 	andi	r3,r8,7
   48730:	18000726 	beq	r3,zero,48750 <__divdf3+0x5cc>
   48734:	410003cc 	andi	r4,r8,15
   48738:	00c00104 	movi	r3,4
   4873c:	20c00426 	beq	r4,r3,48750 <__divdf3+0x5cc>
   48740:	40c7883a 	add	r3,r8,r3
   48744:	1a11803a 	cmpltu	r8,r3,r8
   48748:	8a23883a 	add	r17,r17,r8
   4874c:	1811883a 	mov	r8,r3
   48750:	88c0402c 	andhi	r3,r17,256
   48754:	18000526 	beq	r3,zero,4876c <__divdf3+0x5e8>
   48758:	d8c00017 	ldw	r3,0(sp)
   4875c:	00bfc034 	movhi	r2,65280
   48760:	10bfffc4 	addi	r2,r2,-1
   48764:	88a2703a 	and	r17,r17,r2
   48768:	18810004 	addi	r2,r3,1024
   4876c:	00c1ff84 	movi	r3,2046
   48770:	18bee916 	blt	r3,r2,48318 <__alt_data_end+0xfffd27b8>
   48774:	8820977a 	slli	r16,r17,29
   48778:	4010d0fa 	srli	r8,r8,3
   4877c:	8822927a 	slli	r17,r17,9
   48780:	1081ffcc 	andi	r2,r2,2047
   48784:	8220b03a 	or	r16,r16,r8
   48788:	8824d33a 	srli	r18,r17,12
   4878c:	a1c0004c 	andi	r7,r20,1
   48790:	003ee506 	br	48328 <__alt_data_end+0xfffd27c8>
   48794:	9080022c 	andhi	r2,r18,8
   48798:	10000a26 	beq	r2,zero,487c4 <__divdf3+0x640>
   4879c:	8880022c 	andhi	r2,r17,8
   487a0:	1000081e 	bne	r2,zero,487c4 <__divdf3+0x640>
   487a4:	00800434 	movhi	r2,16
   487a8:	10bfffc4 	addi	r2,r2,-1
   487ac:	8c800234 	orhi	r18,r17,8
   487b0:	90a4703a 	and	r18,r18,r2
   487b4:	b00f883a 	mov	r7,r22
   487b8:	4021883a 	mov	r16,r8
   487bc:	0081ffc4 	movi	r2,2047
   487c0:	003ed906 	br	48328 <__alt_data_end+0xfffd27c8>
   487c4:	00800434 	movhi	r2,16
   487c8:	10bfffc4 	addi	r2,r2,-1
   487cc:	94800234 	orhi	r18,r18,8
   487d0:	90a4703a 	and	r18,r18,r2
   487d4:	a80f883a 	mov	r7,r21
   487d8:	0081ffc4 	movi	r2,2047
   487dc:	003ed206 	br	48328 <__alt_data_end+0xfffd27c8>
   487e0:	147ff604 	addi	r17,r2,-40
   487e4:	3462983a 	sll	r17,r6,r17
   487e8:	0011883a 	mov	r8,zero
   487ec:	003f1206 	br	48438 <__alt_data_end+0xfffd28d8>
   487f0:	3009883a 	mov	r4,r6
   487f4:	d9800215 	stw	r6,8(sp)
   487f8:	da400115 	stw	r9,4(sp)
   487fc:	0049c080 	call	49c08 <__clzsi2>
   48800:	10800804 	addi	r2,r2,32
   48804:	da400117 	ldw	r9,4(sp)
   48808:	d9800217 	ldw	r6,8(sp)
   4880c:	003f0106 	br	48414 <__alt_data_end+0xfffd28b4>
   48810:	14bff604 	addi	r18,r2,-40
   48814:	b4a4983a 	sll	r18,r22,r18
   48818:	0021883a 	mov	r16,zero
   4881c:	003ee906 	br	483c4 <__alt_data_end+0xfffd2864>
   48820:	d9800215 	stw	r6,8(sp)
   48824:	d9c00115 	stw	r7,4(sp)
   48828:	0049c080 	call	49c08 <__clzsi2>
   4882c:	10800804 	addi	r2,r2,32
   48830:	d9c00117 	ldw	r7,4(sp)
   48834:	d9800217 	ldw	r6,8(sp)
   48838:	003ed906 	br	483a0 <__alt_data_end+0xfffd2840>
   4883c:	b400262e 	bgeu	r22,r16,488d8 <__divdf3+0x754>
   48840:	b5ed883a 	add	r22,r22,r23
   48844:	b5c5803a 	cmpltu	r2,r22,r23
   48848:	14c5883a 	add	r2,r2,r19
   4884c:	114b883a 	add	r5,r2,r5
   48850:	88bfffc4 	addi	r2,r17,-1
   48854:	9940112e 	bgeu	r19,r5,4889c <__divdf3+0x718>
   48858:	29004e36 	bltu	r5,r4,48994 <__divdf3+0x810>
   4885c:	21401c26 	beq	r4,r5,488d0 <__divdf3+0x74c>
   48860:	2909c83a 	sub	r4,r5,r4
   48864:	1023883a 	mov	r17,r2
   48868:	003f6006 	br	485ec <__alt_data_end+0xfffd2a8c>
   4886c:	443f122e 	bgeu	r8,r16,484b8 <__alt_data_end+0xfffd2958>
   48870:	8008d07a 	srli	r4,r16,1
   48874:	900497fa 	slli	r2,r18,31
   48878:	802c97fa 	slli	r22,r16,31
   4887c:	9006d07a 	srli	r3,r18,1
   48880:	20a0b03a 	or	r16,r4,r2
   48884:	003f1106 	br	484cc <__alt_data_end+0xfffd296c>
   48888:	e4bfa41e 	bne	fp,r18,4871c <__alt_data_end+0xfffd2bbc>
   4888c:	203f9e1e 	bne	r4,zero,48708 <__alt_data_end+0xfffd2ba8>
   48890:	002f883a 	mov	r23,zero
   48894:	b93fa11e 	bne	r23,r4,4871c <__alt_data_end+0xfffd2bbc>
   48898:	003fa106 	br	48720 <__alt_data_end+0xfffd2bc0>
   4889c:	2cfff01e 	bne	r5,r19,48860 <__alt_data_end+0xfffd2d00>
   488a0:	b5ffed2e 	bgeu	r22,r23,48858 <__alt_data_end+0xfffd2cf8>
   488a4:	9909c83a 	sub	r4,r19,r4
   488a8:	1023883a 	mov	r17,r2
   488ac:	003f4f06 	br	485ec <__alt_data_end+0xfffd2a8c>
   488b0:	1023883a 	mov	r17,r2
   488b4:	003f3406 	br	48588 <__alt_data_end+0xfffd2a28>
   488b8:	1025883a 	mov	r18,r2
   488bc:	003f1d06 	br	48534 <__alt_data_end+0xfffd29d4>
   488c0:	e4803a36 	bltu	fp,r18,489ac <__divdf3+0x828>
   488c4:	97005626 	beq	r18,fp,48a20 <__divdf3+0x89c>
   488c8:	1011883a 	mov	r8,r2
   488cc:	003f9306 	br	4871c <__alt_data_end+0xfffd2bbc>
   488d0:	b4003036 	bltu	r22,r16,48994 <__divdf3+0x810>
   488d4:	1023883a 	mov	r17,r2
   488d8:	0009883a 	mov	r4,zero
   488dc:	003f4306 	br	485ec <__alt_data_end+0xfffd2a8c>
   488e0:	d8c00017 	ldw	r3,0(sp)
   488e4:	00bf0084 	movi	r2,-1022
   488e8:	10c5c83a 	sub	r2,r2,r3
   488ec:	00c00e04 	movi	r3,56
   488f0:	18800d0e 	bge	r3,r2,48928 <__divdf3+0x7a4>
   488f4:	a1c0004c 	andi	r7,r20,1
   488f8:	0005883a 	mov	r2,zero
   488fc:	0025883a 	mov	r18,zero
   48900:	0021883a 	mov	r16,zero
   48904:	003e8806 	br	48328 <__alt_data_end+0xfffd27c8>
   48908:	023fffc4 	movi	r8,-1
   4890c:	003f8406 	br	48720 <__alt_data_end+0xfffd2bc0>
   48910:	102d883a 	mov	r22,r2
   48914:	003f6706 	br	486b4 <__alt_data_end+0xfffd2b54>
   48918:	1011883a 	mov	r8,r2
   4891c:	003f4c06 	br	48650 <__alt_data_end+0xfffd2af0>
   48920:	4829883a 	mov	r20,r9
   48924:	003f7e06 	br	48720 <__alt_data_end+0xfffd2bc0>
   48928:	00c007c4 	movi	r3,31
   4892c:	18802616 	blt	r3,r2,489c8 <__divdf3+0x844>
   48930:	d9000017 	ldw	r4,0(sp)
   48934:	408ad83a 	srl	r5,r8,r2
   48938:	8884d83a 	srl	r2,r17,r2
   4893c:	20c10784 	addi	r3,r4,1054
   48940:	88c8983a 	sll	r4,r17,r3
   48944:	40c6983a 	sll	r3,r8,r3
   48948:	2908b03a 	or	r4,r5,r4
   4894c:	1806c03a 	cmpne	r3,r3,zero
   48950:	20c6b03a 	or	r3,r4,r3
   48954:	190001cc 	andi	r4,r3,7
   48958:	20000726 	beq	r4,zero,48978 <__divdf3+0x7f4>
   4895c:	194003cc 	andi	r5,r3,15
   48960:	01000104 	movi	r4,4
   48964:	29000426 	beq	r5,r4,48978 <__divdf3+0x7f4>
   48968:	1909883a 	add	r4,r3,r4
   4896c:	20c7803a 	cmpltu	r3,r4,r3
   48970:	10c5883a 	add	r2,r2,r3
   48974:	2007883a 	mov	r3,r4
   48978:	1100202c 	andhi	r4,r2,128
   4897c:	20002026 	beq	r4,zero,48a00 <__divdf3+0x87c>
   48980:	a1c0004c 	andi	r7,r20,1
   48984:	00800044 	movi	r2,1
   48988:	0025883a 	mov	r18,zero
   4898c:	0021883a 	mov	r16,zero
   48990:	003e6506 	br	48328 <__alt_data_end+0xfffd27c8>
   48994:	b5ed883a 	add	r22,r22,r23
   48998:	b5c5803a 	cmpltu	r2,r22,r23
   4899c:	14c5883a 	add	r2,r2,r19
   489a0:	114b883a 	add	r5,r2,r5
   489a4:	8c7fff84 	addi	r17,r17,-2
   489a8:	003f0f06 	br	485e8 <__alt_data_end+0xfffd2a88>
   489ac:	bdc7883a 	add	r3,r23,r23
   489b0:	1def803a 	cmpltu	r23,r3,r23
   489b4:	bce7883a 	add	r19,r23,r19
   489b8:	40bfff84 	addi	r2,r8,-2
   489bc:	e4f9883a 	add	fp,fp,r19
   489c0:	182f883a 	mov	r23,r3
   489c4:	003f5306 	br	48714 <__alt_data_end+0xfffd2bb4>
   489c8:	d9000017 	ldw	r4,0(sp)
   489cc:	00fef884 	movi	r3,-1054
   489d0:	1907c83a 	sub	r3,r3,r4
   489d4:	01000804 	movi	r4,32
   489d8:	88c6d83a 	srl	r3,r17,r3
   489dc:	11001426 	beq	r2,r4,48a30 <__divdf3+0x8ac>
   489e0:	d9000017 	ldw	r4,0(sp)
   489e4:	20810f84 	addi	r2,r4,1086
   489e8:	8884983a 	sll	r2,r17,r2
   489ec:	1204b03a 	or	r2,r2,r8
   489f0:	1004c03a 	cmpne	r2,r2,zero
   489f4:	10c6b03a 	or	r3,r2,r3
   489f8:	0005883a 	mov	r2,zero
   489fc:	003fd506 	br	48954 <__alt_data_end+0xfffd2df4>
   48a00:	1020977a 	slli	r16,r2,29
   48a04:	1806d0fa 	srli	r3,r3,3
   48a08:	1004927a 	slli	r2,r2,9
   48a0c:	a1c0004c 	andi	r7,r20,1
   48a10:	80e0b03a 	or	r16,r16,r3
   48a14:	1024d33a 	srli	r18,r2,12
   48a18:	0005883a 	mov	r2,zero
   48a1c:	003e4206 	br	48328 <__alt_data_end+0xfffd27c8>
   48a20:	b93fe236 	bltu	r23,r4,489ac <__alt_data_end+0xfffd2e4c>
   48a24:	1011883a 	mov	r8,r2
   48a28:	b93f3c1e 	bne	r23,r4,4871c <__alt_data_end+0xfffd2bbc>
   48a2c:	003f3c06 	br	48720 <__alt_data_end+0xfffd2bc0>
   48a30:	0005883a 	mov	r2,zero
   48a34:	003fed06 	br	489ec <__alt_data_end+0xfffd2e8c>
   48a38:	00800434 	movhi	r2,16
   48a3c:	10bfffc4 	addi	r2,r2,-1
   48a40:	8c800234 	orhi	r18,r17,8
   48a44:	90a4703a 	and	r18,r18,r2
   48a48:	480f883a 	mov	r7,r9
   48a4c:	4021883a 	mov	r16,r8
   48a50:	0081ffc4 	movi	r2,2047
   48a54:	003e3406 	br	48328 <__alt_data_end+0xfffd27c8>

00048a58 <__ledf2>:
   48a58:	2806d53a 	srli	r3,r5,20
   48a5c:	3810d53a 	srli	r8,r7,20
   48a60:	00800434 	movhi	r2,16
   48a64:	10bfffc4 	addi	r2,r2,-1
   48a68:	18c1ffcc 	andi	r3,r3,2047
   48a6c:	0241ffc4 	movi	r9,2047
   48a70:	2894703a 	and	r10,r5,r2
   48a74:	4201ffcc 	andi	r8,r8,2047
   48a78:	3884703a 	and	r2,r7,r2
   48a7c:	280ad7fa 	srli	r5,r5,31
   48a80:	380ed7fa 	srli	r7,r7,31
   48a84:	1a402026 	beq	r3,r9,48b08 <__ledf2+0xb0>
   48a88:	0241ffc4 	movi	r9,2047
   48a8c:	42401726 	beq	r8,r9,48aec <__ledf2+0x94>
   48a90:	18000b26 	beq	r3,zero,48ac0 <__ledf2+0x68>
   48a94:	29403fcc 	andi	r5,r5,255
   48a98:	39c03fcc 	andi	r7,r7,255
   48a9c:	40000f1e 	bne	r8,zero,48adc <__ledf2+0x84>
   48aa0:	0017883a 	mov	r11,zero
   48aa4:	1192b03a 	or	r9,r2,r6
   48aa8:	4813003a 	cmpeq	r9,r9,zero
   48aac:	58001326 	beq	r11,zero,48afc <__ledf2+0xa4>
   48ab0:	48001e1e 	bne	r9,zero,48b2c <__ledf2+0xd4>
   48ab4:	38000b1e 	bne	r7,zero,48ae4 <__ledf2+0x8c>
   48ab8:	00bfffc4 	movi	r2,-1
   48abc:	f800283a 	ret
   48ac0:	5112b03a 	or	r9,r10,r4
   48ac4:	4813003a 	cmpeq	r9,r9,zero
   48ac8:	4817883a 	mov	r11,r9
   48acc:	29403fcc 	andi	r5,r5,255
   48ad0:	39c03fcc 	andi	r7,r7,255
   48ad4:	403ff326 	beq	r8,zero,48aa4 <__alt_data_end+0xfffd2f44>
   48ad8:	483ff61e 	bne	r9,zero,48ab4 <__alt_data_end+0xfffd2f54>
   48adc:	29c00e26 	beq	r5,r7,48b18 <__ledf2+0xc0>
   48ae0:	283ff51e 	bne	r5,zero,48ab8 <__alt_data_end+0xfffd2f58>
   48ae4:	00800044 	movi	r2,1
   48ae8:	f800283a 	ret
   48aec:	1192b03a 	or	r9,r2,r6
   48af0:	483fe726 	beq	r9,zero,48a90 <__alt_data_end+0xfffd2f30>
   48af4:	00800084 	movi	r2,2
   48af8:	f800283a 	ret
   48afc:	483ff726 	beq	r9,zero,48adc <__alt_data_end+0xfffd2f7c>
   48b00:	283ff826 	beq	r5,zero,48ae4 <__alt_data_end+0xfffd2f84>
   48b04:	003fec06 	br	48ab8 <__alt_data_end+0xfffd2f58>
   48b08:	5112b03a 	or	r9,r10,r4
   48b0c:	483fde26 	beq	r9,zero,48a88 <__alt_data_end+0xfffd2f28>
   48b10:	00800084 	movi	r2,2
   48b14:	f800283a 	ret
   48b18:	40fff116 	blt	r8,r3,48ae0 <__alt_data_end+0xfffd2f80>
   48b1c:	1a000716 	blt	r3,r8,48b3c <__ledf2+0xe4>
   48b20:	12bfef36 	bltu	r2,r10,48ae0 <__alt_data_end+0xfffd2f80>
   48b24:	50800326 	beq	r10,r2,48b34 <__ledf2+0xdc>
   48b28:	50800436 	bltu	r10,r2,48b3c <__ledf2+0xe4>
   48b2c:	0005883a 	mov	r2,zero
   48b30:	f800283a 	ret
   48b34:	313fea36 	bltu	r6,r4,48ae0 <__alt_data_end+0xfffd2f80>
   48b38:	21bffc2e 	bgeu	r4,r6,48b2c <__alt_data_end+0xfffd2fcc>
   48b3c:	283fde26 	beq	r5,zero,48ab8 <__alt_data_end+0xfffd2f58>
   48b40:	003fe806 	br	48ae4 <__alt_data_end+0xfffd2f84>

00048b44 <__muldf3>:
   48b44:	defff204 	addi	sp,sp,-56
   48b48:	dd000815 	stw	r20,32(sp)
   48b4c:	2828d53a 	srli	r20,r5,20
   48b50:	dc800615 	stw	r18,24(sp)
   48b54:	2824d7fa 	srli	r18,r5,31
   48b58:	ddc00b15 	stw	r23,44(sp)
   48b5c:	dd400915 	stw	r21,36(sp)
   48b60:	dcc00715 	stw	r19,28(sp)
   48b64:	dc400515 	stw	r17,20(sp)
   48b68:	dfc00d15 	stw	ra,52(sp)
   48b6c:	04400434 	movhi	r17,16
   48b70:	8c7fffc4 	addi	r17,r17,-1
   48b74:	df000c15 	stw	fp,48(sp)
   48b78:	dd800a15 	stw	r22,40(sp)
   48b7c:	dc000415 	stw	r16,16(sp)
   48b80:	a501ffcc 	andi	r20,r20,2047
   48b84:	2027883a 	mov	r19,r4
   48b88:	2c62703a 	and	r17,r5,r17
   48b8c:	902f883a 	mov	r23,r18
   48b90:	95403fcc 	andi	r21,r18,255
   48b94:	a0005d26 	beq	r20,zero,48d0c <__muldf3+0x1c8>
   48b98:	0081ffc4 	movi	r2,2047
   48b9c:	2021883a 	mov	r16,r4
   48ba0:	a0803326 	beq	r20,r2,48c70 <__muldf3+0x12c>
   48ba4:	88800434 	orhi	r2,r17,16
   48ba8:	100490fa 	slli	r2,r2,3
   48bac:	2022d77a 	srli	r17,r4,29
   48bb0:	202090fa 	slli	r16,r4,3
   48bb4:	a53f0044 	addi	r20,r20,-1023
   48bb8:	1462b03a 	or	r17,r2,r17
   48bbc:	0015883a 	mov	r10,zero
   48bc0:	0039883a 	mov	fp,zero
   48bc4:	3804d53a 	srli	r2,r7,20
   48bc8:	382cd7fa 	srli	r22,r7,31
   48bcc:	04c00434 	movhi	r19,16
   48bd0:	9cffffc4 	addi	r19,r19,-1
   48bd4:	1081ffcc 	andi	r2,r2,2047
   48bd8:	300b883a 	mov	r5,r6
   48bdc:	3ce6703a 	and	r19,r7,r19
   48be0:	b2403fcc 	andi	r9,r22,255
   48be4:	10006626 	beq	r2,zero,48d80 <__muldf3+0x23c>
   48be8:	00c1ffc4 	movi	r3,2047
   48bec:	10c05e26 	beq	r2,r3,48d68 <__muldf3+0x224>
   48bf0:	98c00434 	orhi	r3,r19,16
   48bf4:	180690fa 	slli	r3,r3,3
   48bf8:	3026d77a 	srli	r19,r6,29
   48bfc:	300a90fa 	slli	r5,r6,3
   48c00:	10bf0044 	addi	r2,r2,-1023
   48c04:	1ce6b03a 	or	r19,r3,r19
   48c08:	0007883a 	mov	r3,zero
   48c0c:	1a88b03a 	or	r4,r3,r10
   48c10:	2109883a 	add	r4,r4,r4
   48c14:	2109883a 	add	r4,r4,r4
   48c18:	01800174 	movhi	r6,5
   48c1c:	31a30c04 	addi	r6,r6,-29648
   48c20:	2189883a 	add	r4,r4,r6
   48c24:	21000017 	ldw	r4,0(r4)
   48c28:	95a4f03a 	xor	r18,r18,r22
   48c2c:	2000683a 	jmp	r4
   48c30:	00048e68 	cmpgeui	zero,zero,4665
   48c34:	00048e58 	cmpnei	zero,zero,4665
   48c38:	00048e58 	cmpnei	zero,zero,4665
   48c3c:	00048e44 	movi	zero,4665
   48c40:	00048c90 	cmplti	zero,zero,4658
   48c44:	00048c90 	cmplti	zero,zero,4658
   48c48:	00048e2c 	andhi	zero,zero,4664
   48c4c:	00048e44 	movi	zero,4665
   48c50:	00048c90 	cmplti	zero,zero,4658
   48c54:	00048e2c 	andhi	zero,zero,4664
   48c58:	00048c90 	cmplti	zero,zero,4658
   48c5c:	00048e44 	movi	zero,4665
   48c60:	00048c8c 	andi	zero,zero,4658
   48c64:	00048c8c 	andi	zero,zero,4658
   48c68:	00048c8c 	andi	zero,zero,4658
   48c6c:	00049088 	cmpgei	zero,zero,4674
   48c70:	8904b03a 	or	r2,r17,r4
   48c74:	10006a1e 	bne	r2,zero,48e20 <__muldf3+0x2dc>
   48c78:	02800204 	movi	r10,8
   48c7c:	0023883a 	mov	r17,zero
   48c80:	0021883a 	mov	r16,zero
   48c84:	07000084 	movi	fp,2
   48c88:	003fce06 	br	48bc4 <__alt_data_end+0xfffd3064>
   48c8c:	a825883a 	mov	r18,r21
   48c90:	00800084 	movi	r2,2
   48c94:	e0805226 	beq	fp,r2,48de0 <__muldf3+0x29c>
   48c98:	008000c4 	movi	r2,3
   48c9c:	e0815d26 	beq	fp,r2,49214 <__muldf3+0x6d0>
   48ca0:	00800044 	movi	r2,1
   48ca4:	e080db1e 	bne	fp,r2,49014 <__muldf3+0x4d0>
   48ca8:	902f883a 	mov	r23,r18
   48cac:	0005883a 	mov	r2,zero
   48cb0:	0023883a 	mov	r17,zero
   48cb4:	0021883a 	mov	r16,zero
   48cb8:	1004953a 	slli	r2,r2,20
   48cbc:	bdc03fcc 	andi	r23,r23,255
   48cc0:	b82e97fa 	slli	r23,r23,31
   48cc4:	00c00434 	movhi	r3,16
   48cc8:	18ffffc4 	addi	r3,r3,-1
   48ccc:	88e2703a 	and	r17,r17,r3
   48cd0:	8886b03a 	or	r3,r17,r2
   48cd4:	1dc6b03a 	or	r3,r3,r23
   48cd8:	8005883a 	mov	r2,r16
   48cdc:	dfc00d17 	ldw	ra,52(sp)
   48ce0:	df000c17 	ldw	fp,48(sp)
   48ce4:	ddc00b17 	ldw	r23,44(sp)
   48ce8:	dd800a17 	ldw	r22,40(sp)
   48cec:	dd400917 	ldw	r21,36(sp)
   48cf0:	dd000817 	ldw	r20,32(sp)
   48cf4:	dcc00717 	ldw	r19,28(sp)
   48cf8:	dc800617 	ldw	r18,24(sp)
   48cfc:	dc400517 	ldw	r17,20(sp)
   48d00:	dc000417 	ldw	r16,16(sp)
   48d04:	dec00e04 	addi	sp,sp,56
   48d08:	f800283a 	ret
   48d0c:	8904b03a 	or	r2,r17,r4
   48d10:	10003e26 	beq	r2,zero,48e0c <__muldf3+0x2c8>
   48d14:	8800f226 	beq	r17,zero,490e0 <__muldf3+0x59c>
   48d18:	8809883a 	mov	r4,r17
   48d1c:	d9800315 	stw	r6,12(sp)
   48d20:	d9c00115 	stw	r7,4(sp)
   48d24:	0049c080 	call	49c08 <__clzsi2>
   48d28:	d9800317 	ldw	r6,12(sp)
   48d2c:	d9c00117 	ldw	r7,4(sp)
   48d30:	00c009c4 	movi	r3,39
   48d34:	1880e616 	blt	r3,r2,490d0 <__muldf3+0x58c>
   48d38:	00c00a04 	movi	r3,40
   48d3c:	143ffe04 	addi	r16,r2,-8
   48d40:	1887c83a 	sub	r3,r3,r2
   48d44:	8c22983a 	sll	r17,r17,r16
   48d48:	98c6d83a 	srl	r3,r19,r3
   48d4c:	9c20983a 	sll	r16,r19,r16
   48d50:	1c62b03a 	or	r17,r3,r17
   48d54:	053f0344 	movi	r20,-1011
   48d58:	a0a9c83a 	sub	r20,r20,r2
   48d5c:	0015883a 	mov	r10,zero
   48d60:	0039883a 	mov	fp,zero
   48d64:	003f9706 	br	48bc4 <__alt_data_end+0xfffd3064>
   48d68:	9986b03a 	or	r3,r19,r6
   48d6c:	1800251e 	bne	r3,zero,48e04 <__muldf3+0x2c0>
   48d70:	0027883a 	mov	r19,zero
   48d74:	000b883a 	mov	r5,zero
   48d78:	00c00084 	movi	r3,2
   48d7c:	003fa306 	br	48c0c <__alt_data_end+0xfffd30ac>
   48d80:	9986b03a 	or	r3,r19,r6
   48d84:	18001b26 	beq	r3,zero,48df4 <__muldf3+0x2b0>
   48d88:	9800e026 	beq	r19,zero,4910c <__muldf3+0x5c8>
   48d8c:	9809883a 	mov	r4,r19
   48d90:	d9800315 	stw	r6,12(sp)
   48d94:	da400115 	stw	r9,4(sp)
   48d98:	da800215 	stw	r10,8(sp)
   48d9c:	0049c080 	call	49c08 <__clzsi2>
   48da0:	d9800317 	ldw	r6,12(sp)
   48da4:	da400117 	ldw	r9,4(sp)
   48da8:	da800217 	ldw	r10,8(sp)
   48dac:	00c009c4 	movi	r3,39
   48db0:	1880d216 	blt	r3,r2,490fc <__muldf3+0x5b8>
   48db4:	01c00a04 	movi	r7,40
   48db8:	117ffe04 	addi	r5,r2,-8
   48dbc:	388fc83a 	sub	r7,r7,r2
   48dc0:	9966983a 	sll	r19,r19,r5
   48dc4:	31ced83a 	srl	r7,r6,r7
   48dc8:	314a983a 	sll	r5,r6,r5
   48dcc:	3ce6b03a 	or	r19,r7,r19
   48dd0:	00ff0344 	movi	r3,-1011
   48dd4:	1885c83a 	sub	r2,r3,r2
   48dd8:	0007883a 	mov	r3,zero
   48ddc:	003f8b06 	br	48c0c <__alt_data_end+0xfffd30ac>
   48de0:	902f883a 	mov	r23,r18
   48de4:	0081ffc4 	movi	r2,2047
   48de8:	0023883a 	mov	r17,zero
   48dec:	0021883a 	mov	r16,zero
   48df0:	003fb106 	br	48cb8 <__alt_data_end+0xfffd3158>
   48df4:	0027883a 	mov	r19,zero
   48df8:	000b883a 	mov	r5,zero
   48dfc:	00c00044 	movi	r3,1
   48e00:	003f8206 	br	48c0c <__alt_data_end+0xfffd30ac>
   48e04:	00c000c4 	movi	r3,3
   48e08:	003f8006 	br	48c0c <__alt_data_end+0xfffd30ac>
   48e0c:	02800104 	movi	r10,4
   48e10:	0023883a 	mov	r17,zero
   48e14:	0021883a 	mov	r16,zero
   48e18:	07000044 	movi	fp,1
   48e1c:	003f6906 	br	48bc4 <__alt_data_end+0xfffd3064>
   48e20:	02800304 	movi	r10,12
   48e24:	070000c4 	movi	fp,3
   48e28:	003f6606 	br	48bc4 <__alt_data_end+0xfffd3064>
   48e2c:	002f883a 	mov	r23,zero
   48e30:	04400434 	movhi	r17,16
   48e34:	8c7fffc4 	addi	r17,r17,-1
   48e38:	043fffc4 	movi	r16,-1
   48e3c:	0081ffc4 	movi	r2,2047
   48e40:	003f9d06 	br	48cb8 <__alt_data_end+0xfffd3158>
   48e44:	9823883a 	mov	r17,r19
   48e48:	2821883a 	mov	r16,r5
   48e4c:	4825883a 	mov	r18,r9
   48e50:	1839883a 	mov	fp,r3
   48e54:	003f8e06 	br	48c90 <__alt_data_end+0xfffd3130>
   48e58:	9823883a 	mov	r17,r19
   48e5c:	2821883a 	mov	r16,r5
   48e60:	1839883a 	mov	fp,r3
   48e64:	003f8a06 	br	48c90 <__alt_data_end+0xfffd3130>
   48e68:	800cd43a 	srli	r6,r16,16
   48e6c:	2808d43a 	srli	r4,r5,16
   48e70:	843fffcc 	andi	r16,r16,65535
   48e74:	297fffcc 	andi	r5,r5,65535
   48e78:	2c15383a 	mul	r10,r5,r16
   48e7c:	2411383a 	mul	r8,r4,r16
   48e80:	2987383a 	mul	r3,r5,r6
   48e84:	500ed43a 	srli	r7,r10,16
   48e88:	a085883a 	add	r2,r20,r2
   48e8c:	d8800015 	stw	r2,0(sp)
   48e90:	1a05883a 	add	r2,r3,r8
   48e94:	11c5883a 	add	r2,r2,r7
   48e98:	2197383a 	mul	r11,r4,r6
   48e9c:	10c0022e 	bgeu	r2,r3,48ea8 <__muldf3+0x364>
   48ea0:	00c00074 	movhi	r3,1
   48ea4:	58d7883a 	add	r11,r11,r3
   48ea8:	9806d43a 	srli	r3,r19,16
   48eac:	9cffffcc 	andi	r19,r19,65535
   48eb0:	9c13383a 	mul	r9,r19,r16
   48eb4:	9991383a 	mul	r8,r19,r6
   48eb8:	1c21383a 	mul	r16,r3,r16
   48ebc:	481ad43a 	srli	r13,r9,16
   48ec0:	1018943a 	slli	r12,r2,16
   48ec4:	440f883a 	add	r7,r8,r16
   48ec8:	52bfffcc 	andi	r10,r10,65535
   48ecc:	3b4f883a 	add	r7,r7,r13
   48ed0:	1020d43a 	srli	r16,r2,16
   48ed4:	6299883a 	add	r12,r12,r10
   48ed8:	198d383a 	mul	r6,r3,r6
   48edc:	3a00022e 	bgeu	r7,r8,48ee8 <__muldf3+0x3a4>
   48ee0:	00800074 	movhi	r2,1
   48ee4:	308d883a 	add	r6,r6,r2
   48ee8:	8804d43a 	srli	r2,r17,16
   48eec:	8c7fffcc 	andi	r17,r17,65535
   48ef0:	2c55383a 	mul	r10,r5,r17
   48ef4:	2451383a 	mul	r8,r4,r17
   48ef8:	288b383a 	mul	r5,r5,r2
   48efc:	501cd43a 	srli	r14,r10,16
   48f00:	381ad43a 	srli	r13,r7,16
   48f04:	380e943a 	slli	r7,r7,16
   48f08:	2a11883a 	add	r8,r5,r8
   48f0c:	4a7fffcc 	andi	r9,r9,65535
   48f10:	4391883a 	add	r8,r8,r14
   48f14:	334d883a 	add	r6,r6,r13
   48f18:	3a4f883a 	add	r7,r7,r9
   48f1c:	2089383a 	mul	r4,r4,r2
   48f20:	4140022e 	bgeu	r8,r5,48f2c <__muldf3+0x3e8>
   48f24:	01400074 	movhi	r5,1
   48f28:	2149883a 	add	r4,r4,r5
   48f2c:	9c53383a 	mul	r9,r19,r17
   48f30:	1c63383a 	mul	r17,r3,r17
   48f34:	98a7383a 	mul	r19,r19,r2
   48f38:	481cd43a 	srli	r14,r9,16
   48f3c:	401ad43a 	srli	r13,r8,16
   48f40:	4010943a 	slli	r8,r8,16
   48f44:	9c4b883a 	add	r5,r19,r17
   48f48:	52bfffcc 	andi	r10,r10,65535
   48f4c:	2b8b883a 	add	r5,r5,r14
   48f50:	2349883a 	add	r4,r4,r13
   48f54:	4291883a 	add	r8,r8,r10
   48f58:	1887383a 	mul	r3,r3,r2
   48f5c:	2cc0022e 	bgeu	r5,r19,48f68 <__muldf3+0x424>
   48f60:	00800074 	movhi	r2,1
   48f64:	1887883a 	add	r3,r3,r2
   48f68:	2814943a 	slli	r10,r5,16
   48f6c:	3c21883a 	add	r16,r7,r16
   48f70:	4a7fffcc 	andi	r9,r9,65535
   48f74:	82e1883a 	add	r16,r16,r11
   48f78:	5255883a 	add	r10,r10,r9
   48f7c:	81cf803a 	cmpltu	r7,r16,r7
   48f80:	5195883a 	add	r10,r10,r6
   48f84:	8221883a 	add	r16,r16,r8
   48f88:	51d7883a 	add	r11,r10,r7
   48f8c:	8211803a 	cmpltu	r8,r16,r8
   48f90:	2804d43a 	srli	r2,r5,16
   48f94:	22d3883a 	add	r9,r4,r11
   48f98:	4a0b883a 	add	r5,r9,r8
   48f9c:	518d803a 	cmpltu	r6,r10,r6
   48fa0:	59e3803a 	cmpltu	r17,r11,r7
   48fa4:	89a2b03a 	or	r17,r17,r6
   48fa8:	2a11803a 	cmpltu	r8,r5,r8
   48fac:	4909803a 	cmpltu	r4,r9,r4
   48fb0:	88a3883a 	add	r17,r17,r2
   48fb4:	4108b03a 	or	r4,r8,r4
   48fb8:	8923883a 	add	r17,r17,r4
   48fbc:	800c927a 	slli	r6,r16,9
   48fc0:	88c7883a 	add	r3,r17,r3
   48fc4:	2808d5fa 	srli	r4,r5,23
   48fc8:	1822927a 	slli	r17,r3,9
   48fcc:	8020d5fa 	srli	r16,r16,23
   48fd0:	3318b03a 	or	r12,r6,r12
   48fd4:	280a927a 	slli	r5,r5,9
   48fd8:	8922b03a 	or	r17,r17,r4
   48fdc:	6018c03a 	cmpne	r12,r12,zero
   48fe0:	6420b03a 	or	r16,r12,r16
   48fe4:	8880402c 	andhi	r2,r17,256
   48fe8:	8160b03a 	or	r16,r16,r5
   48fec:	10000926 	beq	r2,zero,49014 <__muldf3+0x4d0>
   48ff0:	8006d07a 	srli	r3,r16,1
   48ff4:	8400004c 	andi	r16,r16,1
   48ff8:	880497fa 	slli	r2,r17,31
   48ffc:	80e0b03a 	or	r16,r16,r3
   49000:	d8c00017 	ldw	r3,0(sp)
   49004:	8822d07a 	srli	r17,r17,1
   49008:	80a0b03a 	or	r16,r16,r2
   4900c:	18c00044 	addi	r3,r3,1
   49010:	d8c00015 	stw	r3,0(sp)
   49014:	d8c00017 	ldw	r3,0(sp)
   49018:	1880ffc4 	addi	r2,r3,1023
   4901c:	0080450e 	bge	zero,r2,49134 <__muldf3+0x5f0>
   49020:	80c001cc 	andi	r3,r16,7
   49024:	18000726 	beq	r3,zero,49044 <__muldf3+0x500>
   49028:	810003cc 	andi	r4,r16,15
   4902c:	00c00104 	movi	r3,4
   49030:	20c00426 	beq	r4,r3,49044 <__muldf3+0x500>
   49034:	80c7883a 	add	r3,r16,r3
   49038:	1c21803a 	cmpltu	r16,r3,r16
   4903c:	8c23883a 	add	r17,r17,r16
   49040:	1821883a 	mov	r16,r3
   49044:	88c0402c 	andhi	r3,r17,256
   49048:	18000526 	beq	r3,zero,49060 <__muldf3+0x51c>
   4904c:	d8c00017 	ldw	r3,0(sp)
   49050:	00bfc034 	movhi	r2,65280
   49054:	10bfffc4 	addi	r2,r2,-1
   49058:	88a2703a 	and	r17,r17,r2
   4905c:	18810004 	addi	r2,r3,1024
   49060:	00c1ff84 	movi	r3,2046
   49064:	18bf5e16 	blt	r3,r2,48de0 <__alt_data_end+0xfffd3280>
   49068:	8806977a 	slli	r3,r17,29
   4906c:	8020d0fa 	srli	r16,r16,3
   49070:	8822927a 	slli	r17,r17,9
   49074:	1081ffcc 	andi	r2,r2,2047
   49078:	1c20b03a 	or	r16,r3,r16
   4907c:	8822d33a 	srli	r17,r17,12
   49080:	902f883a 	mov	r23,r18
   49084:	003f0c06 	br	48cb8 <__alt_data_end+0xfffd3158>
   49088:	8880022c 	andhi	r2,r17,8
   4908c:	10000a26 	beq	r2,zero,490b8 <__muldf3+0x574>
   49090:	9880022c 	andhi	r2,r19,8
   49094:	1000081e 	bne	r2,zero,490b8 <__muldf3+0x574>
   49098:	00800434 	movhi	r2,16
   4909c:	10bfffc4 	addi	r2,r2,-1
   490a0:	9c400234 	orhi	r17,r19,8
   490a4:	88a2703a 	and	r17,r17,r2
   490a8:	b02f883a 	mov	r23,r22
   490ac:	2821883a 	mov	r16,r5
   490b0:	0081ffc4 	movi	r2,2047
   490b4:	003f0006 	br	48cb8 <__alt_data_end+0xfffd3158>
   490b8:	00800434 	movhi	r2,16
   490bc:	10bfffc4 	addi	r2,r2,-1
   490c0:	8c400234 	orhi	r17,r17,8
   490c4:	88a2703a 	and	r17,r17,r2
   490c8:	0081ffc4 	movi	r2,2047
   490cc:	003efa06 	br	48cb8 <__alt_data_end+0xfffd3158>
   490d0:	147ff604 	addi	r17,r2,-40
   490d4:	9c62983a 	sll	r17,r19,r17
   490d8:	0021883a 	mov	r16,zero
   490dc:	003f1d06 	br	48d54 <__alt_data_end+0xfffd31f4>
   490e0:	d9800315 	stw	r6,12(sp)
   490e4:	d9c00115 	stw	r7,4(sp)
   490e8:	0049c080 	call	49c08 <__clzsi2>
   490ec:	10800804 	addi	r2,r2,32
   490f0:	d9c00117 	ldw	r7,4(sp)
   490f4:	d9800317 	ldw	r6,12(sp)
   490f8:	003f0d06 	br	48d30 <__alt_data_end+0xfffd31d0>
   490fc:	14fff604 	addi	r19,r2,-40
   49100:	34e6983a 	sll	r19,r6,r19
   49104:	000b883a 	mov	r5,zero
   49108:	003f3106 	br	48dd0 <__alt_data_end+0xfffd3270>
   4910c:	3009883a 	mov	r4,r6
   49110:	d9800315 	stw	r6,12(sp)
   49114:	da400115 	stw	r9,4(sp)
   49118:	da800215 	stw	r10,8(sp)
   4911c:	0049c080 	call	49c08 <__clzsi2>
   49120:	10800804 	addi	r2,r2,32
   49124:	da800217 	ldw	r10,8(sp)
   49128:	da400117 	ldw	r9,4(sp)
   4912c:	d9800317 	ldw	r6,12(sp)
   49130:	003f1e06 	br	48dac <__alt_data_end+0xfffd324c>
   49134:	d8c00017 	ldw	r3,0(sp)
   49138:	00bf0084 	movi	r2,-1022
   4913c:	10c5c83a 	sub	r2,r2,r3
   49140:	00c00e04 	movi	r3,56
   49144:	18bed816 	blt	r3,r2,48ca8 <__alt_data_end+0xfffd3148>
   49148:	00c007c4 	movi	r3,31
   4914c:	18801916 	blt	r3,r2,491b4 <__muldf3+0x670>
   49150:	d8c00017 	ldw	r3,0(sp)
   49154:	808ad83a 	srl	r5,r16,r2
   49158:	8884d83a 	srl	r2,r17,r2
   4915c:	1d410784 	addi	r21,r3,1054
   49160:	8d48983a 	sll	r4,r17,r21
   49164:	8546983a 	sll	r3,r16,r21
   49168:	2908b03a 	or	r4,r5,r4
   4916c:	1806c03a 	cmpne	r3,r3,zero
   49170:	20c6b03a 	or	r3,r4,r3
   49174:	190001cc 	andi	r4,r3,7
   49178:	20000726 	beq	r4,zero,49198 <__muldf3+0x654>
   4917c:	194003cc 	andi	r5,r3,15
   49180:	01000104 	movi	r4,4
   49184:	29000426 	beq	r5,r4,49198 <__muldf3+0x654>
   49188:	1909883a 	add	r4,r3,r4
   4918c:	20c7803a 	cmpltu	r3,r4,r3
   49190:	10c5883a 	add	r2,r2,r3
   49194:	2007883a 	mov	r3,r4
   49198:	1100202c 	andhi	r4,r2,128
   4919c:	20001326 	beq	r4,zero,491ec <__muldf3+0x6a8>
   491a0:	902f883a 	mov	r23,r18
   491a4:	00800044 	movi	r2,1
   491a8:	0023883a 	mov	r17,zero
   491ac:	0021883a 	mov	r16,zero
   491b0:	003ec106 	br	48cb8 <__alt_data_end+0xfffd3158>
   491b4:	d9000017 	ldw	r4,0(sp)
   491b8:	00fef884 	movi	r3,-1054
   491bc:	1907c83a 	sub	r3,r3,r4
   491c0:	01000804 	movi	r4,32
   491c4:	88c6d83a 	srl	r3,r17,r3
   491c8:	11001026 	beq	r2,r4,4920c <__muldf3+0x6c8>
   491cc:	d9000017 	ldw	r4,0(sp)
   491d0:	20810f84 	addi	r2,r4,1086
   491d4:	8884983a 	sll	r2,r17,r2
   491d8:	1404b03a 	or	r2,r2,r16
   491dc:	1004c03a 	cmpne	r2,r2,zero
   491e0:	10c6b03a 	or	r3,r2,r3
   491e4:	0005883a 	mov	r2,zero
   491e8:	003fe206 	br	49174 <__alt_data_end+0xfffd3614>
   491ec:	1020977a 	slli	r16,r2,29
   491f0:	1806d0fa 	srli	r3,r3,3
   491f4:	1004927a 	slli	r2,r2,9
   491f8:	902f883a 	mov	r23,r18
   491fc:	80e0b03a 	or	r16,r16,r3
   49200:	1022d33a 	srli	r17,r2,12
   49204:	0005883a 	mov	r2,zero
   49208:	003eab06 	br	48cb8 <__alt_data_end+0xfffd3158>
   4920c:	0005883a 	mov	r2,zero
   49210:	003ff106 	br	491d8 <__alt_data_end+0xfffd3678>
   49214:	00800434 	movhi	r2,16
   49218:	10bfffc4 	addi	r2,r2,-1
   4921c:	8c400234 	orhi	r17,r17,8
   49220:	88a2703a 	and	r17,r17,r2
   49224:	902f883a 	mov	r23,r18
   49228:	0081ffc4 	movi	r2,2047
   4922c:	003ea206 	br	48cb8 <__alt_data_end+0xfffd3158>

00049230 <__subdf3>:
   49230:	02000434 	movhi	r8,16
   49234:	423fffc4 	addi	r8,r8,-1
   49238:	defffb04 	addi	sp,sp,-20
   4923c:	2a06703a 	and	r3,r5,r8
   49240:	3a10703a 	and	r8,r7,r8
   49244:	3804d53a 	srli	r2,r7,20
   49248:	dc800215 	stw	r18,8(sp)
   4924c:	dc400115 	stw	r17,4(sp)
   49250:	2824d7fa 	srli	r18,r5,31
   49254:	2822d53a 	srli	r17,r5,20
   49258:	401090fa 	slli	r8,r8,3
   4925c:	180a90fa 	slli	r5,r3,3
   49260:	3006d77a 	srli	r3,r6,29
   49264:	2014d77a 	srli	r10,r4,29
   49268:	dc000015 	stw	r16,0(sp)
   4926c:	40d0b03a 	or	r8,r8,r3
   49270:	dfc00415 	stw	ra,16(sp)
   49274:	dcc00315 	stw	r19,12(sp)
   49278:	1081ffcc 	andi	r2,r2,2047
   4927c:	00c1ffc4 	movi	r3,2047
   49280:	9013883a 	mov	r9,r18
   49284:	8c41ffcc 	andi	r17,r17,2047
   49288:	94803fcc 	andi	r18,r18,255
   4928c:	2a8ab03a 	or	r5,r5,r10
   49290:	202090fa 	slli	r16,r4,3
   49294:	380ed7fa 	srli	r7,r7,31
   49298:	300c90fa 	slli	r6,r6,3
   4929c:	10c02e26 	beq	r2,r3,49358 <__subdf3+0x128>
   492a0:	39c0005c 	xori	r7,r7,1
   492a4:	8887c83a 	sub	r3,r17,r2
   492a8:	91c03026 	beq	r18,r7,4936c <__subdf3+0x13c>
   492ac:	00c0a40e 	bge	zero,r3,49540 <__subdf3+0x310>
   492b0:	10004c1e 	bne	r2,zero,493e4 <__subdf3+0x1b4>
   492b4:	4184b03a 	or	r2,r8,r6
   492b8:	10008f1e 	bne	r2,zero,494f8 <__subdf3+0x2c8>
   492bc:	808001cc 	andi	r2,r16,7
   492c0:	10007d26 	beq	r2,zero,494b8 <__subdf3+0x288>
   492c4:	80c003cc 	andi	r3,r16,15
   492c8:	00800104 	movi	r2,4
   492cc:	18807a26 	beq	r3,r2,494b8 <__subdf3+0x288>
   492d0:	80c00104 	addi	r3,r16,4
   492d4:	1c21803a 	cmpltu	r16,r3,r16
   492d8:	2c0b883a 	add	r5,r5,r16
   492dc:	2880202c 	andhi	r2,r5,128
   492e0:	9240004c 	andi	r9,r18,1
   492e4:	1821883a 	mov	r16,r3
   492e8:	10007626 	beq	r2,zero,494c4 <__subdf3+0x294>
   492ec:	8c400044 	addi	r17,r17,1
   492f0:	0081ffc4 	movi	r2,2047
   492f4:	8880b226 	beq	r17,r2,495c0 <__subdf3+0x390>
   492f8:	00bfe034 	movhi	r2,65408
   492fc:	10bfffc4 	addi	r2,r2,-1
   49300:	288a703a 	and	r5,r5,r2
   49304:	2804977a 	slli	r2,r5,29
   49308:	280a927a 	slli	r5,r5,9
   4930c:	8020d0fa 	srli	r16,r16,3
   49310:	280ad33a 	srli	r5,r5,12
   49314:	1404b03a 	or	r2,r2,r16
   49318:	8c41ffcc 	andi	r17,r17,2047
   4931c:	8822953a 	slli	r17,r17,20
   49320:	4a403fcc 	andi	r9,r9,255
   49324:	481297fa 	slli	r9,r9,31
   49328:	00c00434 	movhi	r3,16
   4932c:	18ffffc4 	addi	r3,r3,-1
   49330:	28c6703a 	and	r3,r5,r3
   49334:	1c46b03a 	or	r3,r3,r17
   49338:	1a46b03a 	or	r3,r3,r9
   4933c:	dfc00417 	ldw	ra,16(sp)
   49340:	dcc00317 	ldw	r19,12(sp)
   49344:	dc800217 	ldw	r18,8(sp)
   49348:	dc400117 	ldw	r17,4(sp)
   4934c:	dc000017 	ldw	r16,0(sp)
   49350:	dec00504 	addi	sp,sp,20
   49354:	f800283a 	ret
   49358:	4186b03a 	or	r3,r8,r6
   4935c:	183fd026 	beq	r3,zero,492a0 <__alt_data_end+0xfffd3740>
   49360:	39c03fcc 	andi	r7,r7,255
   49364:	8887c83a 	sub	r3,r17,r2
   49368:	91ffd01e 	bne	r18,r7,492ac <__alt_data_end+0xfffd374c>
   4936c:	00c09b0e 	bge	zero,r3,495dc <__subdf3+0x3ac>
   49370:	10006926 	beq	r2,zero,49518 <__subdf3+0x2e8>
   49374:	0081ffc4 	movi	r2,2047
   49378:	88bfd026 	beq	r17,r2,492bc <__alt_data_end+0xfffd375c>
   4937c:	42002034 	orhi	r8,r8,128
   49380:	00800e04 	movi	r2,56
   49384:	10c0e20e 	bge	r2,r3,49710 <__subdf3+0x4e0>
   49388:	418cb03a 	or	r6,r8,r6
   4938c:	300cc03a 	cmpne	r6,r6,zero
   49390:	0007883a 	mov	r3,zero
   49394:	340d883a 	add	r6,r6,r16
   49398:	3421803a 	cmpltu	r16,r6,r16
   4939c:	194b883a 	add	r5,r3,r5
   493a0:	2c0b883a 	add	r5,r5,r16
   493a4:	3021883a 	mov	r16,r6
   493a8:	2880202c 	andhi	r2,r5,128
   493ac:	103fc326 	beq	r2,zero,492bc <__alt_data_end+0xfffd375c>
   493b0:	8c400044 	addi	r17,r17,1
   493b4:	0081ffc4 	movi	r2,2047
   493b8:	88811026 	beq	r17,r2,497fc <__subdf3+0x5cc>
   493bc:	00bfe034 	movhi	r2,65408
   493c0:	10bfffc4 	addi	r2,r2,-1
   493c4:	288a703a 	and	r5,r5,r2
   493c8:	8006d07a 	srli	r3,r16,1
   493cc:	280497fa 	slli	r2,r5,31
   493d0:	8400004c 	andi	r16,r16,1
   493d4:	80e0b03a 	or	r16,r16,r3
   493d8:	80a0b03a 	or	r16,r16,r2
   493dc:	280ad07a 	srli	r5,r5,1
   493e0:	003fb606 	br	492bc <__alt_data_end+0xfffd375c>
   493e4:	0081ffc4 	movi	r2,2047
   493e8:	88bfb426 	beq	r17,r2,492bc <__alt_data_end+0xfffd375c>
   493ec:	42002034 	orhi	r8,r8,128
   493f0:	00800e04 	movi	r2,56
   493f4:	10c07516 	blt	r2,r3,495cc <__subdf3+0x39c>
   493f8:	008007c4 	movi	r2,31
   493fc:	10c09816 	blt	r2,r3,49660 <__subdf3+0x430>
   49400:	00800804 	movi	r2,32
   49404:	10c5c83a 	sub	r2,r2,r3
   49408:	30c8d83a 	srl	r4,r6,r3
   4940c:	408e983a 	sll	r7,r8,r2
   49410:	3084983a 	sll	r2,r6,r2
   49414:	40c6d83a 	srl	r3,r8,r3
   49418:	3908b03a 	or	r4,r7,r4
   4941c:	1004c03a 	cmpne	r2,r2,zero
   49420:	208cb03a 	or	r6,r4,r2
   49424:	818dc83a 	sub	r6,r16,r6
   49428:	81a1803a 	cmpltu	r16,r16,r6
   4942c:	28cbc83a 	sub	r5,r5,r3
   49430:	2c0bc83a 	sub	r5,r5,r16
   49434:	3021883a 	mov	r16,r6
   49438:	2880202c 	andhi	r2,r5,128
   4943c:	103f9f26 	beq	r2,zero,492bc <__alt_data_end+0xfffd375c>
   49440:	04c02034 	movhi	r19,128
   49444:	9cffffc4 	addi	r19,r19,-1
   49448:	2ce6703a 	and	r19,r5,r19
   4944c:	98004d26 	beq	r19,zero,49584 <__subdf3+0x354>
   49450:	9809883a 	mov	r4,r19
   49454:	0049c080 	call	49c08 <__clzsi2>
   49458:	10fffe04 	addi	r3,r2,-8
   4945c:	010007c4 	movi	r4,31
   49460:	20c04e16 	blt	r4,r3,4959c <__subdf3+0x36c>
   49464:	01000a04 	movi	r4,40
   49468:	2085c83a 	sub	r2,r4,r2
   4946c:	8084d83a 	srl	r2,r16,r2
   49470:	98e6983a 	sll	r19,r19,r3
   49474:	80e0983a 	sll	r16,r16,r3
   49478:	14c4b03a 	or	r2,r2,r19
   4947c:	1c404b16 	blt	r3,r17,495ac <__subdf3+0x37c>
   49480:	1c63c83a 	sub	r17,r3,r17
   49484:	89400044 	addi	r5,r17,1
   49488:	00c007c4 	movi	r3,31
   4948c:	19406716 	blt	r3,r5,4962c <__subdf3+0x3fc>
   49490:	1c47c83a 	sub	r3,r3,r17
   49494:	8148d83a 	srl	r4,r16,r5
   49498:	80e0983a 	sll	r16,r16,r3
   4949c:	10c6983a 	sll	r3,r2,r3
   494a0:	114ad83a 	srl	r5,r2,r5
   494a4:	8004c03a 	cmpne	r2,r16,zero
   494a8:	20e0b03a 	or	r16,r4,r3
   494ac:	80a0b03a 	or	r16,r16,r2
   494b0:	0023883a 	mov	r17,zero
   494b4:	003f8106 	br	492bc <__alt_data_end+0xfffd375c>
   494b8:	2880202c 	andhi	r2,r5,128
   494bc:	9240004c 	andi	r9,r18,1
   494c0:	103f8a1e 	bne	r2,zero,492ec <__alt_data_end+0xfffd378c>
   494c4:	2804977a 	slli	r2,r5,29
   494c8:	8020d0fa 	srli	r16,r16,3
   494cc:	00c1ffc4 	movi	r3,2047
   494d0:	280ad0fa 	srli	r5,r5,3
   494d4:	1404b03a 	or	r2,r2,r16
   494d8:	88c0031e 	bne	r17,r3,494e8 <__subdf3+0x2b8>
   494dc:	1146b03a 	or	r3,r2,r5
   494e0:	18003726 	beq	r3,zero,495c0 <__subdf3+0x390>
   494e4:	29400234 	orhi	r5,r5,8
   494e8:	00c00434 	movhi	r3,16
   494ec:	18ffffc4 	addi	r3,r3,-1
   494f0:	28ca703a 	and	r5,r5,r3
   494f4:	003f8806 	br	49318 <__alt_data_end+0xfffd37b8>
   494f8:	18ffffc4 	addi	r3,r3,-1
   494fc:	1800481e 	bne	r3,zero,49620 <__subdf3+0x3f0>
   49500:	818dc83a 	sub	r6,r16,r6
   49504:	81a1803a 	cmpltu	r16,r16,r6
   49508:	2a0bc83a 	sub	r5,r5,r8
   4950c:	2c0bc83a 	sub	r5,r5,r16
   49510:	3021883a 	mov	r16,r6
   49514:	003fc806 	br	49438 <__alt_data_end+0xfffd38d8>
   49518:	4184b03a 	or	r2,r8,r6
   4951c:	103f6726 	beq	r2,zero,492bc <__alt_data_end+0xfffd375c>
   49520:	18ffffc4 	addi	r3,r3,-1
   49524:	1800931e 	bne	r3,zero,49774 <__subdf3+0x544>
   49528:	340d883a 	add	r6,r6,r16
   4952c:	3421803a 	cmpltu	r16,r6,r16
   49530:	414b883a 	add	r5,r8,r5
   49534:	2c0b883a 	add	r5,r5,r16
   49538:	3021883a 	mov	r16,r6
   4953c:	003f9a06 	br	493a8 <__alt_data_end+0xfffd3848>
   49540:	1800531e 	bne	r3,zero,49690 <__subdf3+0x460>
   49544:	88800044 	addi	r2,r17,1
   49548:	1081ffcc 	andi	r2,r2,2047
   4954c:	00c00044 	movi	r3,1
   49550:	1880a00e 	bge	r3,r2,497d4 <__subdf3+0x5a4>
   49554:	8185c83a 	sub	r2,r16,r6
   49558:	8087803a 	cmpltu	r3,r16,r2
   4955c:	2a27c83a 	sub	r19,r5,r8
   49560:	98e7c83a 	sub	r19,r19,r3
   49564:	98c0202c 	andhi	r3,r19,128
   49568:	18006226 	beq	r3,zero,496f4 <__subdf3+0x4c4>
   4956c:	3421c83a 	sub	r16,r6,r16
   49570:	414bc83a 	sub	r5,r8,r5
   49574:	340d803a 	cmpltu	r6,r6,r16
   49578:	29a7c83a 	sub	r19,r5,r6
   4957c:	3825883a 	mov	r18,r7
   49580:	983fb31e 	bne	r19,zero,49450 <__alt_data_end+0xfffd38f0>
   49584:	8009883a 	mov	r4,r16
   49588:	0049c080 	call	49c08 <__clzsi2>
   4958c:	10800804 	addi	r2,r2,32
   49590:	10fffe04 	addi	r3,r2,-8
   49594:	010007c4 	movi	r4,31
   49598:	20ffb20e 	bge	r4,r3,49464 <__alt_data_end+0xfffd3904>
   4959c:	10bff604 	addi	r2,r2,-40
   495a0:	8084983a 	sll	r2,r16,r2
   495a4:	0021883a 	mov	r16,zero
   495a8:	1c7fb50e 	bge	r3,r17,49480 <__alt_data_end+0xfffd3920>
   495ac:	017fe034 	movhi	r5,65408
   495b0:	297fffc4 	addi	r5,r5,-1
   495b4:	88e3c83a 	sub	r17,r17,r3
   495b8:	114a703a 	and	r5,r2,r5
   495bc:	003f3f06 	br	492bc <__alt_data_end+0xfffd375c>
   495c0:	000b883a 	mov	r5,zero
   495c4:	0005883a 	mov	r2,zero
   495c8:	003f5306 	br	49318 <__alt_data_end+0xfffd37b8>
   495cc:	418cb03a 	or	r6,r8,r6
   495d0:	300cc03a 	cmpne	r6,r6,zero
   495d4:	0007883a 	mov	r3,zero
   495d8:	003f9206 	br	49424 <__alt_data_end+0xfffd38c4>
   495dc:	1800961e 	bne	r3,zero,49838 <__subdf3+0x608>
   495e0:	88800044 	addi	r2,r17,1
   495e4:	1101ffcc 	andi	r4,r2,2047
   495e8:	00c00044 	movi	r3,1
   495ec:	1900680e 	bge	r3,r4,49790 <__subdf3+0x560>
   495f0:	00c1ffc4 	movi	r3,2047
   495f4:	10c0b626 	beq	r2,r3,498d0 <__subdf3+0x6a0>
   495f8:	340d883a 	add	r6,r6,r16
   495fc:	3421803a 	cmpltu	r16,r6,r16
   49600:	414b883a 	add	r5,r8,r5
   49604:	2c0b883a 	add	r5,r5,r16
   49608:	282097fa 	slli	r16,r5,31
   4960c:	300cd07a 	srli	r6,r6,1
   49610:	280ad07a 	srli	r5,r5,1
   49614:	1023883a 	mov	r17,r2
   49618:	81a0b03a 	or	r16,r16,r6
   4961c:	003f2706 	br	492bc <__alt_data_end+0xfffd375c>
   49620:	0081ffc4 	movi	r2,2047
   49624:	88bf721e 	bne	r17,r2,493f0 <__alt_data_end+0xfffd3890>
   49628:	003f2406 	br	492bc <__alt_data_end+0xfffd375c>
   4962c:	893ff844 	addi	r4,r17,-31
   49630:	00c00804 	movi	r3,32
   49634:	1108d83a 	srl	r4,r2,r4
   49638:	28c05126 	beq	r5,r3,49780 <__subdf3+0x550>
   4963c:	00c00fc4 	movi	r3,63
   49640:	1c63c83a 	sub	r17,r3,r17
   49644:	1444983a 	sll	r2,r2,r17
   49648:	1420b03a 	or	r16,r2,r16
   4964c:	8020c03a 	cmpne	r16,r16,zero
   49650:	8120b03a 	or	r16,r16,r4
   49654:	000b883a 	mov	r5,zero
   49658:	0023883a 	mov	r17,zero
   4965c:	003f1706 	br	492bc <__alt_data_end+0xfffd375c>
   49660:	18bff804 	addi	r2,r3,-32
   49664:	01000804 	movi	r4,32
   49668:	4084d83a 	srl	r2,r8,r2
   4966c:	19004626 	beq	r3,r4,49788 <__subdf3+0x558>
   49670:	01001004 	movi	r4,64
   49674:	20c7c83a 	sub	r3,r4,r3
   49678:	40d0983a 	sll	r8,r8,r3
   4967c:	418cb03a 	or	r6,r8,r6
   49680:	300cc03a 	cmpne	r6,r6,zero
   49684:	308cb03a 	or	r6,r6,r2
   49688:	0007883a 	mov	r3,zero
   4968c:	003f6506 	br	49424 <__alt_data_end+0xfffd38c4>
   49690:	88002b26 	beq	r17,zero,49740 <__subdf3+0x510>
   49694:	0101ffc4 	movi	r4,2047
   49698:	11002f26 	beq	r2,r4,49758 <__subdf3+0x528>
   4969c:	00c7c83a 	sub	r3,zero,r3
   496a0:	29402034 	orhi	r5,r5,128
   496a4:	01000e04 	movi	r4,56
   496a8:	20c08516 	blt	r4,r3,498c0 <__subdf3+0x690>
   496ac:	010007c4 	movi	r4,31
   496b0:	20c0cd16 	blt	r4,r3,499e8 <__subdf3+0x7b8>
   496b4:	01000804 	movi	r4,32
   496b8:	20c9c83a 	sub	r4,r4,r3
   496bc:	2914983a 	sll	r10,r5,r4
   496c0:	80d2d83a 	srl	r9,r16,r3
   496c4:	8108983a 	sll	r4,r16,r4
   496c8:	28cad83a 	srl	r5,r5,r3
   496cc:	5252b03a 	or	r9,r10,r9
   496d0:	2006c03a 	cmpne	r3,r4,zero
   496d4:	48e0b03a 	or	r16,r9,r3
   496d8:	3421c83a 	sub	r16,r6,r16
   496dc:	414bc83a 	sub	r5,r8,r5
   496e0:	340d803a 	cmpltu	r6,r6,r16
   496e4:	298bc83a 	sub	r5,r5,r6
   496e8:	1023883a 	mov	r17,r2
   496ec:	3825883a 	mov	r18,r7
   496f0:	003f5106 	br	49438 <__alt_data_end+0xfffd38d8>
   496f4:	9886b03a 	or	r3,r19,r2
   496f8:	18001c1e 	bne	r3,zero,4976c <__subdf3+0x53c>
   496fc:	0013883a 	mov	r9,zero
   49700:	000b883a 	mov	r5,zero
   49704:	0021883a 	mov	r16,zero
   49708:	0023883a 	mov	r17,zero
   4970c:	003f6d06 	br	494c4 <__alt_data_end+0xfffd3964>
   49710:	008007c4 	movi	r2,31
   49714:	10c03c16 	blt	r2,r3,49808 <__subdf3+0x5d8>
   49718:	00800804 	movi	r2,32
   4971c:	10c5c83a 	sub	r2,r2,r3
   49720:	30c8d83a 	srl	r4,r6,r3
   49724:	408e983a 	sll	r7,r8,r2
   49728:	3084983a 	sll	r2,r6,r2
   4972c:	40c6d83a 	srl	r3,r8,r3
   49730:	3908b03a 	or	r4,r7,r4
   49734:	1004c03a 	cmpne	r2,r2,zero
   49738:	208cb03a 	or	r6,r4,r2
   4973c:	003f1506 	br	49394 <__alt_data_end+0xfffd3834>
   49740:	2c08b03a 	or	r4,r5,r16
   49744:	20000426 	beq	r4,zero,49758 <__subdf3+0x528>
   49748:	00c6303a 	nor	r3,zero,r3
   4974c:	183fe226 	beq	r3,zero,496d8 <__alt_data_end+0xfffd3b78>
   49750:	0101ffc4 	movi	r4,2047
   49754:	113fd31e 	bne	r2,r4,496a4 <__alt_data_end+0xfffd3b44>
   49758:	400b883a 	mov	r5,r8
   4975c:	3021883a 	mov	r16,r6
   49760:	1023883a 	mov	r17,r2
   49764:	3825883a 	mov	r18,r7
   49768:	003ed406 	br	492bc <__alt_data_end+0xfffd375c>
   4976c:	1021883a 	mov	r16,r2
   49770:	003f3606 	br	4944c <__alt_data_end+0xfffd38ec>
   49774:	0081ffc4 	movi	r2,2047
   49778:	88bf011e 	bne	r17,r2,49380 <__alt_data_end+0xfffd3820>
   4977c:	003ecf06 	br	492bc <__alt_data_end+0xfffd375c>
   49780:	0005883a 	mov	r2,zero
   49784:	003fb006 	br	49648 <__alt_data_end+0xfffd3ae8>
   49788:	0011883a 	mov	r8,zero
   4978c:	003fbb06 	br	4967c <__alt_data_end+0xfffd3b1c>
   49790:	2c04b03a 	or	r2,r5,r16
   49794:	88007f1e 	bne	r17,zero,49994 <__subdf3+0x764>
   49798:	1000a926 	beq	r2,zero,49a40 <__subdf3+0x810>
   4979c:	4184b03a 	or	r2,r8,r6
   497a0:	103ec626 	beq	r2,zero,492bc <__alt_data_end+0xfffd375c>
   497a4:	340d883a 	add	r6,r6,r16
   497a8:	414b883a 	add	r5,r8,r5
   497ac:	3421803a 	cmpltu	r16,r6,r16
   497b0:	2c0b883a 	add	r5,r5,r16
   497b4:	2880202c 	andhi	r2,r5,128
   497b8:	1000bb26 	beq	r2,zero,49aa8 <__subdf3+0x878>
   497bc:	00bfe034 	movhi	r2,65408
   497c0:	10bfffc4 	addi	r2,r2,-1
   497c4:	288a703a 	and	r5,r5,r2
   497c8:	3021883a 	mov	r16,r6
   497cc:	1823883a 	mov	r17,r3
   497d0:	003eba06 	br	492bc <__alt_data_end+0xfffd375c>
   497d4:	2c04b03a 	or	r2,r5,r16
   497d8:	8800311e 	bne	r17,zero,498a0 <__subdf3+0x670>
   497dc:	1000451e 	bne	r2,zero,498f4 <__subdf3+0x6c4>
   497e0:	4184b03a 	or	r2,r8,r6
   497e4:	10000426 	beq	r2,zero,497f8 <__subdf3+0x5c8>
   497e8:	400b883a 	mov	r5,r8
   497ec:	3021883a 	mov	r16,r6
   497f0:	3825883a 	mov	r18,r7
   497f4:	003eb106 	br	492bc <__alt_data_end+0xfffd375c>
   497f8:	0013883a 	mov	r9,zero
   497fc:	000b883a 	mov	r5,zero
   49800:	0021883a 	mov	r16,zero
   49804:	003f2f06 	br	494c4 <__alt_data_end+0xfffd3964>
   49808:	18bff804 	addi	r2,r3,-32
   4980c:	01000804 	movi	r4,32
   49810:	4084d83a 	srl	r2,r8,r2
   49814:	19007226 	beq	r3,r4,499e0 <__subdf3+0x7b0>
   49818:	01001004 	movi	r4,64
   4981c:	20c7c83a 	sub	r3,r4,r3
   49820:	40d0983a 	sll	r8,r8,r3
   49824:	418cb03a 	or	r6,r8,r6
   49828:	300cc03a 	cmpne	r6,r6,zero
   4982c:	308cb03a 	or	r6,r6,r2
   49830:	0007883a 	mov	r3,zero
   49834:	003ed706 	br	49394 <__alt_data_end+0xfffd3834>
   49838:	8800291e 	bne	r17,zero,498e0 <__subdf3+0x6b0>
   4983c:	2c08b03a 	or	r4,r5,r16
   49840:	20005026 	beq	r4,zero,49984 <__subdf3+0x754>
   49844:	00c6303a 	nor	r3,zero,r3
   49848:	18000f26 	beq	r3,zero,49888 <__subdf3+0x658>
   4984c:	0101ffc4 	movi	r4,2047
   49850:	11004c26 	beq	r2,r4,49984 <__subdf3+0x754>
   49854:	01000e04 	movi	r4,56
   49858:	20c07516 	blt	r4,r3,49a30 <__subdf3+0x800>
   4985c:	010007c4 	movi	r4,31
   49860:	20c08316 	blt	r4,r3,49a70 <__subdf3+0x840>
   49864:	01000804 	movi	r4,32
   49868:	20c9c83a 	sub	r4,r4,r3
   4986c:	2914983a 	sll	r10,r5,r4
   49870:	80ced83a 	srl	r7,r16,r3
   49874:	8108983a 	sll	r4,r16,r4
   49878:	28cad83a 	srl	r5,r5,r3
   4987c:	51ceb03a 	or	r7,r10,r7
   49880:	2006c03a 	cmpne	r3,r4,zero
   49884:	38e0b03a 	or	r16,r7,r3
   49888:	81a1883a 	add	r16,r16,r6
   4988c:	2a0b883a 	add	r5,r5,r8
   49890:	818d803a 	cmpltu	r6,r16,r6
   49894:	298b883a 	add	r5,r5,r6
   49898:	1023883a 	mov	r17,r2
   4989c:	003ec206 	br	493a8 <__alt_data_end+0xfffd3848>
   498a0:	1000221e 	bne	r2,zero,4992c <__subdf3+0x6fc>
   498a4:	4184b03a 	or	r2,r8,r6
   498a8:	10005b26 	beq	r2,zero,49a18 <__subdf3+0x7e8>
   498ac:	400b883a 	mov	r5,r8
   498b0:	3021883a 	mov	r16,r6
   498b4:	3825883a 	mov	r18,r7
   498b8:	0441ffc4 	movi	r17,2047
   498bc:	003e7f06 	br	492bc <__alt_data_end+0xfffd375c>
   498c0:	2c20b03a 	or	r16,r5,r16
   498c4:	8020c03a 	cmpne	r16,r16,zero
   498c8:	000b883a 	mov	r5,zero
   498cc:	003f8206 	br	496d8 <__alt_data_end+0xfffd3b78>
   498d0:	1023883a 	mov	r17,r2
   498d4:	000b883a 	mov	r5,zero
   498d8:	0021883a 	mov	r16,zero
   498dc:	003ef906 	br	494c4 <__alt_data_end+0xfffd3964>
   498e0:	0101ffc4 	movi	r4,2047
   498e4:	11002726 	beq	r2,r4,49984 <__subdf3+0x754>
   498e8:	00c7c83a 	sub	r3,zero,r3
   498ec:	29402034 	orhi	r5,r5,128
   498f0:	003fd806 	br	49854 <__alt_data_end+0xfffd3cf4>
   498f4:	4184b03a 	or	r2,r8,r6
   498f8:	103e7026 	beq	r2,zero,492bc <__alt_data_end+0xfffd375c>
   498fc:	8185c83a 	sub	r2,r16,r6
   49900:	8089803a 	cmpltu	r4,r16,r2
   49904:	2a07c83a 	sub	r3,r5,r8
   49908:	1907c83a 	sub	r3,r3,r4
   4990c:	1900202c 	andhi	r4,r3,128
   49910:	20005226 	beq	r4,zero,49a5c <__subdf3+0x82c>
   49914:	3421c83a 	sub	r16,r6,r16
   49918:	414bc83a 	sub	r5,r8,r5
   4991c:	340d803a 	cmpltu	r6,r6,r16
   49920:	298bc83a 	sub	r5,r5,r6
   49924:	3825883a 	mov	r18,r7
   49928:	003e6406 	br	492bc <__alt_data_end+0xfffd375c>
   4992c:	4184b03a 	or	r2,r8,r6
   49930:	10002926 	beq	r2,zero,499d8 <__subdf3+0x7a8>
   49934:	2804d0fa 	srli	r2,r5,3
   49938:	8020d0fa 	srli	r16,r16,3
   4993c:	280a977a 	slli	r5,r5,29
   49940:	10c0022c 	andhi	r3,r2,8
   49944:	2c20b03a 	or	r16,r5,r16
   49948:	18000826 	beq	r3,zero,4996c <__subdf3+0x73c>
   4994c:	4006d0fa 	srli	r3,r8,3
   49950:	1900022c 	andhi	r4,r3,8
   49954:	2000051e 	bne	r4,zero,4996c <__subdf3+0x73c>
   49958:	300cd0fa 	srli	r6,r6,3
   4995c:	4010977a 	slli	r8,r8,29
   49960:	1805883a 	mov	r2,r3
   49964:	3825883a 	mov	r18,r7
   49968:	41a0b03a 	or	r16,r8,r6
   4996c:	800ad77a 	srli	r5,r16,29
   49970:	100490fa 	slli	r2,r2,3
   49974:	802090fa 	slli	r16,r16,3
   49978:	0441ffc4 	movi	r17,2047
   4997c:	288ab03a 	or	r5,r5,r2
   49980:	003e4e06 	br	492bc <__alt_data_end+0xfffd375c>
   49984:	400b883a 	mov	r5,r8
   49988:	3021883a 	mov	r16,r6
   4998c:	1023883a 	mov	r17,r2
   49990:	003e4a06 	br	492bc <__alt_data_end+0xfffd375c>
   49994:	10002d26 	beq	r2,zero,49a4c <__subdf3+0x81c>
   49998:	4184b03a 	or	r2,r8,r6
   4999c:	10000e26 	beq	r2,zero,499d8 <__subdf3+0x7a8>
   499a0:	2804d0fa 	srli	r2,r5,3
   499a4:	8020d0fa 	srli	r16,r16,3
   499a8:	280a977a 	slli	r5,r5,29
   499ac:	10c0022c 	andhi	r3,r2,8
   499b0:	2c20b03a 	or	r16,r5,r16
   499b4:	183fed26 	beq	r3,zero,4996c <__alt_data_end+0xfffd3e0c>
   499b8:	4006d0fa 	srli	r3,r8,3
   499bc:	1900022c 	andhi	r4,r3,8
   499c0:	203fea1e 	bne	r4,zero,4996c <__alt_data_end+0xfffd3e0c>
   499c4:	300cd0fa 	srli	r6,r6,3
   499c8:	4010977a 	slli	r8,r8,29
   499cc:	1805883a 	mov	r2,r3
   499d0:	41a0b03a 	or	r16,r8,r6
   499d4:	003fe506 	br	4996c <__alt_data_end+0xfffd3e0c>
   499d8:	0441ffc4 	movi	r17,2047
   499dc:	003e3706 	br	492bc <__alt_data_end+0xfffd375c>
   499e0:	0011883a 	mov	r8,zero
   499e4:	003f8f06 	br	49824 <__alt_data_end+0xfffd3cc4>
   499e8:	193ff804 	addi	r4,r3,-32
   499ec:	02400804 	movi	r9,32
   499f0:	2908d83a 	srl	r4,r5,r4
   499f4:	1a402a26 	beq	r3,r9,49aa0 <__subdf3+0x870>
   499f8:	02401004 	movi	r9,64
   499fc:	48c7c83a 	sub	r3,r9,r3
   49a00:	28ca983a 	sll	r5,r5,r3
   49a04:	2c20b03a 	or	r16,r5,r16
   49a08:	8020c03a 	cmpne	r16,r16,zero
   49a0c:	8120b03a 	or	r16,r16,r4
   49a10:	000b883a 	mov	r5,zero
   49a14:	003f3006 	br	496d8 <__alt_data_end+0xfffd3b78>
   49a18:	0013883a 	mov	r9,zero
   49a1c:	01402034 	movhi	r5,128
   49a20:	297fffc4 	addi	r5,r5,-1
   49a24:	043ffe04 	movi	r16,-8
   49a28:	0441ffc4 	movi	r17,2047
   49a2c:	003ea506 	br	494c4 <__alt_data_end+0xfffd3964>
   49a30:	2c20b03a 	or	r16,r5,r16
   49a34:	8020c03a 	cmpne	r16,r16,zero
   49a38:	000b883a 	mov	r5,zero
   49a3c:	003f9206 	br	49888 <__alt_data_end+0xfffd3d28>
   49a40:	400b883a 	mov	r5,r8
   49a44:	3021883a 	mov	r16,r6
   49a48:	003e1c06 	br	492bc <__alt_data_end+0xfffd375c>
   49a4c:	400b883a 	mov	r5,r8
   49a50:	3021883a 	mov	r16,r6
   49a54:	0441ffc4 	movi	r17,2047
   49a58:	003e1806 	br	492bc <__alt_data_end+0xfffd375c>
   49a5c:	1888b03a 	or	r4,r3,r2
   49a60:	203f6526 	beq	r4,zero,497f8 <__alt_data_end+0xfffd3c98>
   49a64:	180b883a 	mov	r5,r3
   49a68:	1021883a 	mov	r16,r2
   49a6c:	003e1306 	br	492bc <__alt_data_end+0xfffd375c>
   49a70:	193ff804 	addi	r4,r3,-32
   49a74:	01c00804 	movi	r7,32
   49a78:	2908d83a 	srl	r4,r5,r4
   49a7c:	19c00c26 	beq	r3,r7,49ab0 <__subdf3+0x880>
   49a80:	01c01004 	movi	r7,64
   49a84:	38c7c83a 	sub	r3,r7,r3
   49a88:	28ca983a 	sll	r5,r5,r3
   49a8c:	2c20b03a 	or	r16,r5,r16
   49a90:	8020c03a 	cmpne	r16,r16,zero
   49a94:	8120b03a 	or	r16,r16,r4
   49a98:	000b883a 	mov	r5,zero
   49a9c:	003f7a06 	br	49888 <__alt_data_end+0xfffd3d28>
   49aa0:	000b883a 	mov	r5,zero
   49aa4:	003fd706 	br	49a04 <__alt_data_end+0xfffd3ea4>
   49aa8:	3021883a 	mov	r16,r6
   49aac:	003e0306 	br	492bc <__alt_data_end+0xfffd375c>
   49ab0:	000b883a 	mov	r5,zero
   49ab4:	003ff506 	br	49a8c <__alt_data_end+0xfffd3f2c>

00049ab8 <__fixdfsi>:
   49ab8:	2806d53a 	srli	r3,r5,20
   49abc:	00800434 	movhi	r2,16
   49ac0:	10bfffc4 	addi	r2,r2,-1
   49ac4:	0180ff84 	movi	r6,1022
   49ac8:	18c1ffcc 	andi	r3,r3,2047
   49acc:	2884703a 	and	r2,r5,r2
   49ad0:	280ad7fa 	srli	r5,r5,31
   49ad4:	30c0120e 	bge	r6,r3,49b20 <__fixdfsi+0x68>
   49ad8:	01810744 	movi	r6,1053
   49adc:	30c00c16 	blt	r6,r3,49b10 <__fixdfsi+0x58>
   49ae0:	01810cc4 	movi	r6,1075
   49ae4:	30cdc83a 	sub	r6,r6,r3
   49ae8:	01c007c4 	movi	r7,31
   49aec:	10800434 	orhi	r2,r2,16
   49af0:	39800d16 	blt	r7,r6,49b28 <__fixdfsi+0x70>
   49af4:	18fefb44 	addi	r3,r3,-1043
   49af8:	2188d83a 	srl	r4,r4,r6
   49afc:	10c4983a 	sll	r2,r2,r3
   49b00:	2084b03a 	or	r2,r4,r2
   49b04:	28000726 	beq	r5,zero,49b24 <__fixdfsi+0x6c>
   49b08:	0085c83a 	sub	r2,zero,r2
   49b0c:	f800283a 	ret
   49b10:	00a00034 	movhi	r2,32768
   49b14:	10bfffc4 	addi	r2,r2,-1
   49b18:	2885883a 	add	r2,r5,r2
   49b1c:	f800283a 	ret
   49b20:	0005883a 	mov	r2,zero
   49b24:	f800283a 	ret
   49b28:	010104c4 	movi	r4,1043
   49b2c:	20c7c83a 	sub	r3,r4,r3
   49b30:	10c4d83a 	srl	r2,r2,r3
   49b34:	003ff306 	br	49b04 <__alt_data_end+0xfffd3fa4>

00049b38 <__floatsidf>:
   49b38:	defffd04 	addi	sp,sp,-12
   49b3c:	dc000015 	stw	r16,0(sp)
   49b40:	dfc00215 	stw	ra,8(sp)
   49b44:	dc400115 	stw	r17,4(sp)
   49b48:	2021883a 	mov	r16,r4
   49b4c:	20002926 	beq	r4,zero,49bf4 <__floatsidf+0xbc>
   49b50:	2022d7fa 	srli	r17,r4,31
   49b54:	88000126 	beq	r17,zero,49b5c <__floatsidf+0x24>
   49b58:	0121c83a 	sub	r16,zero,r4
   49b5c:	8009883a 	mov	r4,r16
   49b60:	0049c080 	call	49c08 <__clzsi2>
   49b64:	01810784 	movi	r6,1054
   49b68:	00c00284 	movi	r3,10
   49b6c:	308dc83a 	sub	r6,r6,r2
   49b70:	1880150e 	bge	r3,r2,49bc8 <__floatsidf+0x90>
   49b74:	113ffd44 	addi	r4,r2,-11
   49b78:	8108983a 	sll	r4,r16,r4
   49b7c:	00800434 	movhi	r2,16
   49b80:	10bfffc4 	addi	r2,r2,-1
   49b84:	3181ffcc 	andi	r6,r6,2047
   49b88:	2088703a 	and	r4,r4,r2
   49b8c:	880b883a 	mov	r5,r17
   49b90:	0005883a 	mov	r2,zero
   49b94:	300c953a 	slli	r6,r6,20
   49b98:	29403fcc 	andi	r5,r5,255
   49b9c:	280a97fa 	slli	r5,r5,31
   49ba0:	00c00434 	movhi	r3,16
   49ba4:	18ffffc4 	addi	r3,r3,-1
   49ba8:	20c8703a 	and	r4,r4,r3
   49bac:	2186b03a 	or	r3,r4,r6
   49bb0:	1946b03a 	or	r3,r3,r5
   49bb4:	dfc00217 	ldw	ra,8(sp)
   49bb8:	dc400117 	ldw	r17,4(sp)
   49bbc:	dc000017 	ldw	r16,0(sp)
   49bc0:	dec00304 	addi	sp,sp,12
   49bc4:	f800283a 	ret
   49bc8:	010002c4 	movi	r4,11
   49bcc:	2089c83a 	sub	r4,r4,r2
   49bd0:	8108d83a 	srl	r4,r16,r4
   49bd4:	10800544 	addi	r2,r2,21
   49bd8:	00c00434 	movhi	r3,16
   49bdc:	18ffffc4 	addi	r3,r3,-1
   49be0:	8084983a 	sll	r2,r16,r2
   49be4:	20c8703a 	and	r4,r4,r3
   49be8:	3181ffcc 	andi	r6,r6,2047
   49bec:	880b883a 	mov	r5,r17
   49bf0:	003fe806 	br	49b94 <__alt_data_end+0xfffd4034>
   49bf4:	000b883a 	mov	r5,zero
   49bf8:	000d883a 	mov	r6,zero
   49bfc:	0009883a 	mov	r4,zero
   49c00:	0005883a 	mov	r2,zero
   49c04:	003fe306 	br	49b94 <__alt_data_end+0xfffd4034>

00049c08 <__clzsi2>:
   49c08:	00bfffd4 	movui	r2,65535
   49c0c:	11000b36 	bltu	r2,r4,49c3c <__clzsi2+0x34>
   49c10:	00803fc4 	movi	r2,255
   49c14:	11001e2e 	bgeu	r2,r4,49c90 <__clzsi2+0x88>
   49c18:	00c00204 	movi	r3,8
   49c1c:	20c8d83a 	srl	r4,r4,r3
   49c20:	00c001b4 	movhi	r3,6
   49c24:	18ddf844 	addi	r3,r3,30689
   49c28:	00800604 	movi	r2,24
   49c2c:	1909883a 	add	r4,r3,r4
   49c30:	20c00003 	ldbu	r3,0(r4)
   49c34:	10c5c83a 	sub	r2,r2,r3
   49c38:	f800283a 	ret
   49c3c:	00804034 	movhi	r2,256
   49c40:	10bfffc4 	addi	r2,r2,-1
   49c44:	11000936 	bltu	r2,r4,49c6c <__clzsi2+0x64>
   49c48:	00800404 	movi	r2,16
   49c4c:	1007883a 	mov	r3,r2
   49c50:	20c8d83a 	srl	r4,r4,r3
   49c54:	00c001b4 	movhi	r3,6
   49c58:	18ddf844 	addi	r3,r3,30689
   49c5c:	1909883a 	add	r4,r3,r4
   49c60:	20c00003 	ldbu	r3,0(r4)
   49c64:	10c5c83a 	sub	r2,r2,r3
   49c68:	f800283a 	ret
   49c6c:	00c00604 	movi	r3,24
   49c70:	20c8d83a 	srl	r4,r4,r3
   49c74:	00c001b4 	movhi	r3,6
   49c78:	18ddf844 	addi	r3,r3,30689
   49c7c:	00800204 	movi	r2,8
   49c80:	1909883a 	add	r4,r3,r4
   49c84:	20c00003 	ldbu	r3,0(r4)
   49c88:	10c5c83a 	sub	r2,r2,r3
   49c8c:	f800283a 	ret
   49c90:	0007883a 	mov	r3,zero
   49c94:	20c8d83a 	srl	r4,r4,r3
   49c98:	00c001b4 	movhi	r3,6
   49c9c:	18ddf844 	addi	r3,r3,30689
   49ca0:	00800804 	movi	r2,32
   49ca4:	1909883a 	add	r4,r3,r4
   49ca8:	20c00003 	ldbu	r3,0(r4)
   49cac:	10c5c83a 	sub	r2,r2,r3
   49cb0:	f800283a 	ret

00049cb4 <__errno>:
   49cb4:	008001f4 	movhi	r2,7
   49cb8:	10a6e304 	addi	r2,r2,-25716
   49cbc:	10800017 	ldw	r2,0(r2)
   49cc0:	f800283a 	ret

00049cc4 <malloc>:
   49cc4:	008001f4 	movhi	r2,7
   49cc8:	10a6e304 	addi	r2,r2,-25716
   49ccc:	200b883a 	mov	r5,r4
   49cd0:	11000017 	ldw	r4,0(r2)
   49cd4:	0049cec1 	jmpi	49cec <_malloc_r>

00049cd8 <free>:
   49cd8:	008001f4 	movhi	r2,7
   49cdc:	10a6e304 	addi	r2,r2,-25716
   49ce0:	200b883a 	mov	r5,r4
   49ce4:	11000017 	ldw	r4,0(r2)
   49ce8:	004b3e41 	jmpi	4b3e4 <_free_r>

00049cec <_malloc_r>:
   49cec:	defff604 	addi	sp,sp,-40
   49cf0:	dcc00315 	stw	r19,12(sp)
   49cf4:	dfc00915 	stw	ra,36(sp)
   49cf8:	df000815 	stw	fp,32(sp)
   49cfc:	ddc00715 	stw	r23,28(sp)
   49d00:	dd800615 	stw	r22,24(sp)
   49d04:	dd400515 	stw	r21,20(sp)
   49d08:	dd000415 	stw	r20,16(sp)
   49d0c:	dc800215 	stw	r18,8(sp)
   49d10:	dc400115 	stw	r17,4(sp)
   49d14:	dc000015 	stw	r16,0(sp)
   49d18:	288002c4 	addi	r2,r5,11
   49d1c:	00c00584 	movi	r3,22
   49d20:	2027883a 	mov	r19,r4
   49d24:	1880042e 	bgeu	r3,r2,49d38 <_malloc_r+0x4c>
   49d28:	043ffe04 	movi	r16,-8
   49d2c:	1420703a 	and	r16,r2,r16
   49d30:	8000020e 	bge	r16,zero,49d3c <_malloc_r+0x50>
   49d34:	00000206 	br	49d40 <_malloc_r+0x54>
   49d38:	04000404 	movi	r16,16
   49d3c:	8140032e 	bgeu	r16,r5,49d4c <_malloc_r+0x60>
   49d40:	00800304 	movi	r2,12
   49d44:	98800015 	stw	r2,0(r19)
   49d48:	00017006 	br	4a30c <_malloc_r+0x620>
   49d4c:	9809883a 	mov	r4,r19
   49d50:	004bdec0 	call	4bdec <__malloc_lock>
   49d54:	00807dc4 	movi	r2,503
   49d58:	044001f4 	movhi	r17,7
   49d5c:	8c656804 	addi	r17,r17,-27232
   49d60:	14001436 	bltu	r2,r16,49db4 <_malloc_r+0xc8>
   49d64:	800ad0fa 	srli	r5,r16,3
   49d68:	2945883a 	add	r2,r5,r5
   49d6c:	1085883a 	add	r2,r2,r2
   49d70:	1085883a 	add	r2,r2,r2
   49d74:	8885883a 	add	r2,r17,r2
   49d78:	14800317 	ldw	r18,12(r2)
   49d7c:	9080031e 	bne	r18,r2,49d8c <_malloc_r+0xa0>
   49d80:	90800204 	addi	r2,r18,8
   49d84:	94800517 	ldw	r18,20(r18)
   49d88:	90800826 	beq	r18,r2,49dac <_malloc_r+0xc0>
   49d8c:	90c00117 	ldw	r3,4(r18)
   49d90:	00bfff04 	movi	r2,-4
   49d94:	91000217 	ldw	r4,8(r18)
   49d98:	1884703a 	and	r2,r3,r2
   49d9c:	90c00317 	ldw	r3,12(r18)
   49da0:	20c00315 	stw	r3,12(r4)
   49da4:	19000215 	stw	r4,8(r3)
   49da8:	00004b06 	br	49ed8 <_malloc_r+0x1ec>
   49dac:	29400084 	addi	r5,r5,2
   49db0:	00003506 	br	49e88 <_malloc_r+0x19c>
   49db4:	800ad27a 	srli	r5,r16,9
   49db8:	28001826 	beq	r5,zero,49e1c <_malloc_r+0x130>
   49dbc:	00800104 	movi	r2,4
   49dc0:	11400336 	bltu	r2,r5,49dd0 <_malloc_r+0xe4>
   49dc4:	800ad1ba 	srli	r5,r16,6
   49dc8:	29400e04 	addi	r5,r5,56
   49dcc:	00001606 	br	49e28 <_malloc_r+0x13c>
   49dd0:	00800504 	movi	r2,20
   49dd4:	11400236 	bltu	r2,r5,49de0 <_malloc_r+0xf4>
   49dd8:	294016c4 	addi	r5,r5,91
   49ddc:	00001206 	br	49e28 <_malloc_r+0x13c>
   49de0:	00801504 	movi	r2,84
   49de4:	11400336 	bltu	r2,r5,49df4 <_malloc_r+0x108>
   49de8:	800ad33a 	srli	r5,r16,12
   49dec:	29401b84 	addi	r5,r5,110
   49df0:	00000d06 	br	49e28 <_malloc_r+0x13c>
   49df4:	00805504 	movi	r2,340
   49df8:	11400336 	bltu	r2,r5,49e08 <_malloc_r+0x11c>
   49dfc:	800ad3fa 	srli	r5,r16,15
   49e00:	29401dc4 	addi	r5,r5,119
   49e04:	00000806 	br	49e28 <_malloc_r+0x13c>
   49e08:	00815504 	movi	r2,1364
   49e0c:	11400536 	bltu	r2,r5,49e24 <_malloc_r+0x138>
   49e10:	800ad4ba 	srli	r5,r16,18
   49e14:	29401f04 	addi	r5,r5,124
   49e18:	00000306 	br	49e28 <_malloc_r+0x13c>
   49e1c:	01400fc4 	movi	r5,63
   49e20:	00000106 	br	49e28 <_malloc_r+0x13c>
   49e24:	01401f84 	movi	r5,126
   49e28:	2945883a 	add	r2,r5,r5
   49e2c:	1085883a 	add	r2,r2,r2
   49e30:	1085883a 	add	r2,r2,r2
   49e34:	8885883a 	add	r2,r17,r2
   49e38:	14800317 	ldw	r18,12(r2)
   49e3c:	01bfff04 	movi	r6,-4
   49e40:	01c003c4 	movi	r7,15
   49e44:	90800f26 	beq	r18,r2,49e84 <_malloc_r+0x198>
   49e48:	90c00117 	ldw	r3,4(r18)
   49e4c:	1986703a 	and	r3,r3,r6
   49e50:	1c09c83a 	sub	r4,r3,r16
   49e54:	3900020e 	bge	r7,r4,49e60 <_malloc_r+0x174>
   49e58:	297fffc4 	addi	r5,r5,-1
   49e5c:	00000906 	br	49e84 <_malloc_r+0x198>
   49e60:	20000616 	blt	r4,zero,49e7c <_malloc_r+0x190>
   49e64:	90800317 	ldw	r2,12(r18)
   49e68:	91000217 	ldw	r4,8(r18)
   49e6c:	20800315 	stw	r2,12(r4)
   49e70:	11000215 	stw	r4,8(r2)
   49e74:	90c5883a 	add	r2,r18,r3
   49e78:	00001806 	br	49edc <_malloc_r+0x1f0>
   49e7c:	94800317 	ldw	r18,12(r18)
   49e80:	003ff006 	br	49e44 <__alt_data_end+0xfffd42e4>
   49e84:	29400044 	addi	r5,r5,1
   49e88:	8c800417 	ldw	r18,16(r17)
   49e8c:	00c001f4 	movhi	r3,7
   49e90:	18e56804 	addi	r3,r3,-27232
   49e94:	19800204 	addi	r6,r3,8
   49e98:	91805d26 	beq	r18,r6,4a010 <_malloc_r+0x324>
   49e9c:	91000117 	ldw	r4,4(r18)
   49ea0:	00bfff04 	movi	r2,-4
   49ea4:	01c003c4 	movi	r7,15
   49ea8:	2084703a 	and	r2,r4,r2
   49eac:	1409c83a 	sub	r4,r2,r16
   49eb0:	3900060e 	bge	r7,r4,49ecc <_malloc_r+0x1e0>
   49eb4:	9405883a 	add	r2,r18,r16
   49eb8:	84000054 	ori	r16,r16,1
   49ebc:	94000115 	stw	r16,4(r18)
   49ec0:	18800515 	stw	r2,20(r3)
   49ec4:	18800415 	stw	r2,16(r3)
   49ec8:	00007706 	br	4a0a8 <_malloc_r+0x3bc>
   49ecc:	19800515 	stw	r6,20(r3)
   49ed0:	19800415 	stw	r6,16(r3)
   49ed4:	20000516 	blt	r4,zero,49eec <_malloc_r+0x200>
   49ed8:	9085883a 	add	r2,r18,r2
   49edc:	10c00117 	ldw	r3,4(r2)
   49ee0:	18c00054 	ori	r3,r3,1
   49ee4:	10c00115 	stw	r3,4(r2)
   49ee8:	00011106 	br	4a330 <_malloc_r+0x644>
   49eec:	01007fc4 	movi	r4,511
   49ef0:	20801136 	bltu	r4,r2,49f38 <_malloc_r+0x24c>
   49ef4:	1004d0fa 	srli	r2,r2,3
   49ef8:	01c00044 	movi	r7,1
   49efc:	1009d0ba 	srai	r4,r2,2
   49f00:	1085883a 	add	r2,r2,r2
   49f04:	1085883a 	add	r2,r2,r2
   49f08:	3908983a 	sll	r4,r7,r4
   49f0c:	19c00117 	ldw	r7,4(r3)
   49f10:	1085883a 	add	r2,r2,r2
   49f14:	21c8b03a 	or	r4,r4,r7
   49f18:	19000115 	stw	r4,4(r3)
   49f1c:	10c7883a 	add	r3,r2,r3
   49f20:	18800217 	ldw	r2,8(r3)
   49f24:	90c00315 	stw	r3,12(r18)
   49f28:	90800215 	stw	r2,8(r18)
   49f2c:	1c800215 	stw	r18,8(r3)
   49f30:	14800315 	stw	r18,12(r2)
   49f34:	00003606 	br	4a010 <_malloc_r+0x324>
   49f38:	1008d27a 	srli	r4,r2,9
   49f3c:	00c00104 	movi	r3,4
   49f40:	19000336 	bltu	r3,r4,49f50 <_malloc_r+0x264>
   49f44:	1008d1ba 	srli	r4,r2,6
   49f48:	21000e04 	addi	r4,r4,56
   49f4c:	00001406 	br	49fa0 <_malloc_r+0x2b4>
   49f50:	00c00504 	movi	r3,20
   49f54:	19000236 	bltu	r3,r4,49f60 <_malloc_r+0x274>
   49f58:	210016c4 	addi	r4,r4,91
   49f5c:	00001006 	br	49fa0 <_malloc_r+0x2b4>
   49f60:	00c01504 	movi	r3,84
   49f64:	19000336 	bltu	r3,r4,49f74 <_malloc_r+0x288>
   49f68:	1008d33a 	srli	r4,r2,12
   49f6c:	21001b84 	addi	r4,r4,110
   49f70:	00000b06 	br	49fa0 <_malloc_r+0x2b4>
   49f74:	00c05504 	movi	r3,340
   49f78:	19000336 	bltu	r3,r4,49f88 <_malloc_r+0x29c>
   49f7c:	1008d3fa 	srli	r4,r2,15
   49f80:	21001dc4 	addi	r4,r4,119
   49f84:	00000606 	br	49fa0 <_malloc_r+0x2b4>
   49f88:	00c15504 	movi	r3,1364
   49f8c:	19000336 	bltu	r3,r4,49f9c <_malloc_r+0x2b0>
   49f90:	1008d4ba 	srli	r4,r2,18
   49f94:	21001f04 	addi	r4,r4,124
   49f98:	00000106 	br	49fa0 <_malloc_r+0x2b4>
   49f9c:	01001f84 	movi	r4,126
   49fa0:	210f883a 	add	r7,r4,r4
   49fa4:	39cf883a 	add	r7,r7,r7
   49fa8:	39cf883a 	add	r7,r7,r7
   49fac:	89cf883a 	add	r7,r17,r7
   49fb0:	38c00217 	ldw	r3,8(r7)
   49fb4:	020001f4 	movhi	r8,7
   49fb8:	42256804 	addi	r8,r8,-27232
   49fbc:	19c00226 	beq	r3,r7,49fc8 <_malloc_r+0x2dc>
   49fc0:	023fff04 	movi	r8,-4
   49fc4:	00000a06 	br	49ff0 <_malloc_r+0x304>
   49fc8:	2009d0ba 	srai	r4,r4,2
   49fcc:	00800044 	movi	r2,1
   49fd0:	1108983a 	sll	r4,r2,r4
   49fd4:	40800117 	ldw	r2,4(r8)
   49fd8:	2088b03a 	or	r4,r4,r2
   49fdc:	41000115 	stw	r4,4(r8)
   49fe0:	1805883a 	mov	r2,r3
   49fe4:	00000606 	br	4a000 <_malloc_r+0x314>
   49fe8:	18c00217 	ldw	r3,8(r3)
   49fec:	19c00326 	beq	r3,r7,49ffc <_malloc_r+0x310>
   49ff0:	19000117 	ldw	r4,4(r3)
   49ff4:	2208703a 	and	r4,r4,r8
   49ff8:	113ffb36 	bltu	r2,r4,49fe8 <__alt_data_end+0xfffd4488>
   49ffc:	18800317 	ldw	r2,12(r3)
   4a000:	90800315 	stw	r2,12(r18)
   4a004:	90c00215 	stw	r3,8(r18)
   4a008:	14800215 	stw	r18,8(r2)
   4a00c:	1c800315 	stw	r18,12(r3)
   4a010:	2805d0ba 	srai	r2,r5,2
   4a014:	00c00044 	movi	r3,1
   4a018:	1886983a 	sll	r3,r3,r2
   4a01c:	88800117 	ldw	r2,4(r17)
   4a020:	10c04b36 	bltu	r2,r3,4a150 <_malloc_r+0x464>
   4a024:	1888703a 	and	r4,r3,r2
   4a028:	2000061e 	bne	r4,zero,4a044 <_malloc_r+0x358>
   4a02c:	013fff04 	movi	r4,-4
   4a030:	290a703a 	and	r5,r5,r4
   4a034:	18c7883a 	add	r3,r3,r3
   4a038:	1888703a 	and	r4,r3,r2
   4a03c:	29400104 	addi	r5,r5,4
   4a040:	203ffc26 	beq	r4,zero,4a034 <__alt_data_end+0xfffd44d4>
   4a044:	02bfff04 	movi	r10,-4
   4a048:	02c003c4 	movi	r11,15
   4a04c:	2945883a 	add	r2,r5,r5
   4a050:	1085883a 	add	r2,r2,r2
   4a054:	1085883a 	add	r2,r2,r2
   4a058:	8885883a 	add	r2,r17,r2
   4a05c:	1011883a 	mov	r8,r2
   4a060:	280f883a 	mov	r7,r5
   4a064:	44800317 	ldw	r18,12(r8)
   4a068:	00000106 	br	4a070 <_malloc_r+0x384>
   4a06c:	94800317 	ldw	r18,12(r18)
   4a070:	92001e26 	beq	r18,r8,4a0ec <_malloc_r+0x400>
   4a074:	92400117 	ldw	r9,4(r18)
   4a078:	4a92703a 	and	r9,r9,r10
   4a07c:	4c09c83a 	sub	r4,r9,r16
   4a080:	5900100e 	bge	r11,r4,4a0c4 <_malloc_r+0x3d8>
   4a084:	90c00317 	ldw	r3,12(r18)
   4a088:	91400217 	ldw	r5,8(r18)
   4a08c:	9405883a 	add	r2,r18,r16
   4a090:	84000054 	ori	r16,r16,1
   4a094:	94000115 	stw	r16,4(r18)
   4a098:	28c00315 	stw	r3,12(r5)
   4a09c:	19400215 	stw	r5,8(r3)
   4a0a0:	88800515 	stw	r2,20(r17)
   4a0a4:	88800415 	stw	r2,16(r17)
   4a0a8:	20c00054 	ori	r3,r4,1
   4a0ac:	11800315 	stw	r6,12(r2)
   4a0b0:	11800215 	stw	r6,8(r2)
   4a0b4:	10c00115 	stw	r3,4(r2)
   4a0b8:	1105883a 	add	r2,r2,r4
   4a0bc:	11000015 	stw	r4,0(r2)
   4a0c0:	00009b06 	br	4a330 <_malloc_r+0x644>
   4a0c4:	203fe916 	blt	r4,zero,4a06c <__alt_data_end+0xfffd450c>
   4a0c8:	9245883a 	add	r2,r18,r9
   4a0cc:	10c00117 	ldw	r3,4(r2)
   4a0d0:	18c00054 	ori	r3,r3,1
   4a0d4:	10c00115 	stw	r3,4(r2)
   4a0d8:	90800317 	ldw	r2,12(r18)
   4a0dc:	90c00217 	ldw	r3,8(r18)
   4a0e0:	18800315 	stw	r2,12(r3)
   4a0e4:	10c00215 	stw	r3,8(r2)
   4a0e8:	00009106 	br	4a330 <_malloc_r+0x644>
   4a0ec:	39c00044 	addi	r7,r7,1
   4a0f0:	390000cc 	andi	r4,r7,3
   4a0f4:	42000204 	addi	r8,r8,8
   4a0f8:	203fda1e 	bne	r4,zero,4a064 <__alt_data_end+0xfffd4504>
   4a0fc:	290000cc 	andi	r4,r5,3
   4a100:	2000051e 	bne	r4,zero,4a118 <_malloc_r+0x42c>
   4a104:	89000117 	ldw	r4,4(r17)
   4a108:	00c4303a 	nor	r2,zero,r3
   4a10c:	1104703a 	and	r2,r2,r4
   4a110:	88800115 	stw	r2,4(r17)
   4a114:	00000406 	br	4a128 <_malloc_r+0x43c>
   4a118:	113ffe04 	addi	r4,r2,-8
   4a11c:	10800017 	ldw	r2,0(r2)
   4a120:	297fffc4 	addi	r5,r5,-1
   4a124:	113ff526 	beq	r2,r4,4a0fc <__alt_data_end+0xfffd459c>
   4a128:	88800117 	ldw	r2,4(r17)
   4a12c:	18c7883a 	add	r3,r3,r3
   4a130:	10c00736 	bltu	r2,r3,4a150 <_malloc_r+0x464>
   4a134:	18000626 	beq	r3,zero,4a150 <_malloc_r+0x464>
   4a138:	380b883a 	mov	r5,r7
   4a13c:	1888703a 	and	r4,r3,r2
   4a140:	203fc21e 	bne	r4,zero,4a04c <__alt_data_end+0xfffd44ec>
   4a144:	29400104 	addi	r5,r5,4
   4a148:	18c7883a 	add	r3,r3,r3
   4a14c:	003ffb06 	br	4a13c <__alt_data_end+0xfffd45dc>
   4a150:	8d000217 	ldw	r20,8(r17)
   4a154:	00bfff04 	movi	r2,-4
   4a158:	a5400117 	ldw	r21,4(r20)
   4a15c:	a8aa703a 	and	r21,r21,r2
   4a160:	ac000336 	bltu	r21,r16,4a170 <_malloc_r+0x484>
   4a164:	ac07c83a 	sub	r3,r21,r16
   4a168:	008003c4 	movi	r2,15
   4a16c:	10c06916 	blt	r2,r3,4a314 <_malloc_r+0x628>
   4a170:	d5a8bf17 	ldw	r22,-23812(gp)
   4a174:	d0a00517 	ldw	r2,-32748(gp)
   4a178:	05ffffc4 	movi	r23,-1
   4a17c:	a579883a 	add	fp,r20,r21
   4a180:	85ad883a 	add	r22,r16,r22
   4a184:	15c0021e 	bne	r2,r23,4a190 <_malloc_r+0x4a4>
   4a188:	b5800404 	addi	r22,r22,16
   4a18c:	00000306 	br	4a19c <_malloc_r+0x4b0>
   4a190:	b58023c4 	addi	r22,r22,143
   4a194:	00bfe004 	movi	r2,-128
   4a198:	b0ac703a 	and	r22,r22,r2
   4a19c:	9809883a 	mov	r4,r19
   4a1a0:	b00b883a 	mov	r5,r22
   4a1a4:	004a4d00 	call	4a4d0 <_sbrk_r>
   4a1a8:	1025883a 	mov	r18,r2
   4a1ac:	15c04d26 	beq	r2,r23,4a2e4 <_malloc_r+0x5f8>
   4a1b0:	1700012e 	bgeu	r2,fp,4a1b8 <_malloc_r+0x4cc>
   4a1b4:	a4404b1e 	bne	r20,r17,4a2e4 <_malloc_r+0x5f8>
   4a1b8:	05c001f4 	movhi	r23,7
   4a1bc:	bdefa704 	addi	r23,r23,-16740
   4a1c0:	b8800017 	ldw	r2,0(r23)
   4a1c4:	b085883a 	add	r2,r22,r2
   4a1c8:	b8800015 	stw	r2,0(r23)
   4a1cc:	9700071e 	bne	r18,fp,4a1ec <_malloc_r+0x500>
   4a1d0:	90c01fcc 	andi	r3,r18,127
   4a1d4:	1800051e 	bne	r3,zero,4a1ec <_malloc_r+0x500>
   4a1d8:	88800217 	ldw	r2,8(r17)
   4a1dc:	b56b883a 	add	r21,r22,r21
   4a1e0:	ad400054 	ori	r21,r21,1
   4a1e4:	15400115 	stw	r21,4(r2)
   4a1e8:	00003706 	br	4a2c8 <_malloc_r+0x5dc>
   4a1ec:	d1200517 	ldw	r4,-32748(gp)
   4a1f0:	00ffffc4 	movi	r3,-1
   4a1f4:	20c0021e 	bne	r4,r3,4a200 <_malloc_r+0x514>
   4a1f8:	d4a00515 	stw	r18,-32748(gp)
   4a1fc:	00000306 	br	4a20c <_malloc_r+0x520>
   4a200:	9739c83a 	sub	fp,r18,fp
   4a204:	1705883a 	add	r2,r2,fp
   4a208:	b8800015 	stw	r2,0(r23)
   4a20c:	908001cc 	andi	r2,r18,7
   4a210:	10000426 	beq	r2,zero,4a224 <_malloc_r+0x538>
   4a214:	00c00204 	movi	r3,8
   4a218:	1885c83a 	sub	r2,r3,r2
   4a21c:	90a5883a 	add	r18,r18,r2
   4a220:	00000106 	br	4a228 <_malloc_r+0x53c>
   4a224:	0005883a 	mov	r2,zero
   4a228:	95ad883a 	add	r22,r18,r22
   4a22c:	10802004 	addi	r2,r2,128
   4a230:	b5801fcc 	andi	r22,r22,127
   4a234:	15adc83a 	sub	r22,r2,r22
   4a238:	9809883a 	mov	r4,r19
   4a23c:	b00b883a 	mov	r5,r22
   4a240:	004a4d00 	call	4a4d0 <_sbrk_r>
   4a244:	00ffffc4 	movi	r3,-1
   4a248:	10c0021e 	bne	r2,r3,4a254 <_malloc_r+0x568>
   4a24c:	9005883a 	mov	r2,r18
   4a250:	002d883a 	mov	r22,zero
   4a254:	b8c00017 	ldw	r3,0(r23)
   4a258:	1485c83a 	sub	r2,r2,r18
   4a25c:	8c800215 	stw	r18,8(r17)
   4a260:	b0c7883a 	add	r3,r22,r3
   4a264:	15ad883a 	add	r22,r2,r22
   4a268:	b5800054 	ori	r22,r22,1
   4a26c:	b8c00015 	stw	r3,0(r23)
   4a270:	95800115 	stw	r22,4(r18)
   4a274:	a4401426 	beq	r20,r17,4a2c8 <_malloc_r+0x5dc>
   4a278:	008003c4 	movi	r2,15
   4a27c:	15400336 	bltu	r2,r21,4a28c <_malloc_r+0x5a0>
   4a280:	00800044 	movi	r2,1
   4a284:	90800115 	stw	r2,4(r18)
   4a288:	00001606 	br	4a2e4 <_malloc_r+0x5f8>
   4a28c:	00fffe04 	movi	r3,-8
   4a290:	ad7ffd04 	addi	r21,r21,-12
   4a294:	a8ea703a 	and	r21,r21,r3
   4a298:	a0c00117 	ldw	r3,4(r20)
   4a29c:	01000144 	movi	r4,5
   4a2a0:	18c0004c 	andi	r3,r3,1
   4a2a4:	a8c6b03a 	or	r3,r21,r3
   4a2a8:	a0c00115 	stw	r3,4(r20)
   4a2ac:	a547883a 	add	r3,r20,r21
   4a2b0:	19000115 	stw	r4,4(r3)
   4a2b4:	19000215 	stw	r4,8(r3)
   4a2b8:	1540032e 	bgeu	r2,r21,4a2c8 <_malloc_r+0x5dc>
   4a2bc:	9809883a 	mov	r4,r19
   4a2c0:	a1400204 	addi	r5,r20,8
   4a2c4:	004b3e40 	call	4b3e4 <_free_r>
   4a2c8:	b8800017 	ldw	r2,0(r23)
   4a2cc:	d0e8be17 	ldw	r3,-23816(gp)
   4a2d0:	1880012e 	bgeu	r3,r2,4a2d8 <_malloc_r+0x5ec>
   4a2d4:	d0a8be15 	stw	r2,-23816(gp)
   4a2d8:	d0e8bd17 	ldw	r3,-23820(gp)
   4a2dc:	1880012e 	bgeu	r3,r2,4a2e4 <_malloc_r+0x5f8>
   4a2e0:	d0a8bd15 	stw	r2,-23820(gp)
   4a2e4:	88800217 	ldw	r2,8(r17)
   4a2e8:	10c00117 	ldw	r3,4(r2)
   4a2ec:	00bfff04 	movi	r2,-4
   4a2f0:	1884703a 	and	r2,r3,r2
   4a2f4:	1407c83a 	sub	r3,r2,r16
   4a2f8:	14000236 	bltu	r2,r16,4a304 <_malloc_r+0x618>
   4a2fc:	008003c4 	movi	r2,15
   4a300:	10c00416 	blt	r2,r3,4a314 <_malloc_r+0x628>
   4a304:	9809883a 	mov	r4,r19
   4a308:	004be0c0 	call	4be0c <__malloc_unlock>
   4a30c:	0005883a 	mov	r2,zero
   4a310:	00000a06 	br	4a33c <_malloc_r+0x650>
   4a314:	8c800217 	ldw	r18,8(r17)
   4a318:	80800054 	ori	r2,r16,1
   4a31c:	18c00054 	ori	r3,r3,1
   4a320:	90800115 	stw	r2,4(r18)
   4a324:	9421883a 	add	r16,r18,r16
   4a328:	8c000215 	stw	r16,8(r17)
   4a32c:	80c00115 	stw	r3,4(r16)
   4a330:	9809883a 	mov	r4,r19
   4a334:	004be0c0 	call	4be0c <__malloc_unlock>
   4a338:	90800204 	addi	r2,r18,8
   4a33c:	dfc00917 	ldw	ra,36(sp)
   4a340:	df000817 	ldw	fp,32(sp)
   4a344:	ddc00717 	ldw	r23,28(sp)
   4a348:	dd800617 	ldw	r22,24(sp)
   4a34c:	dd400517 	ldw	r21,20(sp)
   4a350:	dd000417 	ldw	r20,16(sp)
   4a354:	dcc00317 	ldw	r19,12(sp)
   4a358:	dc800217 	ldw	r18,8(sp)
   4a35c:	dc400117 	ldw	r17,4(sp)
   4a360:	dc000017 	ldw	r16,0(sp)
   4a364:	dec00a04 	addi	sp,sp,40
   4a368:	f800283a 	ret

0004a36c <memcpy>:
   4a36c:	2005883a 	mov	r2,r4
   4a370:	0007883a 	mov	r3,zero
   4a374:	19800626 	beq	r3,r6,4a390 <memcpy+0x24>
   4a378:	28c9883a 	add	r4,r5,r3
   4a37c:	21c00003 	ldbu	r7,0(r4)
   4a380:	10c9883a 	add	r4,r2,r3
   4a384:	18c00044 	addi	r3,r3,1
   4a388:	21c00005 	stb	r7,0(r4)
   4a38c:	003ff906 	br	4a374 <__alt_data_end+0xfffd4814>
   4a390:	f800283a 	ret

0004a394 <memset>:
   4a394:	2005883a 	mov	r2,r4
   4a398:	2007883a 	mov	r3,r4
   4a39c:	218d883a 	add	r6,r4,r6
   4a3a0:	19800326 	beq	r3,r6,4a3b0 <memset+0x1c>
   4a3a4:	19400005 	stb	r5,0(r3)
   4a3a8:	18c00044 	addi	r3,r3,1
   4a3ac:	003ffc06 	br	4a3a0 <__alt_data_end+0xfffd4840>
   4a3b0:	f800283a 	ret

0004a3b4 <_printf_r>:
   4a3b4:	defffd04 	addi	sp,sp,-12
   4a3b8:	dfc00015 	stw	ra,0(sp)
   4a3bc:	d9800115 	stw	r6,4(sp)
   4a3c0:	d9c00215 	stw	r7,8(sp)
   4a3c4:	20800217 	ldw	r2,8(r4)
   4a3c8:	280d883a 	mov	r6,r5
   4a3cc:	21400217 	ldw	r5,8(r4)
   4a3d0:	00c00174 	movhi	r3,5
   4a3d4:	18ed9f04 	addi	r3,r3,-18820
   4a3d8:	10c00115 	stw	r3,4(r2)
   4a3dc:	d9c00104 	addi	r7,sp,4
   4a3e0:	004ac6c0 	call	4ac6c <___vfprintf_internal_r>
   4a3e4:	dfc00017 	ldw	ra,0(sp)
   4a3e8:	dec00304 	addi	sp,sp,12
   4a3ec:	f800283a 	ret

0004a3f0 <printf>:
   4a3f0:	defffc04 	addi	sp,sp,-16
   4a3f4:	dfc00015 	stw	ra,0(sp)
   4a3f8:	d9400115 	stw	r5,4(sp)
   4a3fc:	d9800215 	stw	r6,8(sp)
   4a400:	d9c00315 	stw	r7,12(sp)
   4a404:	008001f4 	movhi	r2,7
   4a408:	10a6e304 	addi	r2,r2,-25716
   4a40c:	10800017 	ldw	r2,0(r2)
   4a410:	200b883a 	mov	r5,r4
   4a414:	01000174 	movhi	r4,5
   4a418:	212d9f04 	addi	r4,r4,-18820
   4a41c:	10c00217 	ldw	r3,8(r2)
   4a420:	d9800104 	addi	r6,sp,4
   4a424:	19000115 	stw	r4,4(r3)
   4a428:	11000217 	ldw	r4,8(r2)
   4a42c:	004b1a40 	call	4b1a4 <__vfprintf_internal>
   4a430:	dfc00017 	ldw	ra,0(sp)
   4a434:	dec00404 	addi	sp,sp,16
   4a438:	f800283a 	ret

0004a43c <_puts_r>:
   4a43c:	defffd04 	addi	sp,sp,-12
   4a440:	dc000015 	stw	r16,0(sp)
   4a444:	2021883a 	mov	r16,r4
   4a448:	2809883a 	mov	r4,r5
   4a44c:	dfc00215 	stw	ra,8(sp)
   4a450:	dc400115 	stw	r17,4(sp)
   4a454:	2823883a 	mov	r17,r5
   4a458:	004a61c0 	call	4a61c <strlen>
   4a45c:	81400217 	ldw	r5,8(r16)
   4a460:	00c00174 	movhi	r3,5
   4a464:	18ed9f04 	addi	r3,r3,-18820
   4a468:	8009883a 	mov	r4,r16
   4a46c:	28c00115 	stw	r3,4(r5)
   4a470:	880d883a 	mov	r6,r17
   4a474:	100f883a 	mov	r7,r2
   4a478:	183ee83a 	callr	r3
   4a47c:	00ffffc4 	movi	r3,-1
   4a480:	10c00926 	beq	r2,r3,4a4a8 <_puts_r+0x6c>
   4a484:	81400217 	ldw	r5,8(r16)
   4a488:	8009883a 	mov	r4,r16
   4a48c:	018001b4 	movhi	r6,6
   4a490:	319e3904 	addi	r6,r6,30948
   4a494:	28800117 	ldw	r2,4(r5)
   4a498:	01c00044 	movi	r7,1
   4a49c:	103ee83a 	callr	r2
   4a4a0:	10bfffe0 	cmpeqi	r2,r2,-1
   4a4a4:	0085c83a 	sub	r2,zero,r2
   4a4a8:	dfc00217 	ldw	ra,8(sp)
   4a4ac:	dc400117 	ldw	r17,4(sp)
   4a4b0:	dc000017 	ldw	r16,0(sp)
   4a4b4:	dec00304 	addi	sp,sp,12
   4a4b8:	f800283a 	ret

0004a4bc <puts>:
   4a4bc:	008001f4 	movhi	r2,7
   4a4c0:	10a6e304 	addi	r2,r2,-25716
   4a4c4:	200b883a 	mov	r5,r4
   4a4c8:	11000017 	ldw	r4,0(r2)
   4a4cc:	004a43c1 	jmpi	4a43c <_puts_r>

0004a4d0 <_sbrk_r>:
   4a4d0:	defffd04 	addi	sp,sp,-12
   4a4d4:	dc400115 	stw	r17,4(sp)
   4a4d8:	dc000015 	stw	r16,0(sp)
   4a4dc:	2023883a 	mov	r17,r4
   4a4e0:	040001f4 	movhi	r16,7
   4a4e4:	842f9f04 	addi	r16,r16,-16772
   4a4e8:	2809883a 	mov	r4,r5
   4a4ec:	dfc00215 	stw	ra,8(sp)
   4a4f0:	80000015 	stw	zero,0(r16)
   4a4f4:	004be2c0 	call	4be2c <sbrk>
   4a4f8:	00ffffc4 	movi	r3,-1
   4a4fc:	10c0031e 	bne	r2,r3,4a50c <_sbrk_r+0x3c>
   4a500:	80c00017 	ldw	r3,0(r16)
   4a504:	18000126 	beq	r3,zero,4a50c <_sbrk_r+0x3c>
   4a508:	88c00015 	stw	r3,0(r17)
   4a50c:	dfc00217 	ldw	ra,8(sp)
   4a510:	dc400117 	ldw	r17,4(sp)
   4a514:	dc000017 	ldw	r16,0(sp)
   4a518:	dec00304 	addi	sp,sp,12
   4a51c:	f800283a 	ret

0004a520 <_sprintf_r>:
   4a520:	defff704 	addi	sp,sp,-36
   4a524:	dfc00715 	stw	ra,28(sp)
   4a528:	d9c00815 	stw	r7,32(sp)
   4a52c:	00808204 	movi	r2,520
   4a530:	d880000d 	sth	r2,0(sp)
   4a534:	00a00034 	movhi	r2,32768
   4a538:	10bfffc4 	addi	r2,r2,-1
   4a53c:	d8800515 	stw	r2,20(sp)
   4a540:	d8800315 	stw	r2,12(sp)
   4a544:	00bfffc4 	movi	r2,-1
   4a548:	d9400415 	stw	r5,16(sp)
   4a54c:	d9400215 	stw	r5,8(sp)
   4a550:	d880008d 	sth	r2,2(sp)
   4a554:	d80b883a 	mov	r5,sp
   4a558:	00800174 	movhi	r2,5
   4a55c:	10adca04 	addi	r2,r2,-18648
   4a560:	d9c00804 	addi	r7,sp,32
   4a564:	d8800115 	stw	r2,4(sp)
   4a568:	d8000615 	stw	zero,24(sp)
   4a56c:	004a6a40 	call	4a6a4 <___svfprintf_internal_r>
   4a570:	d8c00417 	ldw	r3,16(sp)
   4a574:	18000005 	stb	zero,0(r3)
   4a578:	dfc00717 	ldw	ra,28(sp)
   4a57c:	dec00904 	addi	sp,sp,36
   4a580:	f800283a 	ret

0004a584 <sprintf>:
   4a584:	defff604 	addi	sp,sp,-40
   4a588:	dfc00715 	stw	ra,28(sp)
   4a58c:	d9800815 	stw	r6,32(sp)
   4a590:	d9c00915 	stw	r7,36(sp)
   4a594:	00808204 	movi	r2,520
   4a598:	d880000d 	sth	r2,0(sp)
   4a59c:	00a00034 	movhi	r2,32768
   4a5a0:	10bfffc4 	addi	r2,r2,-1
   4a5a4:	d8800515 	stw	r2,20(sp)
   4a5a8:	d8800315 	stw	r2,12(sp)
   4a5ac:	00bfffc4 	movi	r2,-1
   4a5b0:	d880008d 	sth	r2,2(sp)
   4a5b4:	00800174 	movhi	r2,5
   4a5b8:	10adca04 	addi	r2,r2,-18648
   4a5bc:	d8800115 	stw	r2,4(sp)
   4a5c0:	008001f4 	movhi	r2,7
   4a5c4:	10a6e304 	addi	r2,r2,-25716
   4a5c8:	d9000415 	stw	r4,16(sp)
   4a5cc:	d9000215 	stw	r4,8(sp)
   4a5d0:	11000017 	ldw	r4,0(r2)
   4a5d4:	280d883a 	mov	r6,r5
   4a5d8:	d9c00804 	addi	r7,sp,32
   4a5dc:	d80b883a 	mov	r5,sp
   4a5e0:	d8000615 	stw	zero,24(sp)
   4a5e4:	004a6a40 	call	4a6a4 <___svfprintf_internal_r>
   4a5e8:	d8c00417 	ldw	r3,16(sp)
   4a5ec:	18000005 	stb	zero,0(r3)
   4a5f0:	dfc00717 	ldw	ra,28(sp)
   4a5f4:	dec00a04 	addi	sp,sp,40
   4a5f8:	f800283a 	ret

0004a5fc <strcpy>:
   4a5fc:	2005883a 	mov	r2,r4
   4a600:	2007883a 	mov	r3,r4
   4a604:	29000007 	ldb	r4,0(r5)
   4a608:	18c00044 	addi	r3,r3,1
   4a60c:	29400044 	addi	r5,r5,1
   4a610:	193fffc5 	stb	r4,-1(r3)
   4a614:	203ffb1e 	bne	r4,zero,4a604 <__alt_data_end+0xfffd4aa4>
   4a618:	f800283a 	ret

0004a61c <strlen>:
   4a61c:	2005883a 	mov	r2,r4
   4a620:	10c00007 	ldb	r3,0(r2)
   4a624:	18000226 	beq	r3,zero,4a630 <strlen+0x14>
   4a628:	10800044 	addi	r2,r2,1
   4a62c:	003ffc06 	br	4a620 <__alt_data_end+0xfffd4ac0>
   4a630:	1105c83a 	sub	r2,r2,r4
   4a634:	f800283a 	ret

0004a638 <print_repeat>:
   4a638:	defffb04 	addi	sp,sp,-20
   4a63c:	dc800315 	stw	r18,12(sp)
   4a640:	dc400215 	stw	r17,8(sp)
   4a644:	dc000115 	stw	r16,4(sp)
   4a648:	dfc00415 	stw	ra,16(sp)
   4a64c:	2025883a 	mov	r18,r4
   4a650:	2823883a 	mov	r17,r5
   4a654:	d9800005 	stb	r6,0(sp)
   4a658:	3821883a 	mov	r16,r7
   4a65c:	04000a0e 	bge	zero,r16,4a688 <print_repeat+0x50>
   4a660:	88800117 	ldw	r2,4(r17)
   4a664:	9009883a 	mov	r4,r18
   4a668:	880b883a 	mov	r5,r17
   4a66c:	d80d883a 	mov	r6,sp
   4a670:	01c00044 	movi	r7,1
   4a674:	103ee83a 	callr	r2
   4a678:	843fffc4 	addi	r16,r16,-1
   4a67c:	103ff726 	beq	r2,zero,4a65c <__alt_data_end+0xfffd4afc>
   4a680:	00bfffc4 	movi	r2,-1
   4a684:	00000106 	br	4a68c <print_repeat+0x54>
   4a688:	0005883a 	mov	r2,zero
   4a68c:	dfc00417 	ldw	ra,16(sp)
   4a690:	dc800317 	ldw	r18,12(sp)
   4a694:	dc400217 	ldw	r17,8(sp)
   4a698:	dc000117 	ldw	r16,4(sp)
   4a69c:	dec00504 	addi	sp,sp,20
   4a6a0:	f800283a 	ret

0004a6a4 <___svfprintf_internal_r>:
   4a6a4:	deffe504 	addi	sp,sp,-108
   4a6a8:	d8c00804 	addi	r3,sp,32
   4a6ac:	df001915 	stw	fp,100(sp)
   4a6b0:	dd801715 	stw	r22,92(sp)
   4a6b4:	dd401615 	stw	r21,88(sp)
   4a6b8:	dd001515 	stw	r20,84(sp)
   4a6bc:	dcc01415 	stw	r19,80(sp)
   4a6c0:	dc801315 	stw	r18,76(sp)
   4a6c4:	dc401215 	stw	r17,72(sp)
   4a6c8:	dc001115 	stw	r16,68(sp)
   4a6cc:	dfc01a15 	stw	ra,104(sp)
   4a6d0:	ddc01815 	stw	r23,96(sp)
   4a6d4:	2021883a 	mov	r16,r4
   4a6d8:	282b883a 	mov	r21,r5
   4a6dc:	3839883a 	mov	fp,r7
   4a6e0:	d9800f15 	stw	r6,60(sp)
   4a6e4:	002d883a 	mov	r22,zero
   4a6e8:	d8000e15 	stw	zero,56(sp)
   4a6ec:	0027883a 	mov	r19,zero
   4a6f0:	d8000a15 	stw	zero,40(sp)
   4a6f4:	0025883a 	mov	r18,zero
   4a6f8:	0023883a 	mov	r17,zero
   4a6fc:	d8000c15 	stw	zero,48(sp)
   4a700:	d8000b15 	stw	zero,44(sp)
   4a704:	0029883a 	mov	r20,zero
   4a708:	d8c00915 	stw	r3,36(sp)
   4a70c:	d8c00f17 	ldw	r3,60(sp)
   4a710:	19000003 	ldbu	r4,0(r3)
   4a714:	20803fcc 	andi	r2,r4,255
   4a718:	1080201c 	xori	r2,r2,128
   4a71c:	10bfe004 	addi	r2,r2,-128
   4a720:	10011e26 	beq	r2,zero,4ab9c <___svfprintf_internal_r+0x4f8>
   4a724:	00c00044 	movi	r3,1
   4a728:	a0c01426 	beq	r20,r3,4a77c <___svfprintf_internal_r+0xd8>
   4a72c:	1d000216 	blt	r3,r20,4a738 <___svfprintf_internal_r+0x94>
   4a730:	a0000626 	beq	r20,zero,4a74c <___svfprintf_internal_r+0xa8>
   4a734:	00011506 	br	4ab8c <___svfprintf_internal_r+0x4e8>
   4a738:	01400084 	movi	r5,2
   4a73c:	a1401d26 	beq	r20,r5,4a7b4 <___svfprintf_internal_r+0x110>
   4a740:	014000c4 	movi	r5,3
   4a744:	a1402926 	beq	r20,r5,4a7ec <___svfprintf_internal_r+0x148>
   4a748:	00011006 	br	4ab8c <___svfprintf_internal_r+0x4e8>
   4a74c:	01400944 	movi	r5,37
   4a750:	1140fc26 	beq	r2,r5,4ab44 <___svfprintf_internal_r+0x4a0>
   4a754:	a8800117 	ldw	r2,4(r21)
   4a758:	d9000005 	stb	r4,0(sp)
   4a75c:	a80b883a 	mov	r5,r21
   4a760:	8009883a 	mov	r4,r16
   4a764:	d80d883a 	mov	r6,sp
   4a768:	01c00044 	movi	r7,1
   4a76c:	103ee83a 	callr	r2
   4a770:	1000d81e 	bne	r2,zero,4aad4 <___svfprintf_internal_r+0x430>
   4a774:	b5800044 	addi	r22,r22,1
   4a778:	00010406 	br	4ab8c <___svfprintf_internal_r+0x4e8>
   4a77c:	01400c04 	movi	r5,48
   4a780:	1140fa26 	beq	r2,r5,4ab6c <___svfprintf_internal_r+0x4c8>
   4a784:	01400944 	movi	r5,37
   4a788:	11400a1e 	bne	r2,r5,4a7b4 <___svfprintf_internal_r+0x110>
   4a78c:	d8800005 	stb	r2,0(sp)
   4a790:	a8800117 	ldw	r2,4(r21)
   4a794:	8009883a 	mov	r4,r16
   4a798:	a80b883a 	mov	r5,r21
   4a79c:	d80d883a 	mov	r6,sp
   4a7a0:	a00f883a 	mov	r7,r20
   4a7a4:	103ee83a 	callr	r2
   4a7a8:	1000ca1e 	bne	r2,zero,4aad4 <___svfprintf_internal_r+0x430>
   4a7ac:	b5800044 	addi	r22,r22,1
   4a7b0:	0000f506 	br	4ab88 <___svfprintf_internal_r+0x4e4>
   4a7b4:	217ff404 	addi	r5,r4,-48
   4a7b8:	29403fcc 	andi	r5,r5,255
   4a7bc:	00c00244 	movi	r3,9
   4a7c0:	19400736 	bltu	r3,r5,4a7e0 <___svfprintf_internal_r+0x13c>
   4a7c4:	00bfffc4 	movi	r2,-1
   4a7c8:	88800226 	beq	r17,r2,4a7d4 <___svfprintf_internal_r+0x130>
   4a7cc:	8c4002a4 	muli	r17,r17,10
   4a7d0:	00000106 	br	4a7d8 <___svfprintf_internal_r+0x134>
   4a7d4:	0023883a 	mov	r17,zero
   4a7d8:	8963883a 	add	r17,r17,r5
   4a7dc:	0000e406 	br	4ab70 <___svfprintf_internal_r+0x4cc>
   4a7e0:	01400b84 	movi	r5,46
   4a7e4:	1140e626 	beq	r2,r5,4ab80 <___svfprintf_internal_r+0x4dc>
   4a7e8:	05000084 	movi	r20,2
   4a7ec:	213ff404 	addi	r4,r4,-48
   4a7f0:	21003fcc 	andi	r4,r4,255
   4a7f4:	00c00244 	movi	r3,9
   4a7f8:	19000736 	bltu	r3,r4,4a818 <___svfprintf_internal_r+0x174>
   4a7fc:	00bfffc4 	movi	r2,-1
   4a800:	90800226 	beq	r18,r2,4a80c <___svfprintf_internal_r+0x168>
   4a804:	948002a4 	muli	r18,r18,10
   4a808:	00000106 	br	4a810 <___svfprintf_internal_r+0x16c>
   4a80c:	0025883a 	mov	r18,zero
   4a810:	9125883a 	add	r18,r18,r4
   4a814:	0000dd06 	br	4ab8c <___svfprintf_internal_r+0x4e8>
   4a818:	00c01b04 	movi	r3,108
   4a81c:	10c0d626 	beq	r2,r3,4ab78 <___svfprintf_internal_r+0x4d4>
   4a820:	013fffc4 	movi	r4,-1
   4a824:	9100021e 	bne	r18,r4,4a830 <___svfprintf_internal_r+0x18c>
   4a828:	04800044 	movi	r18,1
   4a82c:	00000106 	br	4a834 <___svfprintf_internal_r+0x190>
   4a830:	d8000b15 	stw	zero,44(sp)
   4a834:	01001a44 	movi	r4,105
   4a838:	11001526 	beq	r2,r4,4a890 <___svfprintf_internal_r+0x1ec>
   4a83c:	20800916 	blt	r4,r2,4a864 <___svfprintf_internal_r+0x1c0>
   4a840:	010018c4 	movi	r4,99
   4a844:	11008c26 	beq	r2,r4,4aa78 <___svfprintf_internal_r+0x3d4>
   4a848:	01001904 	movi	r4,100
   4a84c:	11001026 	beq	r2,r4,4a890 <___svfprintf_internal_r+0x1ec>
   4a850:	01001604 	movi	r4,88
   4a854:	1100cc1e 	bne	r2,r4,4ab88 <___svfprintf_internal_r+0x4e4>
   4a858:	00c00044 	movi	r3,1
   4a85c:	d8c00e15 	stw	r3,56(sp)
   4a860:	00001406 	br	4a8b4 <___svfprintf_internal_r+0x210>
   4a864:	01001cc4 	movi	r4,115
   4a868:	11009c26 	beq	r2,r4,4aadc <___svfprintf_internal_r+0x438>
   4a86c:	20800316 	blt	r4,r2,4a87c <___svfprintf_internal_r+0x1d8>
   4a870:	01001bc4 	movi	r4,111
   4a874:	1100cb26 	beq	r2,r4,4aba4 <___svfprintf_internal_r+0x500>
   4a878:	0000c306 	br	4ab88 <___svfprintf_internal_r+0x4e4>
   4a87c:	01001d44 	movi	r4,117
   4a880:	11000e26 	beq	r2,r4,4a8bc <___svfprintf_internal_r+0x218>
   4a884:	01001e04 	movi	r4,120
   4a888:	11000a26 	beq	r2,r4,4a8b4 <___svfprintf_internal_r+0x210>
   4a88c:	0000be06 	br	4ab88 <___svfprintf_internal_r+0x4e4>
   4a890:	e5c00104 	addi	r23,fp,4
   4a894:	98000926 	beq	r19,zero,4a8bc <___svfprintf_internal_r+0x218>
   4a898:	ddc00d15 	stw	r23,52(sp)
   4a89c:	e7000017 	ldw	fp,0(fp)
   4a8a0:	e0000b0e 	bge	fp,zero,4a8d0 <___svfprintf_internal_r+0x22c>
   4a8a4:	04c00044 	movi	r19,1
   4a8a8:	0739c83a 	sub	fp,zero,fp
   4a8ac:	9815883a 	mov	r10,r19
   4a8b0:	00000906 	br	4a8d8 <___svfprintf_internal_r+0x234>
   4a8b4:	00c00404 	movi	r3,16
   4a8b8:	d8c00a15 	stw	r3,40(sp)
   4a8bc:	e0c00104 	addi	r3,fp,4
   4a8c0:	d8c00d15 	stw	r3,52(sp)
   4a8c4:	e7000017 	ldw	fp,0(fp)
   4a8c8:	0027883a 	mov	r19,zero
   4a8cc:	00000106 	br	4a8d4 <___svfprintf_internal_r+0x230>
   4a8d0:	04c00044 	movi	r19,1
   4a8d4:	0015883a 	mov	r10,zero
   4a8d8:	002f883a 	mov	r23,zero
   4a8dc:	dde9883a 	add	r20,sp,r23
   4a8e0:	e0001526 	beq	fp,zero,4a938 <___svfprintf_internal_r+0x294>
   4a8e4:	d9400a17 	ldw	r5,40(sp)
   4a8e8:	e009883a 	mov	r4,fp
   4a8ec:	da801015 	stw	r10,64(sp)
   4a8f0:	00478f80 	call	478f8 <__udivsi3>
   4a8f4:	d8c00a17 	ldw	r3,40(sp)
   4a8f8:	da801017 	ldw	r10,64(sp)
   4a8fc:	1889383a 	mul	r4,r3,r2
   4a900:	00c00244 	movi	r3,9
   4a904:	e139c83a 	sub	fp,fp,r4
   4a908:	1f000216 	blt	r3,fp,4a914 <___svfprintf_internal_r+0x270>
   4a90c:	e7000c04 	addi	fp,fp,48
   4a910:	00000506 	br	4a928 <___svfprintf_internal_r+0x284>
   4a914:	d8c00e17 	ldw	r3,56(sp)
   4a918:	18000226 	beq	r3,zero,4a924 <___svfprintf_internal_r+0x280>
   4a91c:	e7000dc4 	addi	fp,fp,55
   4a920:	00000106 	br	4a928 <___svfprintf_internal_r+0x284>
   4a924:	e70015c4 	addi	fp,fp,87
   4a928:	a7000005 	stb	fp,0(r20)
   4a92c:	bdc00044 	addi	r23,r23,1
   4a930:	1039883a 	mov	fp,r2
   4a934:	003fe906 	br	4a8dc <__alt_data_end+0xfffd4d7c>
   4a938:	a6f9c83a 	sub	fp,r20,sp
   4a93c:	9709c83a 	sub	r4,r18,fp
   4a940:	01000d0e 	bge	zero,r4,4a978 <___svfprintf_internal_r+0x2d4>
   4a944:	a005883a 	mov	r2,r20
   4a948:	a10b883a 	add	r5,r20,r4
   4a94c:	01800c04 	movi	r6,48
   4a950:	d8c00917 	ldw	r3,36(sp)
   4a954:	10c0062e 	bgeu	r2,r3,4a970 <___svfprintf_internal_r+0x2cc>
   4a958:	11000044 	addi	r4,r2,1
   4a95c:	11800005 	stb	r6,0(r2)
   4a960:	2029883a 	mov	r20,r4
   4a964:	21400326 	beq	r4,r5,4a974 <___svfprintf_internal_r+0x2d0>
   4a968:	2005883a 	mov	r2,r4
   4a96c:	003ff806 	br	4a950 <__alt_data_end+0xfffd4df0>
   4a970:	1029883a 	mov	r20,r2
   4a974:	a6f9c83a 	sub	fp,r20,sp
   4a978:	d8c00b17 	ldw	r3,44(sp)
   4a97c:	e293883a 	add	r9,fp,r10
   4a980:	8a6fc83a 	sub	r23,r17,r9
   4a984:	18001626 	beq	r3,zero,4a9e0 <___svfprintf_internal_r+0x33c>
   4a988:	50000a26 	beq	r10,zero,4a9b4 <___svfprintf_internal_r+0x310>
   4a98c:	00800b44 	movi	r2,45
   4a990:	d8800805 	stb	r2,32(sp)
   4a994:	a8800117 	ldw	r2,4(r21)
   4a998:	8009883a 	mov	r4,r16
   4a99c:	a80b883a 	mov	r5,r21
   4a9a0:	d9800804 	addi	r6,sp,32
   4a9a4:	01c00044 	movi	r7,1
   4a9a8:	103ee83a 	callr	r2
   4a9ac:	1000491e 	bne	r2,zero,4aad4 <___svfprintf_internal_r+0x430>
   4a9b0:	b5800044 	addi	r22,r22,1
   4a9b4:	05c0070e 	bge	zero,r23,4a9d4 <___svfprintf_internal_r+0x330>
   4a9b8:	8009883a 	mov	r4,r16
   4a9bc:	a80b883a 	mov	r5,r21
   4a9c0:	01800c04 	movi	r6,48
   4a9c4:	b80f883a 	mov	r7,r23
   4a9c8:	004a6380 	call	4a638 <print_repeat>
   4a9cc:	1000411e 	bne	r2,zero,4aad4 <___svfprintf_internal_r+0x430>
   4a9d0:	b5ed883a 	add	r22,r22,r23
   4a9d4:	b52d883a 	add	r22,r22,r20
   4a9d8:	e539c83a 	sub	fp,fp,r20
   4a9dc:	00002006 	br	4aa60 <___svfprintf_internal_r+0x3bc>
   4a9e0:	05c0090e 	bge	zero,r23,4aa08 <___svfprintf_internal_r+0x364>
   4a9e4:	8009883a 	mov	r4,r16
   4a9e8:	a80b883a 	mov	r5,r21
   4a9ec:	01800804 	movi	r6,32
   4a9f0:	b80f883a 	mov	r7,r23
   4a9f4:	da801015 	stw	r10,64(sp)
   4a9f8:	004a6380 	call	4a638 <print_repeat>
   4a9fc:	da801017 	ldw	r10,64(sp)
   4aa00:	1000341e 	bne	r2,zero,4aad4 <___svfprintf_internal_r+0x430>
   4aa04:	b5ed883a 	add	r22,r22,r23
   4aa08:	503ff226 	beq	r10,zero,4a9d4 <__alt_data_end+0xfffd4e74>
   4aa0c:	00800b44 	movi	r2,45
   4aa10:	d8800805 	stb	r2,32(sp)
   4aa14:	a8800117 	ldw	r2,4(r21)
   4aa18:	8009883a 	mov	r4,r16
   4aa1c:	a80b883a 	mov	r5,r21
   4aa20:	d9800804 	addi	r6,sp,32
   4aa24:	01c00044 	movi	r7,1
   4aa28:	103ee83a 	callr	r2
   4aa2c:	1000291e 	bne	r2,zero,4aad4 <___svfprintf_internal_r+0x430>
   4aa30:	b5800044 	addi	r22,r22,1
   4aa34:	003fe706 	br	4a9d4 <__alt_data_end+0xfffd4e74>
   4aa38:	a53fffc4 	addi	r20,r20,-1
   4aa3c:	a0800003 	ldbu	r2,0(r20)
   4aa40:	8009883a 	mov	r4,r16
   4aa44:	a80b883a 	mov	r5,r21
   4aa48:	d8800805 	stb	r2,32(sp)
   4aa4c:	a8800117 	ldw	r2,4(r21)
   4aa50:	d9800804 	addi	r6,sp,32
   4aa54:	01c00044 	movi	r7,1
   4aa58:	103ee83a 	callr	r2
   4aa5c:	10001d1e 	bne	r2,zero,4aad4 <___svfprintf_internal_r+0x430>
   4aa60:	e505883a 	add	r2,fp,r20
   4aa64:	b507c83a 	sub	r3,r22,r20
   4aa68:	00bff316 	blt	zero,r2,4aa38 <__alt_data_end+0xfffd4ed8>
   4aa6c:	182d883a 	mov	r22,r3
   4aa70:	df000d17 	ldw	fp,52(sp)
   4aa74:	00004406 	br	4ab88 <___svfprintf_internal_r+0x4e4>
   4aa78:	00800044 	movi	r2,1
   4aa7c:	1440080e 	bge	r2,r17,4aaa0 <___svfprintf_internal_r+0x3fc>
   4aa80:	8d3fffc4 	addi	r20,r17,-1
   4aa84:	8009883a 	mov	r4,r16
   4aa88:	a80b883a 	mov	r5,r21
   4aa8c:	01800804 	movi	r6,32
   4aa90:	a00f883a 	mov	r7,r20
   4aa94:	004a6380 	call	4a638 <print_repeat>
   4aa98:	10000e1e 	bne	r2,zero,4aad4 <___svfprintf_internal_r+0x430>
   4aa9c:	b52d883a 	add	r22,r22,r20
   4aaa0:	e0800017 	ldw	r2,0(fp)
   4aaa4:	8009883a 	mov	r4,r16
   4aaa8:	a80b883a 	mov	r5,r21
   4aaac:	d8800005 	stb	r2,0(sp)
   4aab0:	a8800117 	ldw	r2,4(r21)
   4aab4:	d80d883a 	mov	r6,sp
   4aab8:	01c00044 	movi	r7,1
   4aabc:	e5000104 	addi	r20,fp,4
   4aac0:	103ee83a 	callr	r2
   4aac4:	1000031e 	bne	r2,zero,4aad4 <___svfprintf_internal_r+0x430>
   4aac8:	b5800044 	addi	r22,r22,1
   4aacc:	a039883a 	mov	fp,r20
   4aad0:	00002d06 	br	4ab88 <___svfprintf_internal_r+0x4e4>
   4aad4:	00bfffc4 	movi	r2,-1
   4aad8:	00003406 	br	4abac <___svfprintf_internal_r+0x508>
   4aadc:	e5000017 	ldw	r20,0(fp)
   4aae0:	e5c00104 	addi	r23,fp,4
   4aae4:	a009883a 	mov	r4,r20
   4aae8:	004a61c0 	call	4a61c <strlen>
   4aaec:	8893c83a 	sub	r9,r17,r2
   4aaf0:	1039883a 	mov	fp,r2
   4aaf4:	0240090e 	bge	zero,r9,4ab1c <___svfprintf_internal_r+0x478>
   4aaf8:	480f883a 	mov	r7,r9
   4aafc:	8009883a 	mov	r4,r16
   4ab00:	a80b883a 	mov	r5,r21
   4ab04:	01800804 	movi	r6,32
   4ab08:	da401015 	stw	r9,64(sp)
   4ab0c:	004a6380 	call	4a638 <print_repeat>
   4ab10:	da401017 	ldw	r9,64(sp)
   4ab14:	103fef1e 	bne	r2,zero,4aad4 <__alt_data_end+0xfffd4f74>
   4ab18:	b26d883a 	add	r22,r22,r9
   4ab1c:	a8800117 	ldw	r2,4(r21)
   4ab20:	8009883a 	mov	r4,r16
   4ab24:	a80b883a 	mov	r5,r21
   4ab28:	a00d883a 	mov	r6,r20
   4ab2c:	e00f883a 	mov	r7,fp
   4ab30:	103ee83a 	callr	r2
   4ab34:	103fe71e 	bne	r2,zero,4aad4 <__alt_data_end+0xfffd4f74>
   4ab38:	b72d883a 	add	r22,r22,fp
   4ab3c:	b839883a 	mov	fp,r23
   4ab40:	00001106 	br	4ab88 <___svfprintf_internal_r+0x4e4>
   4ab44:	04c00044 	movi	r19,1
   4ab48:	00c00284 	movi	r3,10
   4ab4c:	04bfffc4 	movi	r18,-1
   4ab50:	d8000e15 	stw	zero,56(sp)
   4ab54:	d8c00a15 	stw	r3,40(sp)
   4ab58:	9023883a 	mov	r17,r18
   4ab5c:	d8000c15 	stw	zero,48(sp)
   4ab60:	d8000b15 	stw	zero,44(sp)
   4ab64:	9829883a 	mov	r20,r19
   4ab68:	00000806 	br	4ab8c <___svfprintf_internal_r+0x4e8>
   4ab6c:	dd000b15 	stw	r20,44(sp)
   4ab70:	05000084 	movi	r20,2
   4ab74:	00000506 	br	4ab8c <___svfprintf_internal_r+0x4e8>
   4ab78:	00c00044 	movi	r3,1
   4ab7c:	d8c00c15 	stw	r3,48(sp)
   4ab80:	050000c4 	movi	r20,3
   4ab84:	00000106 	br	4ab8c <___svfprintf_internal_r+0x4e8>
   4ab88:	0029883a 	mov	r20,zero
   4ab8c:	d8c00f17 	ldw	r3,60(sp)
   4ab90:	18c00044 	addi	r3,r3,1
   4ab94:	d8c00f15 	stw	r3,60(sp)
   4ab98:	003edc06 	br	4a70c <__alt_data_end+0xfffd4bac>
   4ab9c:	b005883a 	mov	r2,r22
   4aba0:	00000206 	br	4abac <___svfprintf_internal_r+0x508>
   4aba4:	00c00204 	movi	r3,8
   4aba8:	003f4306 	br	4a8b8 <__alt_data_end+0xfffd4d58>
   4abac:	dfc01a17 	ldw	ra,104(sp)
   4abb0:	df001917 	ldw	fp,100(sp)
   4abb4:	ddc01817 	ldw	r23,96(sp)
   4abb8:	dd801717 	ldw	r22,92(sp)
   4abbc:	dd401617 	ldw	r21,88(sp)
   4abc0:	dd001517 	ldw	r20,84(sp)
   4abc4:	dcc01417 	ldw	r19,80(sp)
   4abc8:	dc801317 	ldw	r18,76(sp)
   4abcc:	dc401217 	ldw	r17,72(sp)
   4abd0:	dc001117 	ldw	r16,68(sp)
   4abd4:	dec01b04 	addi	sp,sp,108
   4abd8:	f800283a 	ret

0004abdc <__vfprintf_internal_unused>:
   4abdc:	2007883a 	mov	r3,r4
   4abe0:	010001f4 	movhi	r4,7
   4abe4:	2126e304 	addi	r4,r4,-25716
   4abe8:	21000017 	ldw	r4,0(r4)
   4abec:	2805883a 	mov	r2,r5
   4abf0:	300f883a 	mov	r7,r6
   4abf4:	180b883a 	mov	r5,r3
   4abf8:	100d883a 	mov	r6,r2
   4abfc:	004a6a41 	jmpi	4a6a4 <___svfprintf_internal_r>

0004ac00 <print_repeat>:
   4ac00:	defffb04 	addi	sp,sp,-20
   4ac04:	dc800315 	stw	r18,12(sp)
   4ac08:	dc400215 	stw	r17,8(sp)
   4ac0c:	dc000115 	stw	r16,4(sp)
   4ac10:	dfc00415 	stw	ra,16(sp)
   4ac14:	2025883a 	mov	r18,r4
   4ac18:	2823883a 	mov	r17,r5
   4ac1c:	d9800005 	stb	r6,0(sp)
   4ac20:	3821883a 	mov	r16,r7
   4ac24:	04000a0e 	bge	zero,r16,4ac50 <print_repeat+0x50>
   4ac28:	88800117 	ldw	r2,4(r17)
   4ac2c:	9009883a 	mov	r4,r18
   4ac30:	880b883a 	mov	r5,r17
   4ac34:	d80d883a 	mov	r6,sp
   4ac38:	01c00044 	movi	r7,1
   4ac3c:	103ee83a 	callr	r2
   4ac40:	843fffc4 	addi	r16,r16,-1
   4ac44:	103ff726 	beq	r2,zero,4ac24 <__alt_data_end+0xfffd50c4>
   4ac48:	00bfffc4 	movi	r2,-1
   4ac4c:	00000106 	br	4ac54 <print_repeat+0x54>
   4ac50:	0005883a 	mov	r2,zero
   4ac54:	dfc00417 	ldw	ra,16(sp)
   4ac58:	dc800317 	ldw	r18,12(sp)
   4ac5c:	dc400217 	ldw	r17,8(sp)
   4ac60:	dc000117 	ldw	r16,4(sp)
   4ac64:	dec00504 	addi	sp,sp,20
   4ac68:	f800283a 	ret

0004ac6c <___vfprintf_internal_r>:
   4ac6c:	deffe504 	addi	sp,sp,-108
   4ac70:	d8c00804 	addi	r3,sp,32
   4ac74:	df001915 	stw	fp,100(sp)
   4ac78:	dd801715 	stw	r22,92(sp)
   4ac7c:	dd401615 	stw	r21,88(sp)
   4ac80:	dd001515 	stw	r20,84(sp)
   4ac84:	dcc01415 	stw	r19,80(sp)
   4ac88:	dc801315 	stw	r18,76(sp)
   4ac8c:	dc401215 	stw	r17,72(sp)
   4ac90:	dc001115 	stw	r16,68(sp)
   4ac94:	dfc01a15 	stw	ra,104(sp)
   4ac98:	ddc01815 	stw	r23,96(sp)
   4ac9c:	2021883a 	mov	r16,r4
   4aca0:	282b883a 	mov	r21,r5
   4aca4:	3839883a 	mov	fp,r7
   4aca8:	d9800f15 	stw	r6,60(sp)
   4acac:	002d883a 	mov	r22,zero
   4acb0:	d8000e15 	stw	zero,56(sp)
   4acb4:	0027883a 	mov	r19,zero
   4acb8:	d8000a15 	stw	zero,40(sp)
   4acbc:	0025883a 	mov	r18,zero
   4acc0:	0023883a 	mov	r17,zero
   4acc4:	d8000c15 	stw	zero,48(sp)
   4acc8:	d8000b15 	stw	zero,44(sp)
   4accc:	0029883a 	mov	r20,zero
   4acd0:	d8c00915 	stw	r3,36(sp)
   4acd4:	d8c00f17 	ldw	r3,60(sp)
   4acd8:	19000003 	ldbu	r4,0(r3)
   4acdc:	20803fcc 	andi	r2,r4,255
   4ace0:	1080201c 	xori	r2,r2,128
   4ace4:	10bfe004 	addi	r2,r2,-128
   4ace8:	10011e26 	beq	r2,zero,4b164 <___vfprintf_internal_r+0x4f8>
   4acec:	00c00044 	movi	r3,1
   4acf0:	a0c01426 	beq	r20,r3,4ad44 <___vfprintf_internal_r+0xd8>
   4acf4:	1d000216 	blt	r3,r20,4ad00 <___vfprintf_internal_r+0x94>
   4acf8:	a0000626 	beq	r20,zero,4ad14 <___vfprintf_internal_r+0xa8>
   4acfc:	00011506 	br	4b154 <___vfprintf_internal_r+0x4e8>
   4ad00:	01400084 	movi	r5,2
   4ad04:	a1401d26 	beq	r20,r5,4ad7c <___vfprintf_internal_r+0x110>
   4ad08:	014000c4 	movi	r5,3
   4ad0c:	a1402926 	beq	r20,r5,4adb4 <___vfprintf_internal_r+0x148>
   4ad10:	00011006 	br	4b154 <___vfprintf_internal_r+0x4e8>
   4ad14:	01400944 	movi	r5,37
   4ad18:	1140fc26 	beq	r2,r5,4b10c <___vfprintf_internal_r+0x4a0>
   4ad1c:	a8800117 	ldw	r2,4(r21)
   4ad20:	d9000005 	stb	r4,0(sp)
   4ad24:	a80b883a 	mov	r5,r21
   4ad28:	8009883a 	mov	r4,r16
   4ad2c:	d80d883a 	mov	r6,sp
   4ad30:	01c00044 	movi	r7,1
   4ad34:	103ee83a 	callr	r2
   4ad38:	1000d81e 	bne	r2,zero,4b09c <___vfprintf_internal_r+0x430>
   4ad3c:	b5800044 	addi	r22,r22,1
   4ad40:	00010406 	br	4b154 <___vfprintf_internal_r+0x4e8>
   4ad44:	01400c04 	movi	r5,48
   4ad48:	1140fa26 	beq	r2,r5,4b134 <___vfprintf_internal_r+0x4c8>
   4ad4c:	01400944 	movi	r5,37
   4ad50:	11400a1e 	bne	r2,r5,4ad7c <___vfprintf_internal_r+0x110>
   4ad54:	d8800005 	stb	r2,0(sp)
   4ad58:	a8800117 	ldw	r2,4(r21)
   4ad5c:	8009883a 	mov	r4,r16
   4ad60:	a80b883a 	mov	r5,r21
   4ad64:	d80d883a 	mov	r6,sp
   4ad68:	a00f883a 	mov	r7,r20
   4ad6c:	103ee83a 	callr	r2
   4ad70:	1000ca1e 	bne	r2,zero,4b09c <___vfprintf_internal_r+0x430>
   4ad74:	b5800044 	addi	r22,r22,1
   4ad78:	0000f506 	br	4b150 <___vfprintf_internal_r+0x4e4>
   4ad7c:	217ff404 	addi	r5,r4,-48
   4ad80:	29403fcc 	andi	r5,r5,255
   4ad84:	00c00244 	movi	r3,9
   4ad88:	19400736 	bltu	r3,r5,4ada8 <___vfprintf_internal_r+0x13c>
   4ad8c:	00bfffc4 	movi	r2,-1
   4ad90:	88800226 	beq	r17,r2,4ad9c <___vfprintf_internal_r+0x130>
   4ad94:	8c4002a4 	muli	r17,r17,10
   4ad98:	00000106 	br	4ada0 <___vfprintf_internal_r+0x134>
   4ad9c:	0023883a 	mov	r17,zero
   4ada0:	8963883a 	add	r17,r17,r5
   4ada4:	0000e406 	br	4b138 <___vfprintf_internal_r+0x4cc>
   4ada8:	01400b84 	movi	r5,46
   4adac:	1140e626 	beq	r2,r5,4b148 <___vfprintf_internal_r+0x4dc>
   4adb0:	05000084 	movi	r20,2
   4adb4:	213ff404 	addi	r4,r4,-48
   4adb8:	21003fcc 	andi	r4,r4,255
   4adbc:	00c00244 	movi	r3,9
   4adc0:	19000736 	bltu	r3,r4,4ade0 <___vfprintf_internal_r+0x174>
   4adc4:	00bfffc4 	movi	r2,-1
   4adc8:	90800226 	beq	r18,r2,4add4 <___vfprintf_internal_r+0x168>
   4adcc:	948002a4 	muli	r18,r18,10
   4add0:	00000106 	br	4add8 <___vfprintf_internal_r+0x16c>
   4add4:	0025883a 	mov	r18,zero
   4add8:	9125883a 	add	r18,r18,r4
   4addc:	0000dd06 	br	4b154 <___vfprintf_internal_r+0x4e8>
   4ade0:	00c01b04 	movi	r3,108
   4ade4:	10c0d626 	beq	r2,r3,4b140 <___vfprintf_internal_r+0x4d4>
   4ade8:	013fffc4 	movi	r4,-1
   4adec:	9100021e 	bne	r18,r4,4adf8 <___vfprintf_internal_r+0x18c>
   4adf0:	04800044 	movi	r18,1
   4adf4:	00000106 	br	4adfc <___vfprintf_internal_r+0x190>
   4adf8:	d8000b15 	stw	zero,44(sp)
   4adfc:	01001a44 	movi	r4,105
   4ae00:	11001526 	beq	r2,r4,4ae58 <___vfprintf_internal_r+0x1ec>
   4ae04:	20800916 	blt	r4,r2,4ae2c <___vfprintf_internal_r+0x1c0>
   4ae08:	010018c4 	movi	r4,99
   4ae0c:	11008c26 	beq	r2,r4,4b040 <___vfprintf_internal_r+0x3d4>
   4ae10:	01001904 	movi	r4,100
   4ae14:	11001026 	beq	r2,r4,4ae58 <___vfprintf_internal_r+0x1ec>
   4ae18:	01001604 	movi	r4,88
   4ae1c:	1100cc1e 	bne	r2,r4,4b150 <___vfprintf_internal_r+0x4e4>
   4ae20:	00c00044 	movi	r3,1
   4ae24:	d8c00e15 	stw	r3,56(sp)
   4ae28:	00001406 	br	4ae7c <___vfprintf_internal_r+0x210>
   4ae2c:	01001cc4 	movi	r4,115
   4ae30:	11009c26 	beq	r2,r4,4b0a4 <___vfprintf_internal_r+0x438>
   4ae34:	20800316 	blt	r4,r2,4ae44 <___vfprintf_internal_r+0x1d8>
   4ae38:	01001bc4 	movi	r4,111
   4ae3c:	1100cb26 	beq	r2,r4,4b16c <___vfprintf_internal_r+0x500>
   4ae40:	0000c306 	br	4b150 <___vfprintf_internal_r+0x4e4>
   4ae44:	01001d44 	movi	r4,117
   4ae48:	11000e26 	beq	r2,r4,4ae84 <___vfprintf_internal_r+0x218>
   4ae4c:	01001e04 	movi	r4,120
   4ae50:	11000a26 	beq	r2,r4,4ae7c <___vfprintf_internal_r+0x210>
   4ae54:	0000be06 	br	4b150 <___vfprintf_internal_r+0x4e4>
   4ae58:	e5c00104 	addi	r23,fp,4
   4ae5c:	98000926 	beq	r19,zero,4ae84 <___vfprintf_internal_r+0x218>
   4ae60:	ddc00d15 	stw	r23,52(sp)
   4ae64:	e7000017 	ldw	fp,0(fp)
   4ae68:	e0000b0e 	bge	fp,zero,4ae98 <___vfprintf_internal_r+0x22c>
   4ae6c:	04c00044 	movi	r19,1
   4ae70:	0739c83a 	sub	fp,zero,fp
   4ae74:	9815883a 	mov	r10,r19
   4ae78:	00000906 	br	4aea0 <___vfprintf_internal_r+0x234>
   4ae7c:	00c00404 	movi	r3,16
   4ae80:	d8c00a15 	stw	r3,40(sp)
   4ae84:	e0c00104 	addi	r3,fp,4
   4ae88:	d8c00d15 	stw	r3,52(sp)
   4ae8c:	e7000017 	ldw	fp,0(fp)
   4ae90:	0027883a 	mov	r19,zero
   4ae94:	00000106 	br	4ae9c <___vfprintf_internal_r+0x230>
   4ae98:	04c00044 	movi	r19,1
   4ae9c:	0015883a 	mov	r10,zero
   4aea0:	002f883a 	mov	r23,zero
   4aea4:	dde9883a 	add	r20,sp,r23
   4aea8:	e0001526 	beq	fp,zero,4af00 <___vfprintf_internal_r+0x294>
   4aeac:	d9400a17 	ldw	r5,40(sp)
   4aeb0:	e009883a 	mov	r4,fp
   4aeb4:	da801015 	stw	r10,64(sp)
   4aeb8:	00478f80 	call	478f8 <__udivsi3>
   4aebc:	d8c00a17 	ldw	r3,40(sp)
   4aec0:	da801017 	ldw	r10,64(sp)
   4aec4:	1889383a 	mul	r4,r3,r2
   4aec8:	00c00244 	movi	r3,9
   4aecc:	e139c83a 	sub	fp,fp,r4
   4aed0:	1f000216 	blt	r3,fp,4aedc <___vfprintf_internal_r+0x270>
   4aed4:	e7000c04 	addi	fp,fp,48
   4aed8:	00000506 	br	4aef0 <___vfprintf_internal_r+0x284>
   4aedc:	d8c00e17 	ldw	r3,56(sp)
   4aee0:	18000226 	beq	r3,zero,4aeec <___vfprintf_internal_r+0x280>
   4aee4:	e7000dc4 	addi	fp,fp,55
   4aee8:	00000106 	br	4aef0 <___vfprintf_internal_r+0x284>
   4aeec:	e70015c4 	addi	fp,fp,87
   4aef0:	a7000005 	stb	fp,0(r20)
   4aef4:	bdc00044 	addi	r23,r23,1
   4aef8:	1039883a 	mov	fp,r2
   4aefc:	003fe906 	br	4aea4 <__alt_data_end+0xfffd5344>
   4af00:	a6f9c83a 	sub	fp,r20,sp
   4af04:	9709c83a 	sub	r4,r18,fp
   4af08:	01000d0e 	bge	zero,r4,4af40 <___vfprintf_internal_r+0x2d4>
   4af0c:	a005883a 	mov	r2,r20
   4af10:	a10b883a 	add	r5,r20,r4
   4af14:	01800c04 	movi	r6,48
   4af18:	d8c00917 	ldw	r3,36(sp)
   4af1c:	10c0062e 	bgeu	r2,r3,4af38 <___vfprintf_internal_r+0x2cc>
   4af20:	11000044 	addi	r4,r2,1
   4af24:	11800005 	stb	r6,0(r2)
   4af28:	2029883a 	mov	r20,r4
   4af2c:	21400326 	beq	r4,r5,4af3c <___vfprintf_internal_r+0x2d0>
   4af30:	2005883a 	mov	r2,r4
   4af34:	003ff806 	br	4af18 <__alt_data_end+0xfffd53b8>
   4af38:	1029883a 	mov	r20,r2
   4af3c:	a6f9c83a 	sub	fp,r20,sp
   4af40:	d8c00b17 	ldw	r3,44(sp)
   4af44:	e293883a 	add	r9,fp,r10
   4af48:	8a6fc83a 	sub	r23,r17,r9
   4af4c:	18001626 	beq	r3,zero,4afa8 <___vfprintf_internal_r+0x33c>
   4af50:	50000a26 	beq	r10,zero,4af7c <___vfprintf_internal_r+0x310>
   4af54:	00800b44 	movi	r2,45
   4af58:	d8800805 	stb	r2,32(sp)
   4af5c:	a8800117 	ldw	r2,4(r21)
   4af60:	8009883a 	mov	r4,r16
   4af64:	a80b883a 	mov	r5,r21
   4af68:	d9800804 	addi	r6,sp,32
   4af6c:	01c00044 	movi	r7,1
   4af70:	103ee83a 	callr	r2
   4af74:	1000491e 	bne	r2,zero,4b09c <___vfprintf_internal_r+0x430>
   4af78:	b5800044 	addi	r22,r22,1
   4af7c:	05c0070e 	bge	zero,r23,4af9c <___vfprintf_internal_r+0x330>
   4af80:	8009883a 	mov	r4,r16
   4af84:	a80b883a 	mov	r5,r21
   4af88:	01800c04 	movi	r6,48
   4af8c:	b80f883a 	mov	r7,r23
   4af90:	004ac000 	call	4ac00 <print_repeat>
   4af94:	1000411e 	bne	r2,zero,4b09c <___vfprintf_internal_r+0x430>
   4af98:	b5ed883a 	add	r22,r22,r23
   4af9c:	b52d883a 	add	r22,r22,r20
   4afa0:	e539c83a 	sub	fp,fp,r20
   4afa4:	00002006 	br	4b028 <___vfprintf_internal_r+0x3bc>
   4afa8:	05c0090e 	bge	zero,r23,4afd0 <___vfprintf_internal_r+0x364>
   4afac:	8009883a 	mov	r4,r16
   4afb0:	a80b883a 	mov	r5,r21
   4afb4:	01800804 	movi	r6,32
   4afb8:	b80f883a 	mov	r7,r23
   4afbc:	da801015 	stw	r10,64(sp)
   4afc0:	004ac000 	call	4ac00 <print_repeat>
   4afc4:	da801017 	ldw	r10,64(sp)
   4afc8:	1000341e 	bne	r2,zero,4b09c <___vfprintf_internal_r+0x430>
   4afcc:	b5ed883a 	add	r22,r22,r23
   4afd0:	503ff226 	beq	r10,zero,4af9c <__alt_data_end+0xfffd543c>
   4afd4:	00800b44 	movi	r2,45
   4afd8:	d8800805 	stb	r2,32(sp)
   4afdc:	a8800117 	ldw	r2,4(r21)
   4afe0:	8009883a 	mov	r4,r16
   4afe4:	a80b883a 	mov	r5,r21
   4afe8:	d9800804 	addi	r6,sp,32
   4afec:	01c00044 	movi	r7,1
   4aff0:	103ee83a 	callr	r2
   4aff4:	1000291e 	bne	r2,zero,4b09c <___vfprintf_internal_r+0x430>
   4aff8:	b5800044 	addi	r22,r22,1
   4affc:	003fe706 	br	4af9c <__alt_data_end+0xfffd543c>
   4b000:	a53fffc4 	addi	r20,r20,-1
   4b004:	a0800003 	ldbu	r2,0(r20)
   4b008:	8009883a 	mov	r4,r16
   4b00c:	a80b883a 	mov	r5,r21
   4b010:	d8800805 	stb	r2,32(sp)
   4b014:	a8800117 	ldw	r2,4(r21)
   4b018:	d9800804 	addi	r6,sp,32
   4b01c:	01c00044 	movi	r7,1
   4b020:	103ee83a 	callr	r2
   4b024:	10001d1e 	bne	r2,zero,4b09c <___vfprintf_internal_r+0x430>
   4b028:	e505883a 	add	r2,fp,r20
   4b02c:	b507c83a 	sub	r3,r22,r20
   4b030:	00bff316 	blt	zero,r2,4b000 <__alt_data_end+0xfffd54a0>
   4b034:	182d883a 	mov	r22,r3
   4b038:	df000d17 	ldw	fp,52(sp)
   4b03c:	00004406 	br	4b150 <___vfprintf_internal_r+0x4e4>
   4b040:	00800044 	movi	r2,1
   4b044:	1440080e 	bge	r2,r17,4b068 <___vfprintf_internal_r+0x3fc>
   4b048:	8d3fffc4 	addi	r20,r17,-1
   4b04c:	8009883a 	mov	r4,r16
   4b050:	a80b883a 	mov	r5,r21
   4b054:	01800804 	movi	r6,32
   4b058:	a00f883a 	mov	r7,r20
   4b05c:	004ac000 	call	4ac00 <print_repeat>
   4b060:	10000e1e 	bne	r2,zero,4b09c <___vfprintf_internal_r+0x430>
   4b064:	b52d883a 	add	r22,r22,r20
   4b068:	e0800017 	ldw	r2,0(fp)
   4b06c:	8009883a 	mov	r4,r16
   4b070:	a80b883a 	mov	r5,r21
   4b074:	d8800005 	stb	r2,0(sp)
   4b078:	a8800117 	ldw	r2,4(r21)
   4b07c:	d80d883a 	mov	r6,sp
   4b080:	01c00044 	movi	r7,1
   4b084:	e5000104 	addi	r20,fp,4
   4b088:	103ee83a 	callr	r2
   4b08c:	1000031e 	bne	r2,zero,4b09c <___vfprintf_internal_r+0x430>
   4b090:	b5800044 	addi	r22,r22,1
   4b094:	a039883a 	mov	fp,r20
   4b098:	00002d06 	br	4b150 <___vfprintf_internal_r+0x4e4>
   4b09c:	00bfffc4 	movi	r2,-1
   4b0a0:	00003406 	br	4b174 <___vfprintf_internal_r+0x508>
   4b0a4:	e5000017 	ldw	r20,0(fp)
   4b0a8:	e5c00104 	addi	r23,fp,4
   4b0ac:	a009883a 	mov	r4,r20
   4b0b0:	004a61c0 	call	4a61c <strlen>
   4b0b4:	8893c83a 	sub	r9,r17,r2
   4b0b8:	1039883a 	mov	fp,r2
   4b0bc:	0240090e 	bge	zero,r9,4b0e4 <___vfprintf_internal_r+0x478>
   4b0c0:	480f883a 	mov	r7,r9
   4b0c4:	8009883a 	mov	r4,r16
   4b0c8:	a80b883a 	mov	r5,r21
   4b0cc:	01800804 	movi	r6,32
   4b0d0:	da401015 	stw	r9,64(sp)
   4b0d4:	004ac000 	call	4ac00 <print_repeat>
   4b0d8:	da401017 	ldw	r9,64(sp)
   4b0dc:	103fef1e 	bne	r2,zero,4b09c <__alt_data_end+0xfffd553c>
   4b0e0:	b26d883a 	add	r22,r22,r9
   4b0e4:	a8800117 	ldw	r2,4(r21)
   4b0e8:	8009883a 	mov	r4,r16
   4b0ec:	a80b883a 	mov	r5,r21
   4b0f0:	a00d883a 	mov	r6,r20
   4b0f4:	e00f883a 	mov	r7,fp
   4b0f8:	103ee83a 	callr	r2
   4b0fc:	103fe71e 	bne	r2,zero,4b09c <__alt_data_end+0xfffd553c>
   4b100:	b72d883a 	add	r22,r22,fp
   4b104:	b839883a 	mov	fp,r23
   4b108:	00001106 	br	4b150 <___vfprintf_internal_r+0x4e4>
   4b10c:	04c00044 	movi	r19,1
   4b110:	00c00284 	movi	r3,10
   4b114:	04bfffc4 	movi	r18,-1
   4b118:	d8000e15 	stw	zero,56(sp)
   4b11c:	d8c00a15 	stw	r3,40(sp)
   4b120:	9023883a 	mov	r17,r18
   4b124:	d8000c15 	stw	zero,48(sp)
   4b128:	d8000b15 	stw	zero,44(sp)
   4b12c:	9829883a 	mov	r20,r19
   4b130:	00000806 	br	4b154 <___vfprintf_internal_r+0x4e8>
   4b134:	dd000b15 	stw	r20,44(sp)
   4b138:	05000084 	movi	r20,2
   4b13c:	00000506 	br	4b154 <___vfprintf_internal_r+0x4e8>
   4b140:	00c00044 	movi	r3,1
   4b144:	d8c00c15 	stw	r3,48(sp)
   4b148:	050000c4 	movi	r20,3
   4b14c:	00000106 	br	4b154 <___vfprintf_internal_r+0x4e8>
   4b150:	0029883a 	mov	r20,zero
   4b154:	d8c00f17 	ldw	r3,60(sp)
   4b158:	18c00044 	addi	r3,r3,1
   4b15c:	d8c00f15 	stw	r3,60(sp)
   4b160:	003edc06 	br	4acd4 <__alt_data_end+0xfffd5174>
   4b164:	b005883a 	mov	r2,r22
   4b168:	00000206 	br	4b174 <___vfprintf_internal_r+0x508>
   4b16c:	00c00204 	movi	r3,8
   4b170:	003f4306 	br	4ae80 <__alt_data_end+0xfffd5320>
   4b174:	dfc01a17 	ldw	ra,104(sp)
   4b178:	df001917 	ldw	fp,100(sp)
   4b17c:	ddc01817 	ldw	r23,96(sp)
   4b180:	dd801717 	ldw	r22,92(sp)
   4b184:	dd401617 	ldw	r21,88(sp)
   4b188:	dd001517 	ldw	r20,84(sp)
   4b18c:	dcc01417 	ldw	r19,80(sp)
   4b190:	dc801317 	ldw	r18,76(sp)
   4b194:	dc401217 	ldw	r17,72(sp)
   4b198:	dc001117 	ldw	r16,68(sp)
   4b19c:	dec01b04 	addi	sp,sp,108
   4b1a0:	f800283a 	ret

0004b1a4 <__vfprintf_internal>:
   4b1a4:	2007883a 	mov	r3,r4
   4b1a8:	010001f4 	movhi	r4,7
   4b1ac:	2126e304 	addi	r4,r4,-25716
   4b1b0:	21000017 	ldw	r4,0(r4)
   4b1b4:	2805883a 	mov	r2,r5
   4b1b8:	300f883a 	mov	r7,r6
   4b1bc:	180b883a 	mov	r5,r3
   4b1c0:	100d883a 	mov	r6,r2
   4b1c4:	004ac6c1 	jmpi	4ac6c <___vfprintf_internal_r>

0004b1c8 <_vsnprintf_r>:
   4b1c8:	defff604 	addi	sp,sp,-40
   4b1cc:	dc400815 	stw	r17,32(sp)
   4b1d0:	dc000715 	stw	r16,28(sp)
   4b1d4:	dfc00915 	stw	ra,36(sp)
   4b1d8:	2023883a 	mov	r17,r4
   4b1dc:	3021883a 	mov	r16,r6
   4b1e0:	3000040e 	bge	r6,zero,4b1f4 <_vsnprintf_r+0x2c>
   4b1e4:	008022c4 	movi	r2,139
   4b1e8:	20800015 	stw	r2,0(r4)
   4b1ec:	00bfffc4 	movi	r2,-1
   4b1f0:	00001e06 	br	4b26c <_vsnprintf_r+0xa4>
   4b1f4:	00808204 	movi	r2,520
   4b1f8:	d880000d 	sth	r2,0(sp)
   4b1fc:	d9400415 	stw	r5,16(sp)
   4b200:	d9400215 	stw	r5,8(sp)
   4b204:	380d883a 	mov	r6,r7
   4b208:	80000226 	beq	r16,zero,4b214 <_vsnprintf_r+0x4c>
   4b20c:	80bfffc4 	addi	r2,r16,-1
   4b210:	00000106 	br	4b218 <_vsnprintf_r+0x50>
   4b214:	0005883a 	mov	r2,zero
   4b218:	d8800515 	stw	r2,20(sp)
   4b21c:	d8800315 	stw	r2,12(sp)
   4b220:	00bfffc4 	movi	r2,-1
   4b224:	d880008d 	sth	r2,2(sp)
   4b228:	00800174 	movhi	r2,5
   4b22c:	10adca04 	addi	r2,r2,-18648
   4b230:	d8800115 	stw	r2,4(sp)
   4b234:	008001f4 	movhi	r2,7
   4b238:	10a6e304 	addi	r2,r2,-25716
   4b23c:	11000017 	ldw	r4,0(r2)
   4b240:	d9c00a17 	ldw	r7,40(sp)
   4b244:	d80b883a 	mov	r5,sp
   4b248:	d8000615 	stw	zero,24(sp)
   4b24c:	004a6a40 	call	4a6a4 <___svfprintf_internal_r>
   4b250:	00ffffc4 	movi	r3,-1
   4b254:	10c0020e 	bge	r2,r3,4b260 <_vsnprintf_r+0x98>
   4b258:	00c022c4 	movi	r3,139
   4b25c:	88c00015 	stw	r3,0(r17)
   4b260:	80000226 	beq	r16,zero,4b26c <_vsnprintf_r+0xa4>
   4b264:	d8c00417 	ldw	r3,16(sp)
   4b268:	18000005 	stb	zero,0(r3)
   4b26c:	dfc00917 	ldw	ra,36(sp)
   4b270:	dc400817 	ldw	r17,32(sp)
   4b274:	dc000717 	ldw	r16,28(sp)
   4b278:	dec00a04 	addi	sp,sp,40
   4b27c:	f800283a 	ret

0004b280 <vsnprintf>:
   4b280:	defffe04 	addi	sp,sp,-8
   4b284:	2011883a 	mov	r8,r4
   4b288:	d9c00015 	stw	r7,0(sp)
   4b28c:	010001f4 	movhi	r4,7
   4b290:	2126e304 	addi	r4,r4,-25716
   4b294:	21000017 	ldw	r4,0(r4)
   4b298:	2807883a 	mov	r3,r5
   4b29c:	3005883a 	mov	r2,r6
   4b2a0:	400b883a 	mov	r5,r8
   4b2a4:	180d883a 	mov	r6,r3
   4b2a8:	100f883a 	mov	r7,r2
   4b2ac:	dfc00115 	stw	ra,4(sp)
   4b2b0:	004b1c80 	call	4b1c8 <_vsnprintf_r>
   4b2b4:	dfc00117 	ldw	ra,4(sp)
   4b2b8:	dec00204 	addi	sp,sp,8
   4b2bc:	f800283a 	ret

0004b2c0 <_malloc_trim_r>:
   4b2c0:	defffb04 	addi	sp,sp,-20
   4b2c4:	dcc00315 	stw	r19,12(sp)
   4b2c8:	dc800215 	stw	r18,8(sp)
   4b2cc:	dc400115 	stw	r17,4(sp)
   4b2d0:	dc000015 	stw	r16,0(sp)
   4b2d4:	2823883a 	mov	r17,r5
   4b2d8:	dfc00415 	stw	ra,16(sp)
   4b2dc:	2021883a 	mov	r16,r4
   4b2e0:	048001f4 	movhi	r18,7
   4b2e4:	94a56804 	addi	r18,r18,-27232
   4b2e8:	004bdec0 	call	4bdec <__malloc_lock>
   4b2ec:	90800217 	ldw	r2,8(r18)
   4b2f0:	14c00117 	ldw	r19,4(r2)
   4b2f4:	00bfff04 	movi	r2,-4
   4b2f8:	98a6703a 	and	r19,r19,r2
   4b2fc:	9c63c83a 	sub	r17,r19,r17
   4b300:	8c401bc4 	addi	r17,r17,111
   4b304:	8822d1fa 	srli	r17,r17,7
   4b308:	00801fc4 	movi	r2,127
   4b30c:	8c7fffc4 	addi	r17,r17,-1
   4b310:	882291fa 	slli	r17,r17,7
   4b314:	14400416 	blt	r2,r17,4b328 <_malloc_trim_r+0x68>
   4b318:	8009883a 	mov	r4,r16
   4b31c:	004be0c0 	call	4be0c <__malloc_unlock>
   4b320:	0005883a 	mov	r2,zero
   4b324:	00002806 	br	4b3c8 <_malloc_trim_r+0x108>
   4b328:	8009883a 	mov	r4,r16
   4b32c:	000b883a 	mov	r5,zero
   4b330:	004a4d00 	call	4a4d0 <_sbrk_r>
   4b334:	90c00217 	ldw	r3,8(r18)
   4b338:	1cc7883a 	add	r3,r3,r19
   4b33c:	10fff61e 	bne	r2,r3,4b318 <__alt_data_end+0xfffd57b8>
   4b340:	8009883a 	mov	r4,r16
   4b344:	044bc83a 	sub	r5,zero,r17
   4b348:	004a4d00 	call	4a4d0 <_sbrk_r>
   4b34c:	00ffffc4 	movi	r3,-1
   4b350:	10c0111e 	bne	r2,r3,4b398 <_malloc_trim_r+0xd8>
   4b354:	8009883a 	mov	r4,r16
   4b358:	000b883a 	mov	r5,zero
   4b35c:	004a4d00 	call	4a4d0 <_sbrk_r>
   4b360:	90c00217 	ldw	r3,8(r18)
   4b364:	014003c4 	movi	r5,15
   4b368:	10c9c83a 	sub	r4,r2,r3
   4b36c:	293fea0e 	bge	r5,r4,4b318 <__alt_data_end+0xfffd57b8>
   4b370:	014001f4 	movhi	r5,7
   4b374:	2966e404 	addi	r5,r5,-25712
   4b378:	29400017 	ldw	r5,0(r5)
   4b37c:	21000054 	ori	r4,r4,1
   4b380:	19000115 	stw	r4,4(r3)
   4b384:	1145c83a 	sub	r2,r2,r5
   4b388:	014001f4 	movhi	r5,7
   4b38c:	296fa704 	addi	r5,r5,-16740
   4b390:	28800015 	stw	r2,0(r5)
   4b394:	003fe006 	br	4b318 <__alt_data_end+0xfffd57b8>
   4b398:	90800217 	ldw	r2,8(r18)
   4b39c:	9c67c83a 	sub	r19,r19,r17
   4b3a0:	9cc00054 	ori	r19,r19,1
   4b3a4:	14c00115 	stw	r19,4(r2)
   4b3a8:	008001f4 	movhi	r2,7
   4b3ac:	10afa704 	addi	r2,r2,-16740
   4b3b0:	10c00017 	ldw	r3,0(r2)
   4b3b4:	8009883a 	mov	r4,r16
   4b3b8:	1c63c83a 	sub	r17,r3,r17
   4b3bc:	14400015 	stw	r17,0(r2)
   4b3c0:	004be0c0 	call	4be0c <__malloc_unlock>
   4b3c4:	00800044 	movi	r2,1
   4b3c8:	dfc00417 	ldw	ra,16(sp)
   4b3cc:	dcc00317 	ldw	r19,12(sp)
   4b3d0:	dc800217 	ldw	r18,8(sp)
   4b3d4:	dc400117 	ldw	r17,4(sp)
   4b3d8:	dc000017 	ldw	r16,0(sp)
   4b3dc:	dec00504 	addi	sp,sp,20
   4b3e0:	f800283a 	ret

0004b3e4 <_free_r>:
   4b3e4:	defffd04 	addi	sp,sp,-12
   4b3e8:	dc400115 	stw	r17,4(sp)
   4b3ec:	dfc00215 	stw	ra,8(sp)
   4b3f0:	dc000015 	stw	r16,0(sp)
   4b3f4:	2823883a 	mov	r17,r5
   4b3f8:	28009b26 	beq	r5,zero,4b668 <_free_r+0x284>
   4b3fc:	2021883a 	mov	r16,r4
   4b400:	004bdec0 	call	4bdec <__malloc_lock>
   4b404:	893fff17 	ldw	r4,-4(r17)
   4b408:	00ffff84 	movi	r3,-2
   4b40c:	88bffe04 	addi	r2,r17,-8
   4b410:	20c6703a 	and	r3,r4,r3
   4b414:	10cf883a 	add	r7,r2,r3
   4b418:	39800117 	ldw	r6,4(r7)
   4b41c:	017fff04 	movi	r5,-4
   4b420:	2100004c 	andi	r4,r4,1
   4b424:	314a703a 	and	r5,r6,r5
   4b428:	018001f4 	movhi	r6,7
   4b42c:	31a56804 	addi	r6,r6,-27232
   4b430:	32000217 	ldw	r8,8(r6)
   4b434:	3a001b1e 	bne	r7,r8,4b4a4 <_free_r+0xc0>
   4b438:	28c7883a 	add	r3,r5,r3
   4b43c:	2000071e 	bne	r4,zero,4b45c <_free_r+0x78>
   4b440:	893ffe17 	ldw	r4,-8(r17)
   4b444:	1105c83a 	sub	r2,r2,r4
   4b448:	11400217 	ldw	r5,8(r2)
   4b44c:	1907883a 	add	r3,r3,r4
   4b450:	11000317 	ldw	r4,12(r2)
   4b454:	29000315 	stw	r4,12(r5)
   4b458:	21400215 	stw	r5,8(r4)
   4b45c:	19000054 	ori	r4,r3,1
   4b460:	11000115 	stw	r4,4(r2)
   4b464:	30800215 	stw	r2,8(r6)
   4b468:	008001f4 	movhi	r2,7
   4b46c:	10a6e504 	addi	r2,r2,-25708
   4b470:	10800017 	ldw	r2,0(r2)
   4b474:	18800536 	bltu	r3,r2,4b48c <_free_r+0xa8>
   4b478:	008001f4 	movhi	r2,7
   4b47c:	10af9e04 	addi	r2,r2,-16776
   4b480:	11400017 	ldw	r5,0(r2)
   4b484:	8009883a 	mov	r4,r16
   4b488:	004b2c00 	call	4b2c0 <_malloc_trim_r>
   4b48c:	8009883a 	mov	r4,r16
   4b490:	dfc00217 	ldw	ra,8(sp)
   4b494:	dc400117 	ldw	r17,4(sp)
   4b498:	dc000017 	ldw	r16,0(sp)
   4b49c:	dec00304 	addi	sp,sp,12
   4b4a0:	004be0c1 	jmpi	4be0c <__malloc_unlock>
   4b4a4:	39400115 	stw	r5,4(r7)
   4b4a8:	2000091e 	bne	r4,zero,4b4d0 <_free_r+0xec>
   4b4ac:	893ffe17 	ldw	r4,-8(r17)
   4b4b0:	32000204 	addi	r8,r6,8
   4b4b4:	1105c83a 	sub	r2,r2,r4
   4b4b8:	1907883a 	add	r3,r3,r4
   4b4bc:	11000217 	ldw	r4,8(r2)
   4b4c0:	22000526 	beq	r4,r8,4b4d8 <_free_r+0xf4>
   4b4c4:	12000317 	ldw	r8,12(r2)
   4b4c8:	22000315 	stw	r8,12(r4)
   4b4cc:	41000215 	stw	r4,8(r8)
   4b4d0:	0009883a 	mov	r4,zero
   4b4d4:	00000106 	br	4b4dc <_free_r+0xf8>
   4b4d8:	01000044 	movi	r4,1
   4b4dc:	3951883a 	add	r8,r7,r5
   4b4e0:	42000117 	ldw	r8,4(r8)
   4b4e4:	4200004c 	andi	r8,r8,1
   4b4e8:	40000f1e 	bne	r8,zero,4b528 <_free_r+0x144>
   4b4ec:	1947883a 	add	r3,r3,r5
   4b4f0:	39400217 	ldw	r5,8(r7)
   4b4f4:	2000091e 	bne	r4,zero,4b51c <_free_r+0x138>
   4b4f8:	020001f4 	movhi	r8,7
   4b4fc:	42256a04 	addi	r8,r8,-27224
   4b500:	2a00061e 	bne	r5,r8,4b51c <_free_r+0x138>
   4b504:	30800515 	stw	r2,20(r6)
   4b508:	30800415 	stw	r2,16(r6)
   4b50c:	11400315 	stw	r5,12(r2)
   4b510:	11400215 	stw	r5,8(r2)
   4b514:	01000044 	movi	r4,1
   4b518:	00000306 	br	4b528 <_free_r+0x144>
   4b51c:	39c00317 	ldw	r7,12(r7)
   4b520:	29c00315 	stw	r7,12(r5)
   4b524:	39400215 	stw	r5,8(r7)
   4b528:	19400054 	ori	r5,r3,1
   4b52c:	11400115 	stw	r5,4(r2)
   4b530:	10cb883a 	add	r5,r2,r3
   4b534:	28c00015 	stw	r3,0(r5)
   4b538:	203fd41e 	bne	r4,zero,4b48c <__alt_data_end+0xfffd592c>
   4b53c:	01007fc4 	movi	r4,511
   4b540:	20c01136 	bltu	r4,r3,4b588 <_free_r+0x1a4>
   4b544:	1806d0fa 	srli	r3,r3,3
   4b548:	01400044 	movi	r5,1
   4b54c:	1809d0ba 	srai	r4,r3,2
   4b550:	18c7883a 	add	r3,r3,r3
   4b554:	18c7883a 	add	r3,r3,r3
   4b558:	2908983a 	sll	r4,r5,r4
   4b55c:	31400117 	ldw	r5,4(r6)
   4b560:	18c7883a 	add	r3,r3,r3
   4b564:	2148b03a 	or	r4,r4,r5
   4b568:	31000115 	stw	r4,4(r6)
   4b56c:	30cd883a 	add	r6,r6,r3
   4b570:	30c00217 	ldw	r3,8(r6)
   4b574:	11800315 	stw	r6,12(r2)
   4b578:	10c00215 	stw	r3,8(r2)
   4b57c:	30800215 	stw	r2,8(r6)
   4b580:	18800315 	stw	r2,12(r3)
   4b584:	003fc106 	br	4b48c <__alt_data_end+0xfffd592c>
   4b588:	180ad27a 	srli	r5,r3,9
   4b58c:	01000104 	movi	r4,4
   4b590:	21400336 	bltu	r4,r5,4b5a0 <_free_r+0x1bc>
   4b594:	180ad1ba 	srli	r5,r3,6
   4b598:	29400e04 	addi	r5,r5,56
   4b59c:	00001406 	br	4b5f0 <_free_r+0x20c>
   4b5a0:	01000504 	movi	r4,20
   4b5a4:	21400236 	bltu	r4,r5,4b5b0 <_free_r+0x1cc>
   4b5a8:	294016c4 	addi	r5,r5,91
   4b5ac:	00001006 	br	4b5f0 <_free_r+0x20c>
   4b5b0:	01001504 	movi	r4,84
   4b5b4:	21400336 	bltu	r4,r5,4b5c4 <_free_r+0x1e0>
   4b5b8:	180ad33a 	srli	r5,r3,12
   4b5bc:	29401b84 	addi	r5,r5,110
   4b5c0:	00000b06 	br	4b5f0 <_free_r+0x20c>
   4b5c4:	01005504 	movi	r4,340
   4b5c8:	21400336 	bltu	r4,r5,4b5d8 <_free_r+0x1f4>
   4b5cc:	180ad3fa 	srli	r5,r3,15
   4b5d0:	29401dc4 	addi	r5,r5,119
   4b5d4:	00000606 	br	4b5f0 <_free_r+0x20c>
   4b5d8:	01015504 	movi	r4,1364
   4b5dc:	21400336 	bltu	r4,r5,4b5ec <_free_r+0x208>
   4b5e0:	180ad4ba 	srli	r5,r3,18
   4b5e4:	29401f04 	addi	r5,r5,124
   4b5e8:	00000106 	br	4b5f0 <_free_r+0x20c>
   4b5ec:	01401f84 	movi	r5,126
   4b5f0:	2949883a 	add	r4,r5,r5
   4b5f4:	2109883a 	add	r4,r4,r4
   4b5f8:	210f883a 	add	r7,r4,r4
   4b5fc:	31cd883a 	add	r6,r6,r7
   4b600:	31c00217 	ldw	r7,8(r6)
   4b604:	010001f4 	movhi	r4,7
   4b608:	21256804 	addi	r4,r4,-27232
   4b60c:	39800326 	beq	r7,r6,4b61c <_free_r+0x238>
   4b610:	380b883a 	mov	r5,r7
   4b614:	01ffff04 	movi	r7,-4
   4b618:	00000a06 	br	4b644 <_free_r+0x260>
   4b61c:	280bd0ba 	srai	r5,r5,2
   4b620:	00c00044 	movi	r3,1
   4b624:	194a983a 	sll	r5,r3,r5
   4b628:	20c00117 	ldw	r3,4(r4)
   4b62c:	28cab03a 	or	r5,r5,r3
   4b630:	21400115 	stw	r5,4(r4)
   4b634:	380b883a 	mov	r5,r7
   4b638:	00000606 	br	4b654 <_free_r+0x270>
   4b63c:	29400217 	ldw	r5,8(r5)
   4b640:	29800326 	beq	r5,r6,4b650 <_free_r+0x26c>
   4b644:	29000117 	ldw	r4,4(r5)
   4b648:	21c8703a 	and	r4,r4,r7
   4b64c:	193ffb36 	bltu	r3,r4,4b63c <__alt_data_end+0xfffd5adc>
   4b650:	29c00317 	ldw	r7,12(r5)
   4b654:	11c00315 	stw	r7,12(r2)
   4b658:	11400215 	stw	r5,8(r2)
   4b65c:	38800215 	stw	r2,8(r7)
   4b660:	28800315 	stw	r2,12(r5)
   4b664:	003f8906 	br	4b48c <__alt_data_end+0xfffd592c>
   4b668:	dfc00217 	ldw	ra,8(sp)
   4b66c:	dc400117 	ldw	r17,4(sp)
   4b670:	dc000017 	ldw	r16,0(sp)
   4b674:	dec00304 	addi	sp,sp,12
   4b678:	f800283a 	ret

0004b67c <__sfvwrite_small_dev>:
   4b67c:	2880000b 	ldhu	r2,0(r5)
   4b680:	defffa04 	addi	sp,sp,-24
   4b684:	dc000015 	stw	r16,0(sp)
   4b688:	dfc00515 	stw	ra,20(sp)
   4b68c:	dd000415 	stw	r20,16(sp)
   4b690:	dcc00315 	stw	r19,12(sp)
   4b694:	dc800215 	stw	r18,8(sp)
   4b698:	dc400115 	stw	r17,4(sp)
   4b69c:	1080020c 	andi	r2,r2,8
   4b6a0:	2821883a 	mov	r16,r5
   4b6a4:	10001726 	beq	r2,zero,4b704 <__sfvwrite_small_dev+0x88>
   4b6a8:	2880008f 	ldh	r2,2(r5)
   4b6ac:	10001216 	blt	r2,zero,4b6f8 <__sfvwrite_small_dev+0x7c>
   4b6b0:	2027883a 	mov	r19,r4
   4b6b4:	3025883a 	mov	r18,r6
   4b6b8:	3823883a 	mov	r17,r7
   4b6bc:	05010004 	movi	r20,1024
   4b6c0:	04400b0e 	bge	zero,r17,4b6f0 <__sfvwrite_small_dev+0x74>
   4b6c4:	8140008f 	ldh	r5,2(r16)
   4b6c8:	880f883a 	mov	r7,r17
   4b6cc:	a440010e 	bge	r20,r17,4b6d4 <__sfvwrite_small_dev+0x58>
   4b6d0:	01c10004 	movi	r7,1024
   4b6d4:	9809883a 	mov	r4,r19
   4b6d8:	900d883a 	mov	r6,r18
   4b6dc:	004b8300 	call	4b830 <_write_r>
   4b6e0:	0080050e 	bge	zero,r2,4b6f8 <__sfvwrite_small_dev+0x7c>
   4b6e4:	88a3c83a 	sub	r17,r17,r2
   4b6e8:	90a5883a 	add	r18,r18,r2
   4b6ec:	003ff406 	br	4b6c0 <__alt_data_end+0xfffd5b60>
   4b6f0:	0005883a 	mov	r2,zero
   4b6f4:	00000406 	br	4b708 <__sfvwrite_small_dev+0x8c>
   4b6f8:	8080000b 	ldhu	r2,0(r16)
   4b6fc:	10801014 	ori	r2,r2,64
   4b700:	8080000d 	sth	r2,0(r16)
   4b704:	00bfffc4 	movi	r2,-1
   4b708:	dfc00517 	ldw	ra,20(sp)
   4b70c:	dd000417 	ldw	r20,16(sp)
   4b710:	dcc00317 	ldw	r19,12(sp)
   4b714:	dc800217 	ldw	r18,8(sp)
   4b718:	dc400117 	ldw	r17,4(sp)
   4b71c:	dc000017 	ldw	r16,0(sp)
   4b720:	dec00604 	addi	sp,sp,24
   4b724:	f800283a 	ret

0004b728 <__sfvwrite_small_str>:
   4b728:	2880000b 	ldhu	r2,0(r5)
   4b72c:	defffd04 	addi	sp,sp,-12
   4b730:	dc000015 	stw	r16,0(sp)
   4b734:	dfc00215 	stw	ra,8(sp)
   4b738:	dc400115 	stw	r17,4(sp)
   4b73c:	10c0020c 	andi	r3,r2,8
   4b740:	2821883a 	mov	r16,r5
   4b744:	18001926 	beq	r3,zero,4b7ac <__sfvwrite_small_str+0x84>
   4b748:	28c0008f 	ldh	r3,2(r5)
   4b74c:	1800150e 	bge	r3,zero,4b7a4 <__sfvwrite_small_str+0x7c>
   4b750:	10c0800c 	andi	r3,r2,512
   4b754:	18001326 	beq	r3,zero,4b7a4 <__sfvwrite_small_str+0x7c>
   4b758:	84400517 	ldw	r17,20(r16)
   4b75c:	300b883a 	mov	r5,r6
   4b760:	89c0030e 	bge	r17,r7,4b770 <__sfvwrite_small_str+0x48>
   4b764:	10c0200c 	andi	r3,r2,128
   4b768:	18000326 	beq	r3,zero,4b778 <__sfvwrite_small_str+0x50>
   4b76c:	00000d06 	br	4b7a4 <__sfvwrite_small_str+0x7c>
   4b770:	3c40010e 	bge	r7,r17,4b778 <__sfvwrite_small_str+0x50>
   4b774:	3823883a 	mov	r17,r7
   4b778:	81000417 	ldw	r4,16(r16)
   4b77c:	880d883a 	mov	r6,r17
   4b780:	004b7c40 	call	4b7c4 <memmove>
   4b784:	80800517 	ldw	r2,20(r16)
   4b788:	1445c83a 	sub	r2,r2,r17
   4b78c:	80800515 	stw	r2,20(r16)
   4b790:	80800417 	ldw	r2,16(r16)
   4b794:	1463883a 	add	r17,r2,r17
   4b798:	84400415 	stw	r17,16(r16)
   4b79c:	0005883a 	mov	r2,zero
   4b7a0:	00000306 	br	4b7b0 <__sfvwrite_small_str+0x88>
   4b7a4:	10801014 	ori	r2,r2,64
   4b7a8:	8080000d 	sth	r2,0(r16)
   4b7ac:	00bfffc4 	movi	r2,-1
   4b7b0:	dfc00217 	ldw	ra,8(sp)
   4b7b4:	dc400117 	ldw	r17,4(sp)
   4b7b8:	dc000017 	ldw	r16,0(sp)
   4b7bc:	dec00304 	addi	sp,sp,12
   4b7c0:	f800283a 	ret

0004b7c4 <memmove>:
   4b7c4:	2005883a 	mov	r2,r4
   4b7c8:	29000236 	bltu	r5,r4,4b7d4 <memmove+0x10>
   4b7cc:	0007883a 	mov	r3,zero
   4b7d0:	00000f06 	br	4b810 <memmove+0x4c>
   4b7d4:	2989883a 	add	r4,r5,r6
   4b7d8:	113ffc2e 	bgeu	r2,r4,4b7cc <__alt_data_end+0xfffd5c6c>
   4b7dc:	0187c83a 	sub	r3,zero,r6
   4b7e0:	118f883a 	add	r7,r2,r6
   4b7e4:	20c9883a 	add	r4,r4,r3
   4b7e8:	017fffc4 	movi	r5,-1
   4b7ec:	38c7883a 	add	r3,r7,r3
   4b7f0:	31bfffc4 	addi	r6,r6,-1
   4b7f4:	31400526 	beq	r6,r5,4b80c <memmove+0x48>
   4b7f8:	218f883a 	add	r7,r4,r6
   4b7fc:	3a000003 	ldbu	r8,0(r7)
   4b800:	198f883a 	add	r7,r3,r6
   4b804:	3a000005 	stb	r8,0(r7)
   4b808:	003ff906 	br	4b7f0 <__alt_data_end+0xfffd5c90>
   4b80c:	f800283a 	ret
   4b810:	19800626 	beq	r3,r6,4b82c <memmove+0x68>
   4b814:	28c9883a 	add	r4,r5,r3
   4b818:	21c00003 	ldbu	r7,0(r4)
   4b81c:	10c9883a 	add	r4,r2,r3
   4b820:	18c00044 	addi	r3,r3,1
   4b824:	21c00005 	stb	r7,0(r4)
   4b828:	003ff906 	br	4b810 <__alt_data_end+0xfffd5cb0>
   4b82c:	f800283a 	ret

0004b830 <_write_r>:
   4b830:	defffd04 	addi	sp,sp,-12
   4b834:	dc400115 	stw	r17,4(sp)
   4b838:	dc000015 	stw	r16,0(sp)
   4b83c:	2023883a 	mov	r17,r4
   4b840:	040001f4 	movhi	r16,7
   4b844:	842f9f04 	addi	r16,r16,-16772
   4b848:	2809883a 	mov	r4,r5
   4b84c:	300b883a 	mov	r5,r6
   4b850:	380d883a 	mov	r6,r7
   4b854:	dfc00215 	stw	ra,8(sp)
   4b858:	80000015 	stw	zero,0(r16)
   4b85c:	004c0f80 	call	4c0f8 <write>
   4b860:	00ffffc4 	movi	r3,-1
   4b864:	10c0031e 	bne	r2,r3,4b874 <_write_r+0x44>
   4b868:	80c00017 	ldw	r3,0(r16)
   4b86c:	18000126 	beq	r3,zero,4b874 <_write_r+0x44>
   4b870:	88c00015 	stw	r3,0(r17)
   4b874:	dfc00217 	ldw	ra,8(sp)
   4b878:	dc400117 	ldw	r17,4(sp)
   4b87c:	dc000017 	ldw	r16,0(sp)
   4b880:	dec00304 	addi	sp,sp,12
   4b884:	f800283a 	ret

0004b888 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4b888:	defff504 	addi	sp,sp,-44
   4b88c:	df000a15 	stw	fp,40(sp)
   4b890:	df000a04 	addi	fp,sp,40
   4b894:	e13ffc15 	stw	r4,-16(fp)
   4b898:	e17ffd15 	stw	r5,-12(fp)
   4b89c:	e1bffe15 	stw	r6,-8(fp)
   4b8a0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4b8a4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4b8a8:	008001f4 	movhi	r2,7
   4b8ac:	10afa404 	addi	r2,r2,-16752
   4b8b0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4b8b4:	10003f26 	beq	r2,zero,4b9b4 <alt_alarm_start+0x12c>
  {
    if (alarm)
   4b8b8:	e0bffc17 	ldw	r2,-16(fp)
   4b8bc:	10003b26 	beq	r2,zero,4b9ac <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   4b8c0:	e0bffc17 	ldw	r2,-16(fp)
   4b8c4:	e0fffe17 	ldw	r3,-8(fp)
   4b8c8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   4b8cc:	e0bffc17 	ldw	r2,-16(fp)
   4b8d0:	e0ffff17 	ldw	r3,-4(fp)
   4b8d4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b8d8:	0005303a 	rdctl	r2,status
   4b8dc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b8e0:	e0fff817 	ldw	r3,-32(fp)
   4b8e4:	00bfff84 	movi	r2,-2
   4b8e8:	1884703a 	and	r2,r3,r2
   4b8ec:	1001703a 	wrctl	status,r2
  
  return context;
   4b8f0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4b8f4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4b8f8:	008001f4 	movhi	r2,7
   4b8fc:	10afa504 	addi	r2,r2,-16748
   4b900:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4b904:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4b908:	e0fffd17 	ldw	r3,-12(fp)
   4b90c:	e0bff617 	ldw	r2,-40(fp)
   4b910:	1885883a 	add	r2,r3,r2
   4b914:	10c00044 	addi	r3,r2,1
   4b918:	e0bffc17 	ldw	r2,-16(fp)
   4b91c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4b920:	e0bffc17 	ldw	r2,-16(fp)
   4b924:	10c00217 	ldw	r3,8(r2)
   4b928:	e0bff617 	ldw	r2,-40(fp)
   4b92c:	1880042e 	bgeu	r3,r2,4b940 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   4b930:	e0bffc17 	ldw	r2,-16(fp)
   4b934:	00c00044 	movi	r3,1
   4b938:	10c00405 	stb	r3,16(r2)
   4b93c:	00000206 	br	4b948 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   4b940:	e0bffc17 	ldw	r2,-16(fp)
   4b944:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4b948:	e0bffc17 	ldw	r2,-16(fp)
   4b94c:	00c001f4 	movhi	r3,7
   4b950:	18e6e804 	addi	r3,r3,-25696
   4b954:	e0fff915 	stw	r3,-28(fp)
   4b958:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4b95c:	e0bffa17 	ldw	r2,-24(fp)
   4b960:	e0fff917 	ldw	r3,-28(fp)
   4b964:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4b968:	e0bff917 	ldw	r2,-28(fp)
   4b96c:	10c00017 	ldw	r3,0(r2)
   4b970:	e0bffa17 	ldw	r2,-24(fp)
   4b974:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4b978:	e0bff917 	ldw	r2,-28(fp)
   4b97c:	10800017 	ldw	r2,0(r2)
   4b980:	e0fffa17 	ldw	r3,-24(fp)
   4b984:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4b988:	e0bff917 	ldw	r2,-28(fp)
   4b98c:	e0fffa17 	ldw	r3,-24(fp)
   4b990:	10c00015 	stw	r3,0(r2)
   4b994:	e0bff717 	ldw	r2,-36(fp)
   4b998:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b99c:	e0bffb17 	ldw	r2,-20(fp)
   4b9a0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4b9a4:	0005883a 	mov	r2,zero
   4b9a8:	00000306 	br	4b9b8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   4b9ac:	00bffa84 	movi	r2,-22
   4b9b0:	00000106 	br	4b9b8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   4b9b4:	00bfde84 	movi	r2,-134
  }
}
   4b9b8:	e037883a 	mov	sp,fp
   4b9bc:	df000017 	ldw	fp,0(sp)
   4b9c0:	dec00104 	addi	sp,sp,4
   4b9c4:	f800283a 	ret

0004b9c8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4b9c8:	defff904 	addi	sp,sp,-28
   4b9cc:	dfc00615 	stw	ra,24(sp)
   4b9d0:	df000515 	stw	fp,20(sp)
   4b9d4:	df000504 	addi	fp,sp,20
   4b9d8:	e13ffc15 	stw	r4,-16(fp)
   4b9dc:	e17ffd15 	stw	r5,-12(fp)
   4b9e0:	e1bffe15 	stw	r6,-8(fp)
   4b9e4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4b9e8:	e0800217 	ldw	r2,8(fp)
   4b9ec:	d8800015 	stw	r2,0(sp)
   4b9f0:	e13ffc17 	ldw	r4,-16(fp)
   4b9f4:	e17ffd17 	ldw	r5,-12(fp)
   4b9f8:	e1bffe17 	ldw	r6,-8(fp)
   4b9fc:	e1ffff17 	ldw	r7,-4(fp)
   4ba00:	004bba00 	call	4bba0 <alt_iic_isr_register>
}  
   4ba04:	e037883a 	mov	sp,fp
   4ba08:	dfc00117 	ldw	ra,4(sp)
   4ba0c:	df000017 	ldw	fp,0(sp)
   4ba10:	dec00204 	addi	sp,sp,8
   4ba14:	f800283a 	ret

0004ba18 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4ba18:	defff904 	addi	sp,sp,-28
   4ba1c:	df000615 	stw	fp,24(sp)
   4ba20:	df000604 	addi	fp,sp,24
   4ba24:	e13ffe15 	stw	r4,-8(fp)
   4ba28:	e17fff15 	stw	r5,-4(fp)
   4ba2c:	e0bfff17 	ldw	r2,-4(fp)
   4ba30:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ba34:	0005303a 	rdctl	r2,status
   4ba38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ba3c:	e0fffb17 	ldw	r3,-20(fp)
   4ba40:	00bfff84 	movi	r2,-2
   4ba44:	1884703a 	and	r2,r3,r2
   4ba48:	1001703a 	wrctl	status,r2
  
  return context;
   4ba4c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4ba50:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4ba54:	e0bffa17 	ldw	r2,-24(fp)
   4ba58:	00c00044 	movi	r3,1
   4ba5c:	1884983a 	sll	r2,r3,r2
   4ba60:	1007883a 	mov	r3,r2
   4ba64:	008001f4 	movhi	r2,7
   4ba68:	10afa004 	addi	r2,r2,-16768
   4ba6c:	10800017 	ldw	r2,0(r2)
   4ba70:	1886b03a 	or	r3,r3,r2
   4ba74:	008001f4 	movhi	r2,7
   4ba78:	10afa004 	addi	r2,r2,-16768
   4ba7c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4ba80:	008001f4 	movhi	r2,7
   4ba84:	10afa004 	addi	r2,r2,-16768
   4ba88:	10800017 	ldw	r2,0(r2)
   4ba8c:	100170fa 	wrctl	ienable,r2
   4ba90:	e0bffc17 	ldw	r2,-16(fp)
   4ba94:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ba98:	e0bffd17 	ldw	r2,-12(fp)
   4ba9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4baa0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   4baa4:	e037883a 	mov	sp,fp
   4baa8:	df000017 	ldw	fp,0(sp)
   4baac:	dec00104 	addi	sp,sp,4
   4bab0:	f800283a 	ret

0004bab4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4bab4:	defff904 	addi	sp,sp,-28
   4bab8:	df000615 	stw	fp,24(sp)
   4babc:	df000604 	addi	fp,sp,24
   4bac0:	e13ffe15 	stw	r4,-8(fp)
   4bac4:	e17fff15 	stw	r5,-4(fp)
   4bac8:	e0bfff17 	ldw	r2,-4(fp)
   4bacc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bad0:	0005303a 	rdctl	r2,status
   4bad4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bad8:	e0fffb17 	ldw	r3,-20(fp)
   4badc:	00bfff84 	movi	r2,-2
   4bae0:	1884703a 	and	r2,r3,r2
   4bae4:	1001703a 	wrctl	status,r2
  
  return context;
   4bae8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4baec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4baf0:	e0bffa17 	ldw	r2,-24(fp)
   4baf4:	00c00044 	movi	r3,1
   4baf8:	1884983a 	sll	r2,r3,r2
   4bafc:	0084303a 	nor	r2,zero,r2
   4bb00:	1007883a 	mov	r3,r2
   4bb04:	008001f4 	movhi	r2,7
   4bb08:	10afa004 	addi	r2,r2,-16768
   4bb0c:	10800017 	ldw	r2,0(r2)
   4bb10:	1886703a 	and	r3,r3,r2
   4bb14:	008001f4 	movhi	r2,7
   4bb18:	10afa004 	addi	r2,r2,-16768
   4bb1c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4bb20:	008001f4 	movhi	r2,7
   4bb24:	10afa004 	addi	r2,r2,-16768
   4bb28:	10800017 	ldw	r2,0(r2)
   4bb2c:	100170fa 	wrctl	ienable,r2
   4bb30:	e0bffc17 	ldw	r2,-16(fp)
   4bb34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bb38:	e0bffd17 	ldw	r2,-12(fp)
   4bb3c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4bb40:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   4bb44:	e037883a 	mov	sp,fp
   4bb48:	df000017 	ldw	fp,0(sp)
   4bb4c:	dec00104 	addi	sp,sp,4
   4bb50:	f800283a 	ret

0004bb54 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4bb54:	defffc04 	addi	sp,sp,-16
   4bb58:	df000315 	stw	fp,12(sp)
   4bb5c:	df000304 	addi	fp,sp,12
   4bb60:	e13ffe15 	stw	r4,-8(fp)
   4bb64:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4bb68:	000530fa 	rdctl	r2,ienable
   4bb6c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4bb70:	e0bfff17 	ldw	r2,-4(fp)
   4bb74:	00c00044 	movi	r3,1
   4bb78:	1884983a 	sll	r2,r3,r2
   4bb7c:	1007883a 	mov	r3,r2
   4bb80:	e0bffd17 	ldw	r2,-12(fp)
   4bb84:	1884703a 	and	r2,r3,r2
   4bb88:	1004c03a 	cmpne	r2,r2,zero
   4bb8c:	10803fcc 	andi	r2,r2,255
}
   4bb90:	e037883a 	mov	sp,fp
   4bb94:	df000017 	ldw	fp,0(sp)
   4bb98:	dec00104 	addi	sp,sp,4
   4bb9c:	f800283a 	ret

0004bba0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4bba0:	defff504 	addi	sp,sp,-44
   4bba4:	dfc00a15 	stw	ra,40(sp)
   4bba8:	df000915 	stw	fp,36(sp)
   4bbac:	df000904 	addi	fp,sp,36
   4bbb0:	e13ffc15 	stw	r4,-16(fp)
   4bbb4:	e17ffd15 	stw	r5,-12(fp)
   4bbb8:	e1bffe15 	stw	r6,-8(fp)
   4bbbc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4bbc0:	00bffa84 	movi	r2,-22
   4bbc4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4bbc8:	e0bffd17 	ldw	r2,-12(fp)
   4bbcc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4bbd0:	e0bff817 	ldw	r2,-32(fp)
   4bbd4:	10800808 	cmpgei	r2,r2,32
   4bbd8:	1000271e 	bne	r2,zero,4bc78 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bbdc:	0005303a 	rdctl	r2,status
   4bbe0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bbe4:	e0fffa17 	ldw	r3,-24(fp)
   4bbe8:	00bfff84 	movi	r2,-2
   4bbec:	1884703a 	and	r2,r3,r2
   4bbf0:	1001703a 	wrctl	status,r2
  
  return context;
   4bbf4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4bbf8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   4bbfc:	00c001f4 	movhi	r3,7
   4bc00:	18efb104 	addi	r3,r3,-16700
   4bc04:	e0bff817 	ldw	r2,-32(fp)
   4bc08:	100490fa 	slli	r2,r2,3
   4bc0c:	1885883a 	add	r2,r3,r2
   4bc10:	e0fffe17 	ldw	r3,-8(fp)
   4bc14:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   4bc18:	00c001f4 	movhi	r3,7
   4bc1c:	18efb104 	addi	r3,r3,-16700
   4bc20:	e0bff817 	ldw	r2,-32(fp)
   4bc24:	100490fa 	slli	r2,r2,3
   4bc28:	1885883a 	add	r2,r3,r2
   4bc2c:	10800104 	addi	r2,r2,4
   4bc30:	e0ffff17 	ldw	r3,-4(fp)
   4bc34:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4bc38:	e0bffe17 	ldw	r2,-8(fp)
   4bc3c:	10000526 	beq	r2,zero,4bc54 <alt_iic_isr_register+0xb4>
   4bc40:	e0bff817 	ldw	r2,-32(fp)
   4bc44:	e13ffc17 	ldw	r4,-16(fp)
   4bc48:	100b883a 	mov	r5,r2
   4bc4c:	004ba180 	call	4ba18 <alt_ic_irq_enable>
   4bc50:	00000406 	br	4bc64 <alt_iic_isr_register+0xc4>
   4bc54:	e0bff817 	ldw	r2,-32(fp)
   4bc58:	e13ffc17 	ldw	r4,-16(fp)
   4bc5c:	100b883a 	mov	r5,r2
   4bc60:	004bab40 	call	4bab4 <alt_ic_irq_disable>
   4bc64:	e0bff715 	stw	r2,-36(fp)
   4bc68:	e0bff917 	ldw	r2,-28(fp)
   4bc6c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bc70:	e0bffb17 	ldw	r2,-20(fp)
   4bc74:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4bc78:	e0bff717 	ldw	r2,-36(fp)
}
   4bc7c:	e037883a 	mov	sp,fp
   4bc80:	dfc00117 	ldw	ra,4(sp)
   4bc84:	df000017 	ldw	fp,0(sp)
   4bc88:	dec00204 	addi	sp,sp,8
   4bc8c:	f800283a 	ret

0004bc90 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4bc90:	defffc04 	addi	sp,sp,-16
   4bc94:	df000315 	stw	fp,12(sp)
   4bc98:	df000304 	addi	fp,sp,12
   4bc9c:	e13ffd15 	stw	r4,-12(fp)
   4bca0:	e17ffe15 	stw	r5,-8(fp)
   4bca4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4bca8:	e0fffe17 	ldw	r3,-8(fp)
   4bcac:	e0bffd17 	ldw	r2,-12(fp)
   4bcb0:	18800c26 	beq	r3,r2,4bce4 <alt_load_section+0x54>
  {
    while( to != end )
   4bcb4:	00000806 	br	4bcd8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   4bcb8:	e0bffe17 	ldw	r2,-8(fp)
   4bcbc:	10c00104 	addi	r3,r2,4
   4bcc0:	e0fffe15 	stw	r3,-8(fp)
   4bcc4:	e0fffd17 	ldw	r3,-12(fp)
   4bcc8:	19000104 	addi	r4,r3,4
   4bccc:	e13ffd15 	stw	r4,-12(fp)
   4bcd0:	18c00017 	ldw	r3,0(r3)
   4bcd4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4bcd8:	e0fffe17 	ldw	r3,-8(fp)
   4bcdc:	e0bfff17 	ldw	r2,-4(fp)
   4bce0:	18bff51e 	bne	r3,r2,4bcb8 <__alt_data_end+0xfffd6158>
    {
      *to++ = *from++;
    }
  }
}
   4bce4:	e037883a 	mov	sp,fp
   4bce8:	df000017 	ldw	fp,0(sp)
   4bcec:	dec00104 	addi	sp,sp,4
   4bcf0:	f800283a 	ret

0004bcf4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4bcf4:	defffe04 	addi	sp,sp,-8
   4bcf8:	dfc00115 	stw	ra,4(sp)
   4bcfc:	df000015 	stw	fp,0(sp)
   4bd00:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4bd04:	010001f4 	movhi	r4,7
   4bd08:	2126f004 	addi	r4,r4,-25664
   4bd0c:	014001b4 	movhi	r5,6
   4bd10:	295e4504 	addi	r5,r5,30996
   4bd14:	018001f4 	movhi	r6,7
   4bd18:	31a6f004 	addi	r6,r6,-25664
   4bd1c:	004bc900 	call	4bc90 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4bd20:	01000134 	movhi	r4,4
   4bd24:	21000804 	addi	r4,r4,32
   4bd28:	01400134 	movhi	r5,4
   4bd2c:	29400804 	addi	r5,r5,32
   4bd30:	01800134 	movhi	r6,4
   4bd34:	31809004 	addi	r6,r6,576
   4bd38:	004bc900 	call	4bc90 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4bd3c:	01000174 	movhi	r4,5
   4bd40:	2135e904 	addi	r4,r4,-10332
   4bd44:	01400174 	movhi	r5,5
   4bd48:	2975e904 	addi	r5,r5,-10332
   4bd4c:	018001b4 	movhi	r6,6
   4bd50:	319e4504 	addi	r6,r6,30996
   4bd54:	004bc900 	call	4bc90 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4bd58:	004ca3c0 	call	4ca3c <alt_dcache_flush_all>
  alt_icache_flush_all();
   4bd5c:	004cc540 	call	4cc54 <alt_icache_flush_all>
}
   4bd60:	e037883a 	mov	sp,fp
   4bd64:	dfc00117 	ldw	ra,4(sp)
   4bd68:	df000017 	ldw	fp,0(sp)
   4bd6c:	dec00204 	addi	sp,sp,8
   4bd70:	f800283a 	ret

0004bd74 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4bd74:	defffd04 	addi	sp,sp,-12
   4bd78:	dfc00215 	stw	ra,8(sp)
   4bd7c:	df000115 	stw	fp,4(sp)
   4bd80:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4bd84:	0009883a 	mov	r4,zero
   4bd88:	004c21c0 	call	4c21c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4bd8c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4bd90:	004c2500 	call	4c250 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4bd94:	010001b4 	movhi	r4,6
   4bd98:	211e3a04 	addi	r4,r4,30952
   4bd9c:	014001b4 	movhi	r5,6
   4bda0:	295e3a04 	addi	r5,r5,30952
   4bda4:	018001b4 	movhi	r6,6
   4bda8:	319e3a04 	addi	r6,r6,30952
   4bdac:	004cde40 	call	4cde4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4bdb0:	004cb9c0 	call	4cb9c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4bdb4:	01000174 	movhi	r4,5
   4bdb8:	2132fe04 	addi	r4,r4,-13320
   4bdbc:	004d4300 	call	4d430 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4bdc0:	d128c217 	ldw	r4,-23800(gp)
   4bdc4:	d0e8c317 	ldw	r3,-23796(gp)
   4bdc8:	d0a8c417 	ldw	r2,-23792(gp)
   4bdcc:	180b883a 	mov	r5,r3
   4bdd0:	100d883a 	mov	r6,r2
   4bdd4:	00452c80 	call	452c8 <main>
   4bdd8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4bddc:	01000044 	movi	r4,1
   4bde0:	004c9740 	call	4c974 <close>
  exit (result);
   4bde4:	e13fff17 	ldw	r4,-4(fp)
   4bde8:	004d4440 	call	4d444 <exit>

0004bdec <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4bdec:	defffe04 	addi	sp,sp,-8
   4bdf0:	df000115 	stw	fp,4(sp)
   4bdf4:	df000104 	addi	fp,sp,4
   4bdf8:	e13fff15 	stw	r4,-4(fp)
}
   4bdfc:	e037883a 	mov	sp,fp
   4be00:	df000017 	ldw	fp,0(sp)
   4be04:	dec00104 	addi	sp,sp,4
   4be08:	f800283a 	ret

0004be0c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4be0c:	defffe04 	addi	sp,sp,-8
   4be10:	df000115 	stw	fp,4(sp)
   4be14:	df000104 	addi	fp,sp,4
   4be18:	e13fff15 	stw	r4,-4(fp)
}
   4be1c:	e037883a 	mov	sp,fp
   4be20:	df000017 	ldw	fp,0(sp)
   4be24:	dec00104 	addi	sp,sp,4
   4be28:	f800283a 	ret

0004be2c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4be2c:	defff904 	addi	sp,sp,-28
   4be30:	df000615 	stw	fp,24(sp)
   4be34:	df000604 	addi	fp,sp,24
   4be38:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4be3c:	0005303a 	rdctl	r2,status
   4be40:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4be44:	e0fffc17 	ldw	r3,-16(fp)
   4be48:	00bfff84 	movi	r2,-2
   4be4c:	1884703a 	and	r2,r3,r2
   4be50:	1001703a 	wrctl	status,r2
  
  return context;
   4be54:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4be58:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4be5c:	d0a00817 	ldw	r2,-32736(gp)
   4be60:	10c000c4 	addi	r3,r2,3
   4be64:	00bfff04 	movi	r2,-4
   4be68:	1884703a 	and	r2,r3,r2
   4be6c:	d0a00815 	stw	r2,-32736(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4be70:	d0e00817 	ldw	r3,-32736(gp)
   4be74:	e0bfff17 	ldw	r2,-4(fp)
   4be78:	1885883a 	add	r2,r3,r2
   4be7c:	00c001f4 	movhi	r3,7
   4be80:	18d6d804 	addi	r3,r3,23392
   4be84:	1880062e 	bgeu	r3,r2,4bea0 <sbrk+0x74>
   4be88:	e0bffa17 	ldw	r2,-24(fp)
   4be8c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4be90:	e0bffd17 	ldw	r2,-12(fp)
   4be94:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4be98:	00bfffc4 	movi	r2,-1
   4be9c:	00000b06 	br	4becc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4bea0:	d0a00817 	ldw	r2,-32736(gp)
   4bea4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   4bea8:	d0e00817 	ldw	r3,-32736(gp)
   4beac:	e0bfff17 	ldw	r2,-4(fp)
   4beb0:	1885883a 	add	r2,r3,r2
   4beb4:	d0a00815 	stw	r2,-32736(gp)
   4beb8:	e0bffa17 	ldw	r2,-24(fp)
   4bebc:	e0bffe15 	stw	r2,-8(fp)
   4bec0:	e0bffe17 	ldw	r2,-8(fp)
   4bec4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4bec8:	e0bffb17 	ldw	r2,-20(fp)
} 
   4becc:	e037883a 	mov	sp,fp
   4bed0:	df000017 	ldw	fp,0(sp)
   4bed4:	dec00104 	addi	sp,sp,4
   4bed8:	f800283a 	ret

0004bedc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4bedc:	defffa04 	addi	sp,sp,-24
   4bee0:	df000515 	stw	fp,20(sp)
   4bee4:	df000504 	addi	fp,sp,20
   4bee8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4beec:	0005303a 	rdctl	r2,status
   4bef0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bef4:	e0fffc17 	ldw	r3,-16(fp)
   4bef8:	00bfff84 	movi	r2,-2
   4befc:	1884703a 	and	r2,r3,r2
   4bf00:	1001703a 	wrctl	status,r2
  
  return context;
   4bf04:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4bf08:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   4bf0c:	e0bfff17 	ldw	r2,-4(fp)
   4bf10:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4bf14:	e0bffd17 	ldw	r2,-12(fp)
   4bf18:	10800017 	ldw	r2,0(r2)
   4bf1c:	e0fffd17 	ldw	r3,-12(fp)
   4bf20:	18c00117 	ldw	r3,4(r3)
   4bf24:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   4bf28:	e0bffd17 	ldw	r2,-12(fp)
   4bf2c:	10800117 	ldw	r2,4(r2)
   4bf30:	e0fffd17 	ldw	r3,-12(fp)
   4bf34:	18c00017 	ldw	r3,0(r3)
   4bf38:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4bf3c:	e0bffd17 	ldw	r2,-12(fp)
   4bf40:	e0fffd17 	ldw	r3,-12(fp)
   4bf44:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   4bf48:	e0bffd17 	ldw	r2,-12(fp)
   4bf4c:	e0fffd17 	ldw	r3,-12(fp)
   4bf50:	10c00015 	stw	r3,0(r2)
   4bf54:	e0bffb17 	ldw	r2,-20(fp)
   4bf58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bf5c:	e0bffe17 	ldw	r2,-8(fp)
   4bf60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4bf64:	e037883a 	mov	sp,fp
   4bf68:	df000017 	ldw	fp,0(sp)
   4bf6c:	dec00104 	addi	sp,sp,4
   4bf70:	f800283a 	ret

0004bf74 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4bf74:	defffb04 	addi	sp,sp,-20
   4bf78:	dfc00415 	stw	ra,16(sp)
   4bf7c:	df000315 	stw	fp,12(sp)
   4bf80:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4bf84:	d0a00917 	ldw	r2,-32732(gp)
   4bf88:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4bf8c:	d0a8c617 	ldw	r2,-23784(gp)
   4bf90:	10800044 	addi	r2,r2,1
   4bf94:	d0a8c615 	stw	r2,-23784(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4bf98:	00002e06 	br	4c054 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4bf9c:	e0bffd17 	ldw	r2,-12(fp)
   4bfa0:	10800017 	ldw	r2,0(r2)
   4bfa4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4bfa8:	e0bffd17 	ldw	r2,-12(fp)
   4bfac:	10800403 	ldbu	r2,16(r2)
   4bfb0:	10803fcc 	andi	r2,r2,255
   4bfb4:	10000426 	beq	r2,zero,4bfc8 <alt_tick+0x54>
   4bfb8:	d0a8c617 	ldw	r2,-23784(gp)
   4bfbc:	1000021e 	bne	r2,zero,4bfc8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4bfc0:	e0bffd17 	ldw	r2,-12(fp)
   4bfc4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4bfc8:	e0bffd17 	ldw	r2,-12(fp)
   4bfcc:	10800217 	ldw	r2,8(r2)
   4bfd0:	d0e8c617 	ldw	r3,-23784(gp)
   4bfd4:	18801d36 	bltu	r3,r2,4c04c <alt_tick+0xd8>
   4bfd8:	e0bffd17 	ldw	r2,-12(fp)
   4bfdc:	10800403 	ldbu	r2,16(r2)
   4bfe0:	10803fcc 	andi	r2,r2,255
   4bfe4:	1000191e 	bne	r2,zero,4c04c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   4bfe8:	e0bffd17 	ldw	r2,-12(fp)
   4bfec:	10800317 	ldw	r2,12(r2)
   4bff0:	e0fffd17 	ldw	r3,-12(fp)
   4bff4:	18c00517 	ldw	r3,20(r3)
   4bff8:	1809883a 	mov	r4,r3
   4bffc:	103ee83a 	callr	r2
   4c000:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4c004:	e0bfff17 	ldw	r2,-4(fp)
   4c008:	1000031e 	bne	r2,zero,4c018 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4c00c:	e13ffd17 	ldw	r4,-12(fp)
   4c010:	004bedc0 	call	4bedc <alt_alarm_stop>
   4c014:	00000d06 	br	4c04c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   4c018:	e0bffd17 	ldw	r2,-12(fp)
   4c01c:	10c00217 	ldw	r3,8(r2)
   4c020:	e0bfff17 	ldw	r2,-4(fp)
   4c024:	1887883a 	add	r3,r3,r2
   4c028:	e0bffd17 	ldw	r2,-12(fp)
   4c02c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4c030:	e0bffd17 	ldw	r2,-12(fp)
   4c034:	10c00217 	ldw	r3,8(r2)
   4c038:	d0a8c617 	ldw	r2,-23784(gp)
   4c03c:	1880032e 	bgeu	r3,r2,4c04c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   4c040:	e0bffd17 	ldw	r2,-12(fp)
   4c044:	00c00044 	movi	r3,1
   4c048:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4c04c:	e0bffe17 	ldw	r2,-8(fp)
   4c050:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4c054:	e0fffd17 	ldw	r3,-12(fp)
   4c058:	d0a00904 	addi	r2,gp,-32732
   4c05c:	18bfcf1e 	bne	r3,r2,4bf9c <__alt_data_end+0xfffd643c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   4c060:	0001883a 	nop
}
   4c064:	e037883a 	mov	sp,fp
   4c068:	dfc00117 	ldw	ra,4(sp)
   4c06c:	df000017 	ldw	fp,0(sp)
   4c070:	dec00204 	addi	sp,sp,8
   4c074:	f800283a 	ret

0004c078 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   4c078:	defffd04 	addi	sp,sp,-12
   4c07c:	dfc00215 	stw	ra,8(sp)
   4c080:	df000115 	stw	fp,4(sp)
   4c084:	df000104 	addi	fp,sp,4
   4c088:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   4c08c:	e13fff17 	ldw	r4,-4(fp)
   4c090:	004c7d00 	call	4c7d0 <alt_busy_sleep>
}
   4c094:	e037883a 	mov	sp,fp
   4c098:	dfc00117 	ldw	ra,4(sp)
   4c09c:	df000017 	ldw	fp,0(sp)
   4c0a0:	dec00204 	addi	sp,sp,8
   4c0a4:	f800283a 	ret

0004c0a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4c0a8:	defffe04 	addi	sp,sp,-8
   4c0ac:	dfc00115 	stw	ra,4(sp)
   4c0b0:	df000015 	stw	fp,0(sp)
   4c0b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4c0b8:	008001f4 	movhi	r2,7
   4c0bc:	10a6ef04 	addi	r2,r2,-25668
   4c0c0:	10800017 	ldw	r2,0(r2)
   4c0c4:	10000526 	beq	r2,zero,4c0dc <alt_get_errno+0x34>
   4c0c8:	008001f4 	movhi	r2,7
   4c0cc:	10a6ef04 	addi	r2,r2,-25668
   4c0d0:	10800017 	ldw	r2,0(r2)
   4c0d4:	103ee83a 	callr	r2
   4c0d8:	00000206 	br	4c0e4 <alt_get_errno+0x3c>
   4c0dc:	008001f4 	movhi	r2,7
   4c0e0:	10af9f04 	addi	r2,r2,-16772
}
   4c0e4:	e037883a 	mov	sp,fp
   4c0e8:	dfc00117 	ldw	ra,4(sp)
   4c0ec:	df000017 	ldw	fp,0(sp)
   4c0f0:	dec00204 	addi	sp,sp,8
   4c0f4:	f800283a 	ret

0004c0f8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4c0f8:	defff904 	addi	sp,sp,-28
   4c0fc:	dfc00615 	stw	ra,24(sp)
   4c100:	df000515 	stw	fp,20(sp)
   4c104:	df000504 	addi	fp,sp,20
   4c108:	e13ffd15 	stw	r4,-12(fp)
   4c10c:	e17ffe15 	stw	r5,-8(fp)
   4c110:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4c114:	e0bffd17 	ldw	r2,-12(fp)
   4c118:	10000616 	blt	r2,zero,4c134 <write+0x3c>
   4c11c:	e0bffd17 	ldw	r2,-12(fp)
   4c120:	10c00324 	muli	r3,r2,12
   4c124:	008001f4 	movhi	r2,7
   4c128:	10a67f04 	addi	r2,r2,-26116
   4c12c:	1885883a 	add	r2,r3,r2
   4c130:	00000106 	br	4c138 <write+0x40>
   4c134:	0005883a 	mov	r2,zero
   4c138:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4c13c:	e0bffb17 	ldw	r2,-20(fp)
   4c140:	10001f26 	beq	r2,zero,4c1c0 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4c144:	e0bffb17 	ldw	r2,-20(fp)
   4c148:	10800217 	ldw	r2,8(r2)
   4c14c:	108000cc 	andi	r2,r2,3
   4c150:	10001726 	beq	r2,zero,4c1b0 <write+0xb8>
   4c154:	e0bffb17 	ldw	r2,-20(fp)
   4c158:	10800017 	ldw	r2,0(r2)
   4c15c:	10800617 	ldw	r2,24(r2)
   4c160:	10001326 	beq	r2,zero,4c1b0 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4c164:	e0bffb17 	ldw	r2,-20(fp)
   4c168:	10800017 	ldw	r2,0(r2)
   4c16c:	10800617 	ldw	r2,24(r2)
   4c170:	e0ffff17 	ldw	r3,-4(fp)
   4c174:	e13ffb17 	ldw	r4,-20(fp)
   4c178:	e17ffe17 	ldw	r5,-8(fp)
   4c17c:	180d883a 	mov	r6,r3
   4c180:	103ee83a 	callr	r2
   4c184:	e0bffc15 	stw	r2,-16(fp)
   4c188:	e0bffc17 	ldw	r2,-16(fp)
   4c18c:	1000060e 	bge	r2,zero,4c1a8 <write+0xb0>
      {
        ALT_ERRNO = -rval;
   4c190:	004c0a80 	call	4c0a8 <alt_get_errno>
   4c194:	e0fffc17 	ldw	r3,-16(fp)
   4c198:	00c7c83a 	sub	r3,zero,r3
   4c19c:	10c00015 	stw	r3,0(r2)
        return -1;
   4c1a0:	00bfffc4 	movi	r2,-1
   4c1a4:	00000a06 	br	4c1d0 <write+0xd8>
      }
      return rval;
   4c1a8:	e0bffc17 	ldw	r2,-16(fp)
   4c1ac:	00000806 	br	4c1d0 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4c1b0:	004c0a80 	call	4c0a8 <alt_get_errno>
   4c1b4:	00c00344 	movi	r3,13
   4c1b8:	10c00015 	stw	r3,0(r2)
   4c1bc:	00000306 	br	4c1cc <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4c1c0:	004c0a80 	call	4c0a8 <alt_get_errno>
   4c1c4:	00c01444 	movi	r3,81
   4c1c8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4c1cc:	00bfffc4 	movi	r2,-1
}
   4c1d0:	e037883a 	mov	sp,fp
   4c1d4:	dfc00117 	ldw	ra,4(sp)
   4c1d8:	df000017 	ldw	fp,0(sp)
   4c1dc:	dec00204 	addi	sp,sp,8
   4c1e0:	f800283a 	ret

0004c1e4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4c1e4:	defffd04 	addi	sp,sp,-12
   4c1e8:	dfc00215 	stw	ra,8(sp)
   4c1ec:	df000115 	stw	fp,4(sp)
   4c1f0:	df000104 	addi	fp,sp,4
   4c1f4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4c1f8:	e13fff17 	ldw	r4,-4(fp)
   4c1fc:	014001f4 	movhi	r5,7
   4c200:	2966ec04 	addi	r5,r5,-25680
   4c204:	004cafc0 	call	4cafc <alt_dev_llist_insert>
}
   4c208:	e037883a 	mov	sp,fp
   4c20c:	dfc00117 	ldw	ra,4(sp)
   4c210:	df000017 	ldw	fp,0(sp)
   4c214:	dec00204 	addi	sp,sp,8
   4c218:	f800283a 	ret

0004c21c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4c21c:	defffd04 	addi	sp,sp,-12
   4c220:	dfc00215 	stw	ra,8(sp)
   4c224:	df000115 	stw	fp,4(sp)
   4c228:	df000104 	addi	fp,sp,4
   4c22c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   4c230:	004d12c0 	call	4d12c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4c234:	00800044 	movi	r2,1
   4c238:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4c23c:	e037883a 	mov	sp,fp
   4c240:	dfc00117 	ldw	ra,4(sp)
   4c244:	df000017 	ldw	fp,0(sp)
   4c248:	dec00204 	addi	sp,sp,8
   4c24c:	f800283a 	ret

0004c250 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4c250:	defffe04 	addi	sp,sp,-8
   4c254:	dfc00115 	stw	ra,4(sp)
   4c258:	df000015 	stw	fp,0(sp)
   4c25c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   4c260:	01000234 	movhi	r4,8
   4c264:	21040804 	addi	r4,r4,4128
   4c268:	000b883a 	mov	r5,zero
   4c26c:	01800044 	movi	r6,1
   4c270:	01c0fa04 	movi	r7,1000
   4c274:	004c7480 	call	4c748 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4c278:	010001f4 	movhi	r4,7
   4c27c:	21266a04 	addi	r4,r4,-26200
   4c280:	004c1e40 	call	4c1e4 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( TOUCH_PANEL_SPI, touch_panel_spi);
   4c284:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   4c288:	0001883a 	nop
}
   4c28c:	e037883a 	mov	sp,fp
   4c290:	dfc00117 	ldw	ra,4(sp)
   4c294:	df000017 	ldw	fp,0(sp)
   4c298:	dec00204 	addi	sp,sp,8
   4c29c:	f800283a 	ret

0004c2a0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4c2a0:	defffa04 	addi	sp,sp,-24
   4c2a4:	dfc00515 	stw	ra,20(sp)
   4c2a8:	df000415 	stw	fp,16(sp)
   4c2ac:	df000404 	addi	fp,sp,16
   4c2b0:	e13ffd15 	stw	r4,-12(fp)
   4c2b4:	e17ffe15 	stw	r5,-8(fp)
   4c2b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4c2bc:	e0bffd17 	ldw	r2,-12(fp)
   4c2c0:	10800017 	ldw	r2,0(r2)
   4c2c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4c2c8:	e0bffc17 	ldw	r2,-16(fp)
   4c2cc:	10c00a04 	addi	r3,r2,40
   4c2d0:	e0bffd17 	ldw	r2,-12(fp)
   4c2d4:	10800217 	ldw	r2,8(r2)
   4c2d8:	1809883a 	mov	r4,r3
   4c2dc:	e17ffe17 	ldw	r5,-8(fp)
   4c2e0:	e1bfff17 	ldw	r6,-4(fp)
   4c2e4:	100f883a 	mov	r7,r2
   4c2e8:	004c3600 	call	4c360 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4c2ec:	e037883a 	mov	sp,fp
   4c2f0:	dfc00117 	ldw	ra,4(sp)
   4c2f4:	df000017 	ldw	fp,0(sp)
   4c2f8:	dec00204 	addi	sp,sp,8
   4c2fc:	f800283a 	ret

0004c300 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4c300:	defffa04 	addi	sp,sp,-24
   4c304:	dfc00515 	stw	ra,20(sp)
   4c308:	df000415 	stw	fp,16(sp)
   4c30c:	df000404 	addi	fp,sp,16
   4c310:	e13ffd15 	stw	r4,-12(fp)
   4c314:	e17ffe15 	stw	r5,-8(fp)
   4c318:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4c31c:	e0bffd17 	ldw	r2,-12(fp)
   4c320:	10800017 	ldw	r2,0(r2)
   4c324:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4c328:	e0bffc17 	ldw	r2,-16(fp)
   4c32c:	10c00a04 	addi	r3,r2,40
   4c330:	e0bffd17 	ldw	r2,-12(fp)
   4c334:	10800217 	ldw	r2,8(r2)
   4c338:	1809883a 	mov	r4,r3
   4c33c:	e17ffe17 	ldw	r5,-8(fp)
   4c340:	e1bfff17 	ldw	r6,-4(fp)
   4c344:	100f883a 	mov	r7,r2
   4c348:	004c4440 	call	4c444 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4c34c:	e037883a 	mov	sp,fp
   4c350:	dfc00117 	ldw	ra,4(sp)
   4c354:	df000017 	ldw	fp,0(sp)
   4c358:	dec00204 	addi	sp,sp,8
   4c35c:	f800283a 	ret

0004c360 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   4c360:	defff704 	addi	sp,sp,-36
   4c364:	df000815 	stw	fp,32(sp)
   4c368:	df000804 	addi	fp,sp,32
   4c36c:	e13ffc15 	stw	r4,-16(fp)
   4c370:	e17ffd15 	stw	r5,-12(fp)
   4c374:	e1bffe15 	stw	r6,-8(fp)
   4c378:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   4c37c:	e0bffc17 	ldw	r2,-16(fp)
   4c380:	10800017 	ldw	r2,0(r2)
   4c384:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   4c388:	e0bffd17 	ldw	r2,-12(fp)
   4c38c:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   4c390:	e0bffe17 	ldw	r2,-8(fp)
   4c394:	e0fffd17 	ldw	r3,-12(fp)
   4c398:	1885883a 	add	r2,r3,r2
   4c39c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   4c3a0:	00001406 	br	4c3f4 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4c3a4:	e0bff917 	ldw	r2,-28(fp)
   4c3a8:	10800037 	ldwio	r2,0(r2)
   4c3ac:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   4c3b0:	e0bffb17 	ldw	r2,-20(fp)
   4c3b4:	10a0000c 	andi	r2,r2,32768
   4c3b8:	10000626 	beq	r2,zero,4c3d4 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4c3bc:	e0bff817 	ldw	r2,-32(fp)
   4c3c0:	10c00044 	addi	r3,r2,1
   4c3c4:	e0fff815 	stw	r3,-32(fp)
   4c3c8:	e0fffb17 	ldw	r3,-20(fp)
   4c3cc:	10c00005 	stb	r3,0(r2)
   4c3d0:	00000806 	br	4c3f4 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
   4c3d4:	e0fff817 	ldw	r3,-32(fp)
   4c3d8:	e0bffd17 	ldw	r2,-12(fp)
   4c3dc:	18800126 	beq	r3,r2,4c3e4 <altera_avalon_jtag_uart_read+0x84>
      break;
   4c3e0:	00000706 	br	4c400 <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
   4c3e4:	e0bfff17 	ldw	r2,-4(fp)
   4c3e8:	1090000c 	andi	r2,r2,16384
   4c3ec:	10000126 	beq	r2,zero,4c3f4 <altera_avalon_jtag_uart_read+0x94>
      break;   
   4c3f0:	00000306 	br	4c400 <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   4c3f4:	e0fff817 	ldw	r3,-32(fp)
   4c3f8:	e0bffa17 	ldw	r2,-24(fp)
   4c3fc:	18bfe936 	bltu	r3,r2,4c3a4 <__alt_data_end+0xfffd6844>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   4c400:	e0fff817 	ldw	r3,-32(fp)
   4c404:	e0bffd17 	ldw	r2,-12(fp)
   4c408:	18800426 	beq	r3,r2,4c41c <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
   4c40c:	e0fff817 	ldw	r3,-32(fp)
   4c410:	e0bffd17 	ldw	r2,-12(fp)
   4c414:	1885c83a 	sub	r2,r3,r2
   4c418:	00000606 	br	4c434 <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
   4c41c:	e0bfff17 	ldw	r2,-4(fp)
   4c420:	1090000c 	andi	r2,r2,16384
   4c424:	10000226 	beq	r2,zero,4c430 <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
   4c428:	00bffd44 	movi	r2,-11
   4c42c:	00000106 	br	4c434 <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
   4c430:	00bffec4 	movi	r2,-5
}
   4c434:	e037883a 	mov	sp,fp
   4c438:	df000017 	ldw	fp,0(sp)
   4c43c:	dec00104 	addi	sp,sp,4
   4c440:	f800283a 	ret

0004c444 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4c444:	defff904 	addi	sp,sp,-28
   4c448:	df000615 	stw	fp,24(sp)
   4c44c:	df000604 	addi	fp,sp,24
   4c450:	e13ffc15 	stw	r4,-16(fp)
   4c454:	e17ffd15 	stw	r5,-12(fp)
   4c458:	e1bffe15 	stw	r6,-8(fp)
   4c45c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   4c460:	e0bffc17 	ldw	r2,-16(fp)
   4c464:	10800017 	ldw	r2,0(r2)
   4c468:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   4c46c:	e0bffe17 	ldw	r2,-8(fp)
   4c470:	e0fffd17 	ldw	r3,-12(fp)
   4c474:	1885883a 	add	r2,r3,r2
   4c478:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   4c47c:	00000e06 	br	4c4b8 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   4c480:	e0bffa17 	ldw	r2,-24(fp)
   4c484:	10800104 	addi	r2,r2,4
   4c488:	10800037 	ldwio	r2,0(r2)
   4c48c:	10bfffec 	andhi	r2,r2,65535
   4c490:	10000926 	beq	r2,zero,4c4b8 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   4c494:	e0fffa17 	ldw	r3,-24(fp)
   4c498:	e0bffd17 	ldw	r2,-12(fp)
   4c49c:	11000044 	addi	r4,r2,1
   4c4a0:	e13ffd15 	stw	r4,-12(fp)
   4c4a4:	10800003 	ldbu	r2,0(r2)
   4c4a8:	10803fcc 	andi	r2,r2,255
   4c4ac:	1080201c 	xori	r2,r2,128
   4c4b0:	10bfe004 	addi	r2,r2,-128
   4c4b4:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   4c4b8:	e0fffd17 	ldw	r3,-12(fp)
   4c4bc:	e0bffb17 	ldw	r2,-20(fp)
   4c4c0:	18bfef36 	bltu	r3,r2,4c480 <__alt_data_end+0xfffd6920>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   4c4c4:	e0bffe17 	ldw	r2,-8(fp)
}
   4c4c8:	e037883a 	mov	sp,fp
   4c4cc:	df000017 	ldw	fp,0(sp)
   4c4d0:	dec00104 	addi	sp,sp,4
   4c4d4:	f800283a 	ret

0004c4d8 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   4c4d8:	defff404 	addi	sp,sp,-48
   4c4dc:	df000b15 	stw	fp,44(sp)
   4c4e0:	df000b04 	addi	fp,sp,44
   4c4e4:	e13ffc15 	stw	r4,-16(fp)
   4c4e8:	e17ffd15 	stw	r5,-12(fp)
   4c4ec:	e1bffe15 	stw	r6,-8(fp)
   4c4f0:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   4c4f4:	e0ffff17 	ldw	r3,-4(fp)
   4c4f8:	e0bffe17 	ldw	r2,-8(fp)
   4c4fc:	1885883a 	add	r2,r3,r2
   4c500:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   4c504:	e0c00217 	ldw	r3,8(fp)
   4c508:	e0800117 	ldw	r2,4(fp)
   4c50c:	1885883a 	add	r2,r3,r2
   4c510:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   4c514:	e0800117 	ldw	r2,4(fp)
   4c518:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   4c51c:	e0bffe17 	ldw	r2,-8(fp)
   4c520:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   4c524:	00800044 	movi	r2,1
   4c528:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   4c52c:	e0bffc17 	ldw	r2,-16(fp)
   4c530:	10800504 	addi	r2,r2,20
   4c534:	e0fffd17 	ldw	r3,-12(fp)
   4c538:	01000044 	movi	r4,1
   4c53c:	20c6983a 	sll	r3,r4,r3
   4c540:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   4c544:	e0800317 	ldw	r2,12(fp)
   4c548:	1080008c 	andi	r2,r2,2
   4c54c:	1000041e 	bne	r2,zero,4c560 <alt_avalon_spi_command+0x88>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   4c550:	e0bffc17 	ldw	r2,-16(fp)
   4c554:	10800304 	addi	r2,r2,12
   4c558:	00c10004 	movi	r3,1024
   4c55c:	10c00035 	stwio	r3,0(r2)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   4c560:	e0bffc17 	ldw	r2,-16(fp)
   4c564:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   4c568:	e0bffc17 	ldw	r2,-16(fp)
   4c56c:	10800204 	addi	r2,r2,8
   4c570:	10800037 	ldwio	r2,0(r2)
   4c574:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   4c578:	e0bffa17 	ldw	r2,-24(fp)
   4c57c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   4c580:	10000226 	beq	r2,zero,4c58c <alt_avalon_spi_command+0xb4>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   4c584:	e0bff717 	ldw	r2,-36(fp)
   4c588:	1000031e 	bne	r2,zero,4c598 <alt_avalon_spi_command+0xc0>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   4c58c:	e0bffa17 	ldw	r2,-24(fp)
   4c590:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   4c594:	103ff426 	beq	r2,zero,4c568 <__alt_data_end+0xfffd6a08>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   4c598:	e0bffa17 	ldw	r2,-24(fp)
   4c59c:	1080100c 	andi	r2,r2,64
   4c5a0:	10001e26 	beq	r2,zero,4c61c <alt_avalon_spi_command+0x144>
   4c5a4:	e0bff717 	ldw	r2,-36(fp)
   4c5a8:	00801c0e 	bge	zero,r2,4c61c <alt_avalon_spi_command+0x144>
    {
      credits--;
   4c5ac:	e0bff717 	ldw	r2,-36(fp)
   4c5b0:	10bfffc4 	addi	r2,r2,-1
   4c5b4:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   4c5b8:	e0ffff17 	ldw	r3,-4(fp)
   4c5bc:	e0bff817 	ldw	r2,-32(fp)
   4c5c0:	18800a2e 	bgeu	r3,r2,4c5ec <alt_avalon_spi_command+0x114>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   4c5c4:	e0bffc17 	ldw	r2,-16(fp)
   4c5c8:	10800104 	addi	r2,r2,4
   4c5cc:	1007883a 	mov	r3,r2
   4c5d0:	e0bfff17 	ldw	r2,-4(fp)
   4c5d4:	11000044 	addi	r4,r2,1
   4c5d8:	e13fff15 	stw	r4,-4(fp)
   4c5dc:	10800003 	ldbu	r2,0(r2)
   4c5e0:	10803fcc 	andi	r2,r2,255
   4c5e4:	18800035 	stwio	r2,0(r3)
   4c5e8:	00000c06 	br	4c61c <alt_avalon_spi_command+0x144>
      else if (write_zeros > 0)
   4c5ec:	e0bff517 	ldw	r2,-44(fp)
   4c5f0:	10000826 	beq	r2,zero,4c614 <alt_avalon_spi_command+0x13c>
      {
        write_zeros--;
   4c5f4:	e0bff517 	ldw	r2,-44(fp)
   4c5f8:	10bfffc4 	addi	r2,r2,-1
   4c5fc:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   4c600:	e0bffc17 	ldw	r2,-16(fp)
   4c604:	10800104 	addi	r2,r2,4
   4c608:	0007883a 	mov	r3,zero
   4c60c:	10c00035 	stwio	r3,0(r2)
   4c610:	00000206 	br	4c61c <alt_avalon_spi_command+0x144>
      }
      else
        credits = -1024;
   4c614:	00bf0004 	movi	r2,-1024
   4c618:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   4c61c:	e0bffa17 	ldw	r2,-24(fp)
   4c620:	1080200c 	andi	r2,r2,128
   4c624:	10001726 	beq	r2,zero,4c684 <alt_avalon_spi_command+0x1ac>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   4c628:	e0bffc17 	ldw	r2,-16(fp)
   4c62c:	10800037 	ldwio	r2,0(r2)
   4c630:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   4c634:	e0bff617 	ldw	r2,-40(fp)
   4c638:	10000426 	beq	r2,zero,4c64c <alt_avalon_spi_command+0x174>
        read_ignore--;
   4c63c:	e0bff617 	ldw	r2,-40(fp)
   4c640:	10bfffc4 	addi	r2,r2,-1
   4c644:	e0bff615 	stw	r2,-40(fp)
   4c648:	00000506 	br	4c660 <alt_avalon_spi_command+0x188>
      else
        *read_data++ = (alt_u8)rxdata;
   4c64c:	e0800217 	ldw	r2,8(fp)
   4c650:	10c00044 	addi	r3,r2,1
   4c654:	e0c00215 	stw	r3,8(fp)
   4c658:	e0fffb17 	ldw	r3,-20(fp)
   4c65c:	10c00005 	stb	r3,0(r2)
      credits++;
   4c660:	e0bff717 	ldw	r2,-36(fp)
   4c664:	10800044 	addi	r2,r2,1
   4c668:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   4c66c:	e0bff617 	ldw	r2,-40(fp)
   4c670:	1000041e 	bne	r2,zero,4c684 <alt_avalon_spi_command+0x1ac>
   4c674:	e0c00217 	ldw	r3,8(fp)
   4c678:	e0bff917 	ldw	r2,-28(fp)
   4c67c:	1880011e 	bne	r3,r2,4c684 <alt_avalon_spi_command+0x1ac>
        break;
   4c680:	00000106 	br	4c688 <alt_avalon_spi_command+0x1b0>
    }
    
  }
   4c684:	003fb806 	br	4c568 <__alt_data_end+0xfffd6a08>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   4c688:	e0bffc17 	ldw	r2,-16(fp)
   4c68c:	10800204 	addi	r2,r2,8
   4c690:	10800037 	ldwio	r2,0(r2)
   4c694:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   4c698:	e0bffa17 	ldw	r2,-24(fp)
   4c69c:	1080080c 	andi	r2,r2,32
   4c6a0:	103ff926 	beq	r2,zero,4c688 <__alt_data_end+0xfffd6b28>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   4c6a4:	e0800317 	ldw	r2,12(fp)
   4c6a8:	1080004c 	andi	r2,r2,1
   4c6ac:	1000041e 	bne	r2,zero,4c6c0 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   4c6b0:	e0bffc17 	ldw	r2,-16(fp)
   4c6b4:	10800304 	addi	r2,r2,12
   4c6b8:	0007883a 	mov	r3,zero
   4c6bc:	10c00035 	stwio	r3,0(r2)

  return read_length;
   4c6c0:	e0800117 	ldw	r2,4(fp)
}
   4c6c4:	e037883a 	mov	sp,fp
   4c6c8:	df000017 	ldw	fp,0(sp)
   4c6cc:	dec00104 	addi	sp,sp,4
   4c6d0:	f800283a 	ret

0004c6d4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4c6d4:	defffa04 	addi	sp,sp,-24
   4c6d8:	dfc00515 	stw	ra,20(sp)
   4c6dc:	df000415 	stw	fp,16(sp)
   4c6e0:	df000404 	addi	fp,sp,16
   4c6e4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4c6e8:	0007883a 	mov	r3,zero
   4c6ec:	e0bfff17 	ldw	r2,-4(fp)
   4c6f0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4c6f4:	e0bfff17 	ldw	r2,-4(fp)
   4c6f8:	10800104 	addi	r2,r2,4
   4c6fc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c700:	0005303a 	rdctl	r2,status
   4c704:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c708:	e0fffd17 	ldw	r3,-12(fp)
   4c70c:	00bfff84 	movi	r2,-2
   4c710:	1884703a 	and	r2,r3,r2
   4c714:	1001703a 	wrctl	status,r2
  
  return context;
   4c718:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4c71c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   4c720:	004bf740 	call	4bf74 <alt_tick>
   4c724:	e0bffc17 	ldw	r2,-16(fp)
   4c728:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c72c:	e0bffe17 	ldw	r2,-8(fp)
   4c730:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4c734:	e037883a 	mov	sp,fp
   4c738:	dfc00117 	ldw	ra,4(sp)
   4c73c:	df000017 	ldw	fp,0(sp)
   4c740:	dec00204 	addi	sp,sp,8
   4c744:	f800283a 	ret

0004c748 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4c748:	defff804 	addi	sp,sp,-32
   4c74c:	dfc00715 	stw	ra,28(sp)
   4c750:	df000615 	stw	fp,24(sp)
   4c754:	df000604 	addi	fp,sp,24
   4c758:	e13ffc15 	stw	r4,-16(fp)
   4c75c:	e17ffd15 	stw	r5,-12(fp)
   4c760:	e1bffe15 	stw	r6,-8(fp)
   4c764:	e1ffff15 	stw	r7,-4(fp)
   4c768:	e0bfff17 	ldw	r2,-4(fp)
   4c76c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4c770:	008001f4 	movhi	r2,7
   4c774:	10afa404 	addi	r2,r2,-16752
   4c778:	10800017 	ldw	r2,0(r2)
   4c77c:	1000041e 	bne	r2,zero,4c790 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   4c780:	008001f4 	movhi	r2,7
   4c784:	10afa404 	addi	r2,r2,-16752
   4c788:	e0fffb17 	ldw	r3,-20(fp)
   4c78c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4c790:	e0bffc17 	ldw	r2,-16(fp)
   4c794:	10800104 	addi	r2,r2,4
   4c798:	00c001c4 	movi	r3,7
   4c79c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4c7a0:	d8000015 	stw	zero,0(sp)
   4c7a4:	e13ffd17 	ldw	r4,-12(fp)
   4c7a8:	e17ffe17 	ldw	r5,-8(fp)
   4c7ac:	01800174 	movhi	r6,5
   4c7b0:	31b1b504 	addi	r6,r6,-14636
   4c7b4:	e1fffc17 	ldw	r7,-16(fp)
   4c7b8:	004b9c80 	call	4b9c8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4c7bc:	e037883a 	mov	sp,fp
   4c7c0:	dfc00117 	ldw	ra,4(sp)
   4c7c4:	df000017 	ldw	fp,0(sp)
   4c7c8:	dec00204 	addi	sp,sp,8
   4c7cc:	f800283a 	ret

0004c7d0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   4c7d0:	defffa04 	addi	sp,sp,-24
   4c7d4:	dfc00515 	stw	ra,20(sp)
   4c7d8:	df000415 	stw	fp,16(sp)
   4c7dc:	df000404 	addi	fp,sp,16
   4c7e0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   4c7e4:	008000c4 	movi	r2,3
   4c7e8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   4c7ec:	e0fffd17 	ldw	r3,-12(fp)
   4c7f0:	008003f4 	movhi	r2,15
   4c7f4:	10909004 	addi	r2,r2,16960
   4c7f8:	1885383a 	mul	r2,r3,r2
   4c7fc:	01023c74 	movhi	r4,2289
   4c800:	21346004 	addi	r4,r4,-11904
   4c804:	100b883a 	mov	r5,r2
   4c808:	00478f80 	call	478f8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   4c80c:	01200034 	movhi	r4,32768
   4c810:	213fffc4 	addi	r4,r4,-1
   4c814:	100b883a 	mov	r5,r2
   4c818:	00478f80 	call	478f8 <__udivsi3>
   4c81c:	e13fff17 	ldw	r4,-4(fp)
   4c820:	100b883a 	mov	r5,r2
   4c824:	00478f80 	call	478f8 <__udivsi3>
   4c828:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   4c82c:	e0bffe17 	ldw	r2,-8(fp)
   4c830:	10002926 	beq	r2,zero,4c8d8 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
   4c834:	e03ffc15 	stw	zero,-16(fp)
   4c838:	00001606 	br	4c894 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   4c83c:	00a00034 	movhi	r2,32768
   4c840:	10bfffc4 	addi	r2,r2,-1
   4c844:	10bfffc4 	addi	r2,r2,-1
   4c848:	103ffe1e 	bne	r2,zero,4c844 <__alt_data_end+0xfffd6ce4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   4c84c:	e0fffd17 	ldw	r3,-12(fp)
   4c850:	008003f4 	movhi	r2,15
   4c854:	10909004 	addi	r2,r2,16960
   4c858:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   4c85c:	01023c74 	movhi	r4,2289
   4c860:	21346004 	addi	r4,r4,-11904
   4c864:	100b883a 	mov	r5,r2
   4c868:	00478f80 	call	478f8 <__udivsi3>
   4c86c:	01200034 	movhi	r4,32768
   4c870:	213fffc4 	addi	r4,r4,-1
   4c874:	100b883a 	mov	r5,r2
   4c878:	00478f80 	call	478f8 <__udivsi3>
   4c87c:	e0ffff17 	ldw	r3,-4(fp)
   4c880:	1885c83a 	sub	r2,r3,r2
   4c884:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   4c888:	e0bffc17 	ldw	r2,-16(fp)
   4c88c:	10800044 	addi	r2,r2,1
   4c890:	e0bffc15 	stw	r2,-16(fp)
   4c894:	e0fffc17 	ldw	r3,-16(fp)
   4c898:	e0bffe17 	ldw	r2,-8(fp)
   4c89c:	18bfe716 	blt	r3,r2,4c83c <__alt_data_end+0xfffd6cdc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   4c8a0:	e0fffd17 	ldw	r3,-12(fp)
   4c8a4:	008003f4 	movhi	r2,15
   4c8a8:	10909004 	addi	r2,r2,16960
   4c8ac:	1885383a 	mul	r2,r3,r2
   4c8b0:	01023c74 	movhi	r4,2289
   4c8b4:	21346004 	addi	r4,r4,-11904
   4c8b8:	100b883a 	mov	r5,r2
   4c8bc:	00478f80 	call	478f8 <__udivsi3>
   4c8c0:	1007883a 	mov	r3,r2
   4c8c4:	e0bfff17 	ldw	r2,-4(fp)
   4c8c8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   4c8cc:	10bfffc4 	addi	r2,r2,-1
   4c8d0:	103ffe1e 	bne	r2,zero,4c8cc <__alt_data_end+0xfffd6d6c>
   4c8d4:	00000d06 	br	4c90c <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   4c8d8:	e0fffd17 	ldw	r3,-12(fp)
   4c8dc:	008003f4 	movhi	r2,15
   4c8e0:	10909004 	addi	r2,r2,16960
   4c8e4:	1885383a 	mul	r2,r3,r2
   4c8e8:	01023c74 	movhi	r4,2289
   4c8ec:	21346004 	addi	r4,r4,-11904
   4c8f0:	100b883a 	mov	r5,r2
   4c8f4:	00478f80 	call	478f8 <__udivsi3>
   4c8f8:	1007883a 	mov	r3,r2
   4c8fc:	e0bfff17 	ldw	r2,-4(fp)
   4c900:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   4c904:	10bfffc4 	addi	r2,r2,-1
   4c908:	00bffe16 	blt	zero,r2,4c904 <__alt_data_end+0xfffd6da4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   4c90c:	0005883a 	mov	r2,zero
}
   4c910:	e037883a 	mov	sp,fp
   4c914:	dfc00117 	ldw	ra,4(sp)
   4c918:	df000017 	ldw	fp,0(sp)
   4c91c:	dec00204 	addi	sp,sp,8
   4c920:	f800283a 	ret

0004c924 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4c924:	defffe04 	addi	sp,sp,-8
   4c928:	dfc00115 	stw	ra,4(sp)
   4c92c:	df000015 	stw	fp,0(sp)
   4c930:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4c934:	008001f4 	movhi	r2,7
   4c938:	10a6ef04 	addi	r2,r2,-25668
   4c93c:	10800017 	ldw	r2,0(r2)
   4c940:	10000526 	beq	r2,zero,4c958 <alt_get_errno+0x34>
   4c944:	008001f4 	movhi	r2,7
   4c948:	10a6ef04 	addi	r2,r2,-25668
   4c94c:	10800017 	ldw	r2,0(r2)
   4c950:	103ee83a 	callr	r2
   4c954:	00000206 	br	4c960 <alt_get_errno+0x3c>
   4c958:	008001f4 	movhi	r2,7
   4c95c:	10af9f04 	addi	r2,r2,-16772
}
   4c960:	e037883a 	mov	sp,fp
   4c964:	dfc00117 	ldw	ra,4(sp)
   4c968:	df000017 	ldw	fp,0(sp)
   4c96c:	dec00204 	addi	sp,sp,8
   4c970:	f800283a 	ret

0004c974 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4c974:	defffb04 	addi	sp,sp,-20
   4c978:	dfc00415 	stw	ra,16(sp)
   4c97c:	df000315 	stw	fp,12(sp)
   4c980:	df000304 	addi	fp,sp,12
   4c984:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4c988:	e0bfff17 	ldw	r2,-4(fp)
   4c98c:	10000616 	blt	r2,zero,4c9a8 <close+0x34>
   4c990:	e0bfff17 	ldw	r2,-4(fp)
   4c994:	10c00324 	muli	r3,r2,12
   4c998:	008001f4 	movhi	r2,7
   4c99c:	10a67f04 	addi	r2,r2,-26116
   4c9a0:	1885883a 	add	r2,r3,r2
   4c9a4:	00000106 	br	4c9ac <close+0x38>
   4c9a8:	0005883a 	mov	r2,zero
   4c9ac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4c9b0:	e0bffd17 	ldw	r2,-12(fp)
   4c9b4:	10001826 	beq	r2,zero,4ca18 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4c9b8:	e0bffd17 	ldw	r2,-12(fp)
   4c9bc:	10800017 	ldw	r2,0(r2)
   4c9c0:	10800417 	ldw	r2,16(r2)
   4c9c4:	10000626 	beq	r2,zero,4c9e0 <close+0x6c>
   4c9c8:	e0bffd17 	ldw	r2,-12(fp)
   4c9cc:	10800017 	ldw	r2,0(r2)
   4c9d0:	10800417 	ldw	r2,16(r2)
   4c9d4:	e13ffd17 	ldw	r4,-12(fp)
   4c9d8:	103ee83a 	callr	r2
   4c9dc:	00000106 	br	4c9e4 <close+0x70>
   4c9e0:	0005883a 	mov	r2,zero
   4c9e4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4c9e8:	e13fff17 	ldw	r4,-4(fp)
   4c9ec:	004d0cc0 	call	4d0cc <alt_release_fd>
    if (rval < 0)
   4c9f0:	e0bffe17 	ldw	r2,-8(fp)
   4c9f4:	1000060e 	bge	r2,zero,4ca10 <close+0x9c>
    {
      ALT_ERRNO = -rval;
   4c9f8:	004c9240 	call	4c924 <alt_get_errno>
   4c9fc:	e0fffe17 	ldw	r3,-8(fp)
   4ca00:	00c7c83a 	sub	r3,zero,r3
   4ca04:	10c00015 	stw	r3,0(r2)
      return -1;
   4ca08:	00bfffc4 	movi	r2,-1
   4ca0c:	00000606 	br	4ca28 <close+0xb4>
    }
    return 0;
   4ca10:	0005883a 	mov	r2,zero
   4ca14:	00000406 	br	4ca28 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4ca18:	004c9240 	call	4c924 <alt_get_errno>
   4ca1c:	00c01444 	movi	r3,81
   4ca20:	10c00015 	stw	r3,0(r2)
    return -1;
   4ca24:	00bfffc4 	movi	r2,-1
  }
}
   4ca28:	e037883a 	mov	sp,fp
   4ca2c:	dfc00117 	ldw	ra,4(sp)
   4ca30:	df000017 	ldw	fp,0(sp)
   4ca34:	dec00204 	addi	sp,sp,8
   4ca38:	f800283a 	ret

0004ca3c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4ca3c:	defffe04 	addi	sp,sp,-8
   4ca40:	df000115 	stw	fp,4(sp)
   4ca44:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4ca48:	e03fff15 	stw	zero,-4(fp)
   4ca4c:	00000506 	br	4ca64 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   4ca50:	e0bfff17 	ldw	r2,-4(fp)
   4ca54:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4ca58:	e0bfff17 	ldw	r2,-4(fp)
   4ca5c:	10800804 	addi	r2,r2,32
   4ca60:	e0bfff15 	stw	r2,-4(fp)
   4ca64:	e0bfff17 	ldw	r2,-4(fp)
   4ca68:	10820030 	cmpltui	r2,r2,2048
   4ca6c:	103ff81e 	bne	r2,zero,4ca50 <__alt_data_end+0xfffd6ef0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4ca70:	e037883a 	mov	sp,fp
   4ca74:	df000017 	ldw	fp,0(sp)
   4ca78:	dec00104 	addi	sp,sp,4
   4ca7c:	f800283a 	ret

0004ca80 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4ca80:	defffc04 	addi	sp,sp,-16
   4ca84:	df000315 	stw	fp,12(sp)
   4ca88:	df000304 	addi	fp,sp,12
   4ca8c:	e13ffd15 	stw	r4,-12(fp)
   4ca90:	e17ffe15 	stw	r5,-8(fp)
   4ca94:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4ca98:	e0bfff17 	ldw	r2,-4(fp)
}
   4ca9c:	e037883a 	mov	sp,fp
   4caa0:	df000017 	ldw	fp,0(sp)
   4caa4:	dec00104 	addi	sp,sp,4
   4caa8:	f800283a 	ret

0004caac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4caac:	defffe04 	addi	sp,sp,-8
   4cab0:	dfc00115 	stw	ra,4(sp)
   4cab4:	df000015 	stw	fp,0(sp)
   4cab8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4cabc:	008001f4 	movhi	r2,7
   4cac0:	10a6ef04 	addi	r2,r2,-25668
   4cac4:	10800017 	ldw	r2,0(r2)
   4cac8:	10000526 	beq	r2,zero,4cae0 <alt_get_errno+0x34>
   4cacc:	008001f4 	movhi	r2,7
   4cad0:	10a6ef04 	addi	r2,r2,-25668
   4cad4:	10800017 	ldw	r2,0(r2)
   4cad8:	103ee83a 	callr	r2
   4cadc:	00000206 	br	4cae8 <alt_get_errno+0x3c>
   4cae0:	008001f4 	movhi	r2,7
   4cae4:	10af9f04 	addi	r2,r2,-16772
}
   4cae8:	e037883a 	mov	sp,fp
   4caec:	dfc00117 	ldw	ra,4(sp)
   4caf0:	df000017 	ldw	fp,0(sp)
   4caf4:	dec00204 	addi	sp,sp,8
   4caf8:	f800283a 	ret

0004cafc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4cafc:	defffa04 	addi	sp,sp,-24
   4cb00:	dfc00515 	stw	ra,20(sp)
   4cb04:	df000415 	stw	fp,16(sp)
   4cb08:	df000404 	addi	fp,sp,16
   4cb0c:	e13ffe15 	stw	r4,-8(fp)
   4cb10:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4cb14:	e0bffe17 	ldw	r2,-8(fp)
   4cb18:	10000326 	beq	r2,zero,4cb28 <alt_dev_llist_insert+0x2c>
   4cb1c:	e0bffe17 	ldw	r2,-8(fp)
   4cb20:	10800217 	ldw	r2,8(r2)
   4cb24:	1000051e 	bne	r2,zero,4cb3c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   4cb28:	004caac0 	call	4caac <alt_get_errno>
   4cb2c:	00c00584 	movi	r3,22
   4cb30:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   4cb34:	00bffa84 	movi	r2,-22
   4cb38:	00001306 	br	4cb88 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4cb3c:	e0bffe17 	ldw	r2,-8(fp)
   4cb40:	e0ffff17 	ldw	r3,-4(fp)
   4cb44:	e0fffc15 	stw	r3,-16(fp)
   4cb48:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4cb4c:	e0bffd17 	ldw	r2,-12(fp)
   4cb50:	e0fffc17 	ldw	r3,-16(fp)
   4cb54:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4cb58:	e0bffc17 	ldw	r2,-16(fp)
   4cb5c:	10c00017 	ldw	r3,0(r2)
   4cb60:	e0bffd17 	ldw	r2,-12(fp)
   4cb64:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4cb68:	e0bffc17 	ldw	r2,-16(fp)
   4cb6c:	10800017 	ldw	r2,0(r2)
   4cb70:	e0fffd17 	ldw	r3,-12(fp)
   4cb74:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4cb78:	e0bffc17 	ldw	r2,-16(fp)
   4cb7c:	e0fffd17 	ldw	r3,-12(fp)
   4cb80:	10c00015 	stw	r3,0(r2)

  return 0;  
   4cb84:	0005883a 	mov	r2,zero
}
   4cb88:	e037883a 	mov	sp,fp
   4cb8c:	dfc00117 	ldw	ra,4(sp)
   4cb90:	df000017 	ldw	fp,0(sp)
   4cb94:	dec00204 	addi	sp,sp,8
   4cb98:	f800283a 	ret

0004cb9c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4cb9c:	defffd04 	addi	sp,sp,-12
   4cba0:	dfc00215 	stw	ra,8(sp)
   4cba4:	df000115 	stw	fp,4(sp)
   4cba8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4cbac:	00800174 	movhi	r2,5
   4cbb0:	10b5e804 	addi	r2,r2,-10336
   4cbb4:	e0bfff15 	stw	r2,-4(fp)
   4cbb8:	00000606 	br	4cbd4 <_do_ctors+0x38>
        (*ctor) (); 
   4cbbc:	e0bfff17 	ldw	r2,-4(fp)
   4cbc0:	10800017 	ldw	r2,0(r2)
   4cbc4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4cbc8:	e0bfff17 	ldw	r2,-4(fp)
   4cbcc:	10bfff04 	addi	r2,r2,-4
   4cbd0:	e0bfff15 	stw	r2,-4(fp)
   4cbd4:	e0ffff17 	ldw	r3,-4(fp)
   4cbd8:	00800174 	movhi	r2,5
   4cbdc:	10b5e904 	addi	r2,r2,-10332
   4cbe0:	18bff62e 	bgeu	r3,r2,4cbbc <__alt_data_end+0xfffd705c>
        (*ctor) (); 
}
   4cbe4:	e037883a 	mov	sp,fp
   4cbe8:	dfc00117 	ldw	ra,4(sp)
   4cbec:	df000017 	ldw	fp,0(sp)
   4cbf0:	dec00204 	addi	sp,sp,8
   4cbf4:	f800283a 	ret

0004cbf8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4cbf8:	defffd04 	addi	sp,sp,-12
   4cbfc:	dfc00215 	stw	ra,8(sp)
   4cc00:	df000115 	stw	fp,4(sp)
   4cc04:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4cc08:	00800174 	movhi	r2,5
   4cc0c:	10b5e804 	addi	r2,r2,-10336
   4cc10:	e0bfff15 	stw	r2,-4(fp)
   4cc14:	00000606 	br	4cc30 <_do_dtors+0x38>
        (*dtor) (); 
   4cc18:	e0bfff17 	ldw	r2,-4(fp)
   4cc1c:	10800017 	ldw	r2,0(r2)
   4cc20:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4cc24:	e0bfff17 	ldw	r2,-4(fp)
   4cc28:	10bfff04 	addi	r2,r2,-4
   4cc2c:	e0bfff15 	stw	r2,-4(fp)
   4cc30:	e0ffff17 	ldw	r3,-4(fp)
   4cc34:	00800174 	movhi	r2,5
   4cc38:	10b5e904 	addi	r2,r2,-10332
   4cc3c:	18bff62e 	bgeu	r3,r2,4cc18 <__alt_data_end+0xfffd70b8>
        (*dtor) (); 
}
   4cc40:	e037883a 	mov	sp,fp
   4cc44:	dfc00117 	ldw	ra,4(sp)
   4cc48:	df000017 	ldw	fp,0(sp)
   4cc4c:	dec00204 	addi	sp,sp,8
   4cc50:	f800283a 	ret

0004cc54 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4cc54:	defffe04 	addi	sp,sp,-8
   4cc58:	dfc00115 	stw	ra,4(sp)
   4cc5c:	df000015 	stw	fp,0(sp)
   4cc60:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   4cc64:	0009883a 	mov	r4,zero
   4cc68:	01440004 	movi	r5,4096
   4cc6c:	004d3a40 	call	4d3a4 <alt_icache_flush>
#endif
}
   4cc70:	e037883a 	mov	sp,fp
   4cc74:	dfc00117 	ldw	ra,4(sp)
   4cc78:	df000017 	ldw	fp,0(sp)
   4cc7c:	dec00204 	addi	sp,sp,8
   4cc80:	f800283a 	ret

0004cc84 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   4cc84:	defffe04 	addi	sp,sp,-8
   4cc88:	df000115 	stw	fp,4(sp)
   4cc8c:	df000104 	addi	fp,sp,4
   4cc90:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   4cc94:	e0bfff17 	ldw	r2,-4(fp)
   4cc98:	10bffe84 	addi	r2,r2,-6
   4cc9c:	10c00428 	cmpgeui	r3,r2,16
   4cca0:	18001b1e 	bne	r3,zero,4cd10 <alt_exception_cause_generated_bad_addr+0x8c>
   4cca4:	1085883a 	add	r2,r2,r2
   4cca8:	1087883a 	add	r3,r2,r2
   4ccac:	00800174 	movhi	r2,5
   4ccb0:	10b33004 	addi	r2,r2,-13120
   4ccb4:	1885883a 	add	r2,r3,r2
   4ccb8:	10800017 	ldw	r2,0(r2)
   4ccbc:	1000683a 	jmp	r2
   4ccc0:	0004cd00 	call	4cd0 <__reset-0x3b330>
   4ccc4:	0004cd00 	call	4cd0 <__reset-0x3b330>
   4ccc8:	0004cd10 	cmplti	zero,zero,4916
   4cccc:	0004cd10 	cmplti	zero,zero,4916
   4ccd0:	0004cd10 	cmplti	zero,zero,4916
   4ccd4:	0004cd00 	call	4cd0 <__reset-0x3b330>
   4ccd8:	0004cd08 	cmpgei	zero,zero,4916
   4ccdc:	0004cd10 	cmplti	zero,zero,4916
   4cce0:	0004cd00 	call	4cd0 <__reset-0x3b330>
   4cce4:	0004cd00 	call	4cd0 <__reset-0x3b330>
   4cce8:	0004cd10 	cmplti	zero,zero,4916
   4ccec:	0004cd00 	call	4cd0 <__reset-0x3b330>
   4ccf0:	0004cd08 	cmpgei	zero,zero,4916
   4ccf4:	0004cd10 	cmplti	zero,zero,4916
   4ccf8:	0004cd10 	cmplti	zero,zero,4916
   4ccfc:	0004cd00 	call	4cd0 <__reset-0x3b330>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   4cd00:	00800044 	movi	r2,1
   4cd04:	00000306 	br	4cd14 <alt_exception_cause_generated_bad_addr+0x90>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   4cd08:	0005883a 	mov	r2,zero
   4cd0c:	00000106 	br	4cd14 <alt_exception_cause_generated_bad_addr+0x90>

  default:
    return 0;
   4cd10:	0005883a 	mov	r2,zero
  }
}
   4cd14:	e037883a 	mov	sp,fp
   4cd18:	df000017 	ldw	fp,0(sp)
   4cd1c:	dec00104 	addi	sp,sp,4
   4cd20:	f800283a 	ret

0004cd24 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4cd24:	defff904 	addi	sp,sp,-28
   4cd28:	dfc00615 	stw	ra,24(sp)
   4cd2c:	df000515 	stw	fp,20(sp)
   4cd30:	df000504 	addi	fp,sp,20
   4cd34:	e13ffc15 	stw	r4,-16(fp)
   4cd38:	e17ffd15 	stw	r5,-12(fp)
   4cd3c:	e1bffe15 	stw	r6,-8(fp)
   4cd40:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4cd44:	e13ffd17 	ldw	r4,-12(fp)
   4cd48:	e17ffe17 	ldw	r5,-8(fp)
   4cd4c:	e1bfff17 	ldw	r6,-4(fp)
   4cd50:	004cf780 	call	4cf78 <open>
   4cd54:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4cd58:	e0bffb17 	ldw	r2,-20(fp)
   4cd5c:	10001c16 	blt	r2,zero,4cdd0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   4cd60:	00c001f4 	movhi	r3,7
   4cd64:	18e67f04 	addi	r3,r3,-26116
   4cd68:	e0bffb17 	ldw	r2,-20(fp)
   4cd6c:	10800324 	muli	r2,r2,12
   4cd70:	1885883a 	add	r2,r3,r2
   4cd74:	10c00017 	ldw	r3,0(r2)
   4cd78:	e0bffc17 	ldw	r2,-16(fp)
   4cd7c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4cd80:	00c001f4 	movhi	r3,7
   4cd84:	18e67f04 	addi	r3,r3,-26116
   4cd88:	e0bffb17 	ldw	r2,-20(fp)
   4cd8c:	10800324 	muli	r2,r2,12
   4cd90:	1885883a 	add	r2,r3,r2
   4cd94:	10800104 	addi	r2,r2,4
   4cd98:	10c00017 	ldw	r3,0(r2)
   4cd9c:	e0bffc17 	ldw	r2,-16(fp)
   4cda0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4cda4:	00c001f4 	movhi	r3,7
   4cda8:	18e67f04 	addi	r3,r3,-26116
   4cdac:	e0bffb17 	ldw	r2,-20(fp)
   4cdb0:	10800324 	muli	r2,r2,12
   4cdb4:	1885883a 	add	r2,r3,r2
   4cdb8:	10800204 	addi	r2,r2,8
   4cdbc:	10c00017 	ldw	r3,0(r2)
   4cdc0:	e0bffc17 	ldw	r2,-16(fp)
   4cdc4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4cdc8:	e13ffb17 	ldw	r4,-20(fp)
   4cdcc:	004d0cc0 	call	4d0cc <alt_release_fd>
  }
} 
   4cdd0:	e037883a 	mov	sp,fp
   4cdd4:	dfc00117 	ldw	ra,4(sp)
   4cdd8:	df000017 	ldw	fp,0(sp)
   4cddc:	dec00204 	addi	sp,sp,8
   4cde0:	f800283a 	ret

0004cde4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4cde4:	defffb04 	addi	sp,sp,-20
   4cde8:	dfc00415 	stw	ra,16(sp)
   4cdec:	df000315 	stw	fp,12(sp)
   4cdf0:	df000304 	addi	fp,sp,12
   4cdf4:	e13ffd15 	stw	r4,-12(fp)
   4cdf8:	e17ffe15 	stw	r5,-8(fp)
   4cdfc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4ce00:	010001f4 	movhi	r4,7
   4ce04:	21268204 	addi	r4,r4,-26104
   4ce08:	e17ffd17 	ldw	r5,-12(fp)
   4ce0c:	01800044 	movi	r6,1
   4ce10:	01c07fc4 	movi	r7,511
   4ce14:	004cd240 	call	4cd24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4ce18:	010001f4 	movhi	r4,7
   4ce1c:	21267f04 	addi	r4,r4,-26116
   4ce20:	e17ffe17 	ldw	r5,-8(fp)
   4ce24:	000d883a 	mov	r6,zero
   4ce28:	01c07fc4 	movi	r7,511
   4ce2c:	004cd240 	call	4cd24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4ce30:	010001f4 	movhi	r4,7
   4ce34:	21268504 	addi	r4,r4,-26092
   4ce38:	e17fff17 	ldw	r5,-4(fp)
   4ce3c:	01800044 	movi	r6,1
   4ce40:	01c07fc4 	movi	r7,511
   4ce44:	004cd240 	call	4cd24 <alt_open_fd>
}  
   4ce48:	e037883a 	mov	sp,fp
   4ce4c:	dfc00117 	ldw	ra,4(sp)
   4ce50:	df000017 	ldw	fp,0(sp)
   4ce54:	dec00204 	addi	sp,sp,8
   4ce58:	f800283a 	ret

0004ce5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ce5c:	defffe04 	addi	sp,sp,-8
   4ce60:	dfc00115 	stw	ra,4(sp)
   4ce64:	df000015 	stw	fp,0(sp)
   4ce68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ce6c:	008001f4 	movhi	r2,7
   4ce70:	10a6ef04 	addi	r2,r2,-25668
   4ce74:	10800017 	ldw	r2,0(r2)
   4ce78:	10000526 	beq	r2,zero,4ce90 <alt_get_errno+0x34>
   4ce7c:	008001f4 	movhi	r2,7
   4ce80:	10a6ef04 	addi	r2,r2,-25668
   4ce84:	10800017 	ldw	r2,0(r2)
   4ce88:	103ee83a 	callr	r2
   4ce8c:	00000206 	br	4ce98 <alt_get_errno+0x3c>
   4ce90:	008001f4 	movhi	r2,7
   4ce94:	10af9f04 	addi	r2,r2,-16772
}
   4ce98:	e037883a 	mov	sp,fp
   4ce9c:	dfc00117 	ldw	ra,4(sp)
   4cea0:	df000017 	ldw	fp,0(sp)
   4cea4:	dec00204 	addi	sp,sp,8
   4cea8:	f800283a 	ret

0004ceac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4ceac:	defffd04 	addi	sp,sp,-12
   4ceb0:	df000215 	stw	fp,8(sp)
   4ceb4:	df000204 	addi	fp,sp,8
   4ceb8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4cebc:	e0bfff17 	ldw	r2,-4(fp)
   4cec0:	10800217 	ldw	r2,8(r2)
   4cec4:	10d00034 	orhi	r3,r2,16384
   4cec8:	e0bfff17 	ldw	r2,-4(fp)
   4cecc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4ced0:	e03ffe15 	stw	zero,-8(fp)
   4ced4:	00001d06 	br	4cf4c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4ced8:	00c001f4 	movhi	r3,7
   4cedc:	18e67f04 	addi	r3,r3,-26116
   4cee0:	e0bffe17 	ldw	r2,-8(fp)
   4cee4:	10800324 	muli	r2,r2,12
   4cee8:	1885883a 	add	r2,r3,r2
   4ceec:	10c00017 	ldw	r3,0(r2)
   4cef0:	e0bfff17 	ldw	r2,-4(fp)
   4cef4:	10800017 	ldw	r2,0(r2)
   4cef8:	1880111e 	bne	r3,r2,4cf40 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4cefc:	00c001f4 	movhi	r3,7
   4cf00:	18e67f04 	addi	r3,r3,-26116
   4cf04:	e0bffe17 	ldw	r2,-8(fp)
   4cf08:	10800324 	muli	r2,r2,12
   4cf0c:	1885883a 	add	r2,r3,r2
   4cf10:	10800204 	addi	r2,r2,8
   4cf14:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4cf18:	1000090e 	bge	r2,zero,4cf40 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4cf1c:	e0bffe17 	ldw	r2,-8(fp)
   4cf20:	10c00324 	muli	r3,r2,12
   4cf24:	008001f4 	movhi	r2,7
   4cf28:	10a67f04 	addi	r2,r2,-26116
   4cf2c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4cf30:	e0bfff17 	ldw	r2,-4(fp)
   4cf34:	18800226 	beq	r3,r2,4cf40 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4cf38:	00bffcc4 	movi	r2,-13
   4cf3c:	00000a06 	br	4cf68 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4cf40:	e0bffe17 	ldw	r2,-8(fp)
   4cf44:	10800044 	addi	r2,r2,1
   4cf48:	e0bffe15 	stw	r2,-8(fp)
   4cf4c:	008001f4 	movhi	r2,7
   4cf50:	10a6ee04 	addi	r2,r2,-25672
   4cf54:	10800017 	ldw	r2,0(r2)
   4cf58:	1007883a 	mov	r3,r2
   4cf5c:	e0bffe17 	ldw	r2,-8(fp)
   4cf60:	18bfdd2e 	bgeu	r3,r2,4ced8 <__alt_data_end+0xfffd7378>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4cf64:	0005883a 	mov	r2,zero
}
   4cf68:	e037883a 	mov	sp,fp
   4cf6c:	df000017 	ldw	fp,0(sp)
   4cf70:	dec00104 	addi	sp,sp,4
   4cf74:	f800283a 	ret

0004cf78 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4cf78:	defff604 	addi	sp,sp,-40
   4cf7c:	dfc00915 	stw	ra,36(sp)
   4cf80:	df000815 	stw	fp,32(sp)
   4cf84:	df000804 	addi	fp,sp,32
   4cf88:	e13ffd15 	stw	r4,-12(fp)
   4cf8c:	e17ffe15 	stw	r5,-8(fp)
   4cf90:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4cf94:	00bfffc4 	movi	r2,-1
   4cf98:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4cf9c:	00bffb44 	movi	r2,-19
   4cfa0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4cfa4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4cfa8:	e13ffd17 	ldw	r4,-12(fp)
   4cfac:	014001f4 	movhi	r5,7
   4cfb0:	2966ec04 	addi	r5,r5,-25680
   4cfb4:	004d14c0 	call	4d14c <alt_find_dev>
   4cfb8:	e0bff815 	stw	r2,-32(fp)
   4cfbc:	e0bff817 	ldw	r2,-32(fp)
   4cfc0:	1000051e 	bne	r2,zero,4cfd8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4cfc4:	e13ffd17 	ldw	r4,-12(fp)
   4cfc8:	004d1dc0 	call	4d1dc <alt_find_file>
   4cfcc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4cfd0:	00800044 	movi	r2,1
   4cfd4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4cfd8:	e0bff817 	ldw	r2,-32(fp)
   4cfdc:	10002926 	beq	r2,zero,4d084 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4cfe0:	e13ff817 	ldw	r4,-32(fp)
   4cfe4:	004d2f00 	call	4d2f0 <alt_get_fd>
   4cfe8:	e0bff915 	stw	r2,-28(fp)
   4cfec:	e0bff917 	ldw	r2,-28(fp)
   4cff0:	1000030e 	bge	r2,zero,4d000 <open+0x88>
    {
      status = index;
   4cff4:	e0bff917 	ldw	r2,-28(fp)
   4cff8:	e0bffa15 	stw	r2,-24(fp)
   4cffc:	00002306 	br	4d08c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   4d000:	e0bff917 	ldw	r2,-28(fp)
   4d004:	10c00324 	muli	r3,r2,12
   4d008:	008001f4 	movhi	r2,7
   4d00c:	10a67f04 	addi	r2,r2,-26116
   4d010:	1885883a 	add	r2,r3,r2
   4d014:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4d018:	e0fffe17 	ldw	r3,-8(fp)
   4d01c:	00900034 	movhi	r2,16384
   4d020:	10bfffc4 	addi	r2,r2,-1
   4d024:	1886703a 	and	r3,r3,r2
   4d028:	e0bffc17 	ldw	r2,-16(fp)
   4d02c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4d030:	e0bffb17 	ldw	r2,-20(fp)
   4d034:	1000051e 	bne	r2,zero,4d04c <open+0xd4>
   4d038:	e13ffc17 	ldw	r4,-16(fp)
   4d03c:	004ceac0 	call	4ceac <alt_file_locked>
   4d040:	e0bffa15 	stw	r2,-24(fp)
   4d044:	e0bffa17 	ldw	r2,-24(fp)
   4d048:	10001016 	blt	r2,zero,4d08c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4d04c:	e0bff817 	ldw	r2,-32(fp)
   4d050:	10800317 	ldw	r2,12(r2)
   4d054:	10000826 	beq	r2,zero,4d078 <open+0x100>
   4d058:	e0bff817 	ldw	r2,-32(fp)
   4d05c:	10800317 	ldw	r2,12(r2)
   4d060:	e13ffc17 	ldw	r4,-16(fp)
   4d064:	e17ffd17 	ldw	r5,-12(fp)
   4d068:	e1bffe17 	ldw	r6,-8(fp)
   4d06c:	e1ffff17 	ldw	r7,-4(fp)
   4d070:	103ee83a 	callr	r2
   4d074:	00000106 	br	4d07c <open+0x104>
   4d078:	0005883a 	mov	r2,zero
   4d07c:	e0bffa15 	stw	r2,-24(fp)
   4d080:	00000206 	br	4d08c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4d084:	00bffb44 	movi	r2,-19
   4d088:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4d08c:	e0bffa17 	ldw	r2,-24(fp)
   4d090:	1000080e 	bge	r2,zero,4d0b4 <open+0x13c>
  {
    alt_release_fd (index);  
   4d094:	e13ff917 	ldw	r4,-28(fp)
   4d098:	004d0cc0 	call	4d0cc <alt_release_fd>
    ALT_ERRNO = -status;
   4d09c:	004ce5c0 	call	4ce5c <alt_get_errno>
   4d0a0:	e0fffa17 	ldw	r3,-24(fp)
   4d0a4:	00c7c83a 	sub	r3,zero,r3
   4d0a8:	10c00015 	stw	r3,0(r2)
    return -1;
   4d0ac:	00bfffc4 	movi	r2,-1
   4d0b0:	00000106 	br	4d0b8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   4d0b4:	e0bff917 	ldw	r2,-28(fp)
}
   4d0b8:	e037883a 	mov	sp,fp
   4d0bc:	dfc00117 	ldw	ra,4(sp)
   4d0c0:	df000017 	ldw	fp,0(sp)
   4d0c4:	dec00204 	addi	sp,sp,8
   4d0c8:	f800283a 	ret

0004d0cc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4d0cc:	defffe04 	addi	sp,sp,-8
   4d0d0:	df000115 	stw	fp,4(sp)
   4d0d4:	df000104 	addi	fp,sp,4
   4d0d8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4d0dc:	e0bfff17 	ldw	r2,-4(fp)
   4d0e0:	108000d0 	cmplti	r2,r2,3
   4d0e4:	10000d1e 	bne	r2,zero,4d11c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4d0e8:	00c001f4 	movhi	r3,7
   4d0ec:	18e67f04 	addi	r3,r3,-26116
   4d0f0:	e0bfff17 	ldw	r2,-4(fp)
   4d0f4:	10800324 	muli	r2,r2,12
   4d0f8:	1885883a 	add	r2,r3,r2
   4d0fc:	10800204 	addi	r2,r2,8
   4d100:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4d104:	00c001f4 	movhi	r3,7
   4d108:	18e67f04 	addi	r3,r3,-26116
   4d10c:	e0bfff17 	ldw	r2,-4(fp)
   4d110:	10800324 	muli	r2,r2,12
   4d114:	1885883a 	add	r2,r3,r2
   4d118:	10000015 	stw	zero,0(r2)
  }
}
   4d11c:	e037883a 	mov	sp,fp
   4d120:	df000017 	ldw	fp,0(sp)
   4d124:	dec00104 	addi	sp,sp,4
   4d128:	f800283a 	ret

0004d12c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   4d12c:	deffff04 	addi	sp,sp,-4
   4d130:	df000015 	stw	fp,0(sp)
   4d134:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4d138:	000170fa 	wrctl	ienable,zero
}
   4d13c:	e037883a 	mov	sp,fp
   4d140:	df000017 	ldw	fp,0(sp)
   4d144:	dec00104 	addi	sp,sp,4
   4d148:	f800283a 	ret

0004d14c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4d14c:	defffa04 	addi	sp,sp,-24
   4d150:	dfc00515 	stw	ra,20(sp)
   4d154:	df000415 	stw	fp,16(sp)
   4d158:	df000404 	addi	fp,sp,16
   4d15c:	e13ffe15 	stw	r4,-8(fp)
   4d160:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4d164:	e0bfff17 	ldw	r2,-4(fp)
   4d168:	10800017 	ldw	r2,0(r2)
   4d16c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4d170:	e13ffe17 	ldw	r4,-8(fp)
   4d174:	004a61c0 	call	4a61c <strlen>
   4d178:	10800044 	addi	r2,r2,1
   4d17c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4d180:	00000d06 	br	4d1b8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4d184:	e0bffc17 	ldw	r2,-16(fp)
   4d188:	10c00217 	ldw	r3,8(r2)
   4d18c:	e0bffd17 	ldw	r2,-12(fp)
   4d190:	1809883a 	mov	r4,r3
   4d194:	e17ffe17 	ldw	r5,-8(fp)
   4d198:	100d883a 	mov	r6,r2
   4d19c:	004d4640 	call	4d464 <memcmp>
   4d1a0:	1000021e 	bne	r2,zero,4d1ac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4d1a4:	e0bffc17 	ldw	r2,-16(fp)
   4d1a8:	00000706 	br	4d1c8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4d1ac:	e0bffc17 	ldw	r2,-16(fp)
   4d1b0:	10800017 	ldw	r2,0(r2)
   4d1b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4d1b8:	e0fffc17 	ldw	r3,-16(fp)
   4d1bc:	e0bfff17 	ldw	r2,-4(fp)
   4d1c0:	18bff01e 	bne	r3,r2,4d184 <__alt_data_end+0xfffd7624>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4d1c4:	0005883a 	mov	r2,zero
}
   4d1c8:	e037883a 	mov	sp,fp
   4d1cc:	dfc00117 	ldw	ra,4(sp)
   4d1d0:	df000017 	ldw	fp,0(sp)
   4d1d4:	dec00204 	addi	sp,sp,8
   4d1d8:	f800283a 	ret

0004d1dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4d1dc:	defffb04 	addi	sp,sp,-20
   4d1e0:	dfc00415 	stw	ra,16(sp)
   4d1e4:	df000315 	stw	fp,12(sp)
   4d1e8:	df000304 	addi	fp,sp,12
   4d1ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4d1f0:	008001f4 	movhi	r2,7
   4d1f4:	10a6ea04 	addi	r2,r2,-25688
   4d1f8:	10800017 	ldw	r2,0(r2)
   4d1fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4d200:	00003106 	br	4d2c8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   4d204:	e0bffd17 	ldw	r2,-12(fp)
   4d208:	10800217 	ldw	r2,8(r2)
   4d20c:	1009883a 	mov	r4,r2
   4d210:	004a61c0 	call	4a61c <strlen>
   4d214:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4d218:	e0bffd17 	ldw	r2,-12(fp)
   4d21c:	10c00217 	ldw	r3,8(r2)
   4d220:	e0bffe17 	ldw	r2,-8(fp)
   4d224:	10bfffc4 	addi	r2,r2,-1
   4d228:	1885883a 	add	r2,r3,r2
   4d22c:	10800003 	ldbu	r2,0(r2)
   4d230:	10803fcc 	andi	r2,r2,255
   4d234:	1080201c 	xori	r2,r2,128
   4d238:	10bfe004 	addi	r2,r2,-128
   4d23c:	10800bd8 	cmpnei	r2,r2,47
   4d240:	1000031e 	bne	r2,zero,4d250 <alt_find_file+0x74>
    {
      len -= 1;
   4d244:	e0bffe17 	ldw	r2,-8(fp)
   4d248:	10bfffc4 	addi	r2,r2,-1
   4d24c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4d250:	e0bffe17 	ldw	r2,-8(fp)
   4d254:	e0ffff17 	ldw	r3,-4(fp)
   4d258:	1885883a 	add	r2,r3,r2
   4d25c:	10800003 	ldbu	r2,0(r2)
   4d260:	10803fcc 	andi	r2,r2,255
   4d264:	1080201c 	xori	r2,r2,128
   4d268:	10bfe004 	addi	r2,r2,-128
   4d26c:	10800be0 	cmpeqi	r2,r2,47
   4d270:	1000081e 	bne	r2,zero,4d294 <alt_find_file+0xb8>
   4d274:	e0bffe17 	ldw	r2,-8(fp)
   4d278:	e0ffff17 	ldw	r3,-4(fp)
   4d27c:	1885883a 	add	r2,r3,r2
   4d280:	10800003 	ldbu	r2,0(r2)
   4d284:	10803fcc 	andi	r2,r2,255
   4d288:	1080201c 	xori	r2,r2,128
   4d28c:	10bfe004 	addi	r2,r2,-128
   4d290:	10000a1e 	bne	r2,zero,4d2bc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   4d294:	e0bffd17 	ldw	r2,-12(fp)
   4d298:	10c00217 	ldw	r3,8(r2)
   4d29c:	e0bffe17 	ldw	r2,-8(fp)
   4d2a0:	1809883a 	mov	r4,r3
   4d2a4:	e17fff17 	ldw	r5,-4(fp)
   4d2a8:	100d883a 	mov	r6,r2
   4d2ac:	004d4640 	call	4d464 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4d2b0:	1000021e 	bne	r2,zero,4d2bc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4d2b4:	e0bffd17 	ldw	r2,-12(fp)
   4d2b8:	00000806 	br	4d2dc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   4d2bc:	e0bffd17 	ldw	r2,-12(fp)
   4d2c0:	10800017 	ldw	r2,0(r2)
   4d2c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4d2c8:	e0fffd17 	ldw	r3,-12(fp)
   4d2cc:	008001f4 	movhi	r2,7
   4d2d0:	10a6ea04 	addi	r2,r2,-25688
   4d2d4:	18bfcb1e 	bne	r3,r2,4d204 <__alt_data_end+0xfffd76a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4d2d8:	0005883a 	mov	r2,zero
}
   4d2dc:	e037883a 	mov	sp,fp
   4d2e0:	dfc00117 	ldw	ra,4(sp)
   4d2e4:	df000017 	ldw	fp,0(sp)
   4d2e8:	dec00204 	addi	sp,sp,8
   4d2ec:	f800283a 	ret

0004d2f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4d2f0:	defffc04 	addi	sp,sp,-16
   4d2f4:	df000315 	stw	fp,12(sp)
   4d2f8:	df000304 	addi	fp,sp,12
   4d2fc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4d300:	00bffa04 	movi	r2,-24
   4d304:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4d308:	e03ffd15 	stw	zero,-12(fp)
   4d30c:	00001d06 	br	4d384 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   4d310:	00c001f4 	movhi	r3,7
   4d314:	18e67f04 	addi	r3,r3,-26116
   4d318:	e0bffd17 	ldw	r2,-12(fp)
   4d31c:	10800324 	muli	r2,r2,12
   4d320:	1885883a 	add	r2,r3,r2
   4d324:	10800017 	ldw	r2,0(r2)
   4d328:	1000131e 	bne	r2,zero,4d378 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   4d32c:	00c001f4 	movhi	r3,7
   4d330:	18e67f04 	addi	r3,r3,-26116
   4d334:	e0bffd17 	ldw	r2,-12(fp)
   4d338:	10800324 	muli	r2,r2,12
   4d33c:	1885883a 	add	r2,r3,r2
   4d340:	e0ffff17 	ldw	r3,-4(fp)
   4d344:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   4d348:	008001f4 	movhi	r2,7
   4d34c:	10a6ee04 	addi	r2,r2,-25672
   4d350:	10c00017 	ldw	r3,0(r2)
   4d354:	e0bffd17 	ldw	r2,-12(fp)
   4d358:	1880040e 	bge	r3,r2,4d36c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   4d35c:	008001f4 	movhi	r2,7
   4d360:	10a6ee04 	addi	r2,r2,-25672
   4d364:	e0fffd17 	ldw	r3,-12(fp)
   4d368:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   4d36c:	e0bffd17 	ldw	r2,-12(fp)
   4d370:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   4d374:	00000606 	br	4d390 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4d378:	e0bffd17 	ldw	r2,-12(fp)
   4d37c:	10800044 	addi	r2,r2,1
   4d380:	e0bffd15 	stw	r2,-12(fp)
   4d384:	e0bffd17 	ldw	r2,-12(fp)
   4d388:	10800810 	cmplti	r2,r2,32
   4d38c:	103fe01e 	bne	r2,zero,4d310 <__alt_data_end+0xfffd77b0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4d390:	e0bffe17 	ldw	r2,-8(fp)
}
   4d394:	e037883a 	mov	sp,fp
   4d398:	df000017 	ldw	fp,0(sp)
   4d39c:	dec00104 	addi	sp,sp,4
   4d3a0:	f800283a 	ret

0004d3a4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   4d3a4:	defffb04 	addi	sp,sp,-20
   4d3a8:	df000415 	stw	fp,16(sp)
   4d3ac:	df000404 	addi	fp,sp,16
   4d3b0:	e13ffe15 	stw	r4,-8(fp)
   4d3b4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   4d3b8:	e0bfff17 	ldw	r2,-4(fp)
   4d3bc:	10840070 	cmpltui	r2,r2,4097
   4d3c0:	1000021e 	bne	r2,zero,4d3cc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   4d3c4:	00840004 	movi	r2,4096
   4d3c8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   4d3cc:	e0fffe17 	ldw	r3,-8(fp)
   4d3d0:	e0bfff17 	ldw	r2,-4(fp)
   4d3d4:	1885883a 	add	r2,r3,r2
   4d3d8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4d3dc:	e0bffe17 	ldw	r2,-8(fp)
   4d3e0:	e0bffc15 	stw	r2,-16(fp)
   4d3e4:	00000506 	br	4d3fc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4d3e8:	e0bffc17 	ldw	r2,-16(fp)
   4d3ec:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4d3f0:	e0bffc17 	ldw	r2,-16(fp)
   4d3f4:	10800804 	addi	r2,r2,32
   4d3f8:	e0bffc15 	stw	r2,-16(fp)
   4d3fc:	e0fffc17 	ldw	r3,-16(fp)
   4d400:	e0bffd17 	ldw	r2,-12(fp)
   4d404:	18bff836 	bltu	r3,r2,4d3e8 <__alt_data_end+0xfffd7888>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4d408:	e0bffe17 	ldw	r2,-8(fp)
   4d40c:	108007cc 	andi	r2,r2,31
   4d410:	10000226 	beq	r2,zero,4d41c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   4d414:	e0bffc17 	ldw	r2,-16(fp)
   4d418:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4d41c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   4d420:	e037883a 	mov	sp,fp
   4d424:	df000017 	ldw	fp,0(sp)
   4d428:	dec00104 	addi	sp,sp,4
   4d42c:	f800283a 	ret

0004d430 <atexit>:
   4d430:	200b883a 	mov	r5,r4
   4d434:	000d883a 	mov	r6,zero
   4d438:	0009883a 	mov	r4,zero
   4d43c:	000f883a 	mov	r7,zero
   4d440:	004d4941 	jmpi	4d494 <__register_exitproc>

0004d444 <exit>:
   4d444:	defffe04 	addi	sp,sp,-8
   4d448:	000b883a 	mov	r5,zero
   4d44c:	dc000015 	stw	r16,0(sp)
   4d450:	dfc00115 	stw	ra,4(sp)
   4d454:	2021883a 	mov	r16,r4
   4d458:	004d5d80 	call	4d5d8 <__call_exitprocs>
   4d45c:	8009883a 	mov	r4,r16
   4d460:	004d7700 	call	4d770 <_exit>

0004d464 <memcmp>:
   4d464:	218d883a 	add	r6,r4,r6
   4d468:	21800826 	beq	r4,r6,4d48c <memcmp+0x28>
   4d46c:	20c00003 	ldbu	r3,0(r4)
   4d470:	28800003 	ldbu	r2,0(r5)
   4d474:	18800226 	beq	r3,r2,4d480 <memcmp+0x1c>
   4d478:	1885c83a 	sub	r2,r3,r2
   4d47c:	f800283a 	ret
   4d480:	21000044 	addi	r4,r4,1
   4d484:	29400044 	addi	r5,r5,1
   4d488:	003ff706 	br	4d468 <__alt_data_end+0xfffd7908>
   4d48c:	0005883a 	mov	r2,zero
   4d490:	f800283a 	ret

0004d494 <__register_exitproc>:
   4d494:	defff904 	addi	sp,sp,-28
   4d498:	008001f4 	movhi	r2,7
   4d49c:	10a6e204 	addi	r2,r2,-25720
   4d4a0:	dc400115 	stw	r17,4(sp)
   4d4a4:	14400017 	ldw	r17,0(r2)
   4d4a8:	dc000015 	stw	r16,0(sp)
   4d4ac:	dd400515 	stw	r21,20(sp)
   4d4b0:	8c000c17 	ldw	r16,48(r17)
   4d4b4:	dd000415 	stw	r20,16(sp)
   4d4b8:	dcc00315 	stw	r19,12(sp)
   4d4bc:	dc800215 	stw	r18,8(sp)
   4d4c0:	dfc00615 	stw	ra,24(sp)
   4d4c4:	2025883a 	mov	r18,r4
   4d4c8:	2827883a 	mov	r19,r5
   4d4cc:	302b883a 	mov	r21,r6
   4d4d0:	3829883a 	mov	r20,r7
   4d4d4:	8000021e 	bne	r16,zero,4d4e0 <__register_exitproc+0x4c>
   4d4d8:	8c000d04 	addi	r16,r17,52
   4d4dc:	8c000c15 	stw	r16,48(r17)
   4d4e0:	80800117 	ldw	r2,4(r16)
   4d4e4:	00c007c4 	movi	r3,31
   4d4e8:	18800d0e 	bge	r3,r2,4d520 <__register_exitproc+0x8c>
   4d4ec:	00800174 	movhi	r2,5
   4d4f0:	10a73104 	addi	r2,r2,-25404
   4d4f4:	1000021e 	bne	r2,zero,4d500 <__register_exitproc+0x6c>
   4d4f8:	00bfffc4 	movi	r2,-1
   4d4fc:	00002d06 	br	4d5b4 <__register_exitproc+0x120>
   4d500:	01002304 	movi	r4,140
   4d504:	0049cc40 	call	49cc4 <malloc>
   4d508:	1021883a 	mov	r16,r2
   4d50c:	103ffa26 	beq	r2,zero,4d4f8 <__alt_data_end+0xfffd7998>
   4d510:	10000115 	stw	zero,4(r2)
   4d514:	88800c17 	ldw	r2,48(r17)
   4d518:	80800015 	stw	r2,0(r16)
   4d51c:	8c000c15 	stw	r16,48(r17)
   4d520:	90001b26 	beq	r18,zero,4d590 <__register_exitproc+0xfc>
   4d524:	80802217 	ldw	r2,136(r16)
   4d528:	1000091e 	bne	r2,zero,4d550 <__register_exitproc+0xbc>
   4d52c:	00800174 	movhi	r2,5
   4d530:	10a73104 	addi	r2,r2,-25404
   4d534:	103ff026 	beq	r2,zero,4d4f8 <__alt_data_end+0xfffd7998>
   4d538:	01004204 	movi	r4,264
   4d53c:	103ee83a 	callr	r2
   4d540:	103fed26 	beq	r2,zero,4d4f8 <__alt_data_end+0xfffd7998>
   4d544:	10004015 	stw	zero,256(r2)
   4d548:	10004115 	stw	zero,260(r2)
   4d54c:	80802215 	stw	r2,136(r16)
   4d550:	80c00117 	ldw	r3,4(r16)
   4d554:	01400044 	movi	r5,1
   4d558:	18c9883a 	add	r4,r3,r3
   4d55c:	2109883a 	add	r4,r4,r4
   4d560:	1109883a 	add	r4,r2,r4
   4d564:	25400015 	stw	r21,0(r4)
   4d568:	28c6983a 	sll	r3,r5,r3
   4d56c:	11404017 	ldw	r5,256(r2)
   4d570:	28cab03a 	or	r5,r5,r3
   4d574:	11404015 	stw	r5,256(r2)
   4d578:	25002015 	stw	r20,128(r4)
   4d57c:	01000084 	movi	r4,2
   4d580:	9100031e 	bne	r18,r4,4d590 <__register_exitproc+0xfc>
   4d584:	11004117 	ldw	r4,260(r2)
   4d588:	20c6b03a 	or	r3,r4,r3
   4d58c:	10c04115 	stw	r3,260(r2)
   4d590:	80800117 	ldw	r2,4(r16)
   4d594:	10c00044 	addi	r3,r2,1
   4d598:	10800084 	addi	r2,r2,2
   4d59c:	1085883a 	add	r2,r2,r2
   4d5a0:	1085883a 	add	r2,r2,r2
   4d5a4:	80c00115 	stw	r3,4(r16)
   4d5a8:	80a1883a 	add	r16,r16,r2
   4d5ac:	84c00015 	stw	r19,0(r16)
   4d5b0:	0005883a 	mov	r2,zero
   4d5b4:	dfc00617 	ldw	ra,24(sp)
   4d5b8:	dd400517 	ldw	r21,20(sp)
   4d5bc:	dd000417 	ldw	r20,16(sp)
   4d5c0:	dcc00317 	ldw	r19,12(sp)
   4d5c4:	dc800217 	ldw	r18,8(sp)
   4d5c8:	dc400117 	ldw	r17,4(sp)
   4d5cc:	dc000017 	ldw	r16,0(sp)
   4d5d0:	dec00704 	addi	sp,sp,28
   4d5d4:	f800283a 	ret

0004d5d8 <__call_exitprocs>:
   4d5d8:	008001f4 	movhi	r2,7
   4d5dc:	10a6e204 	addi	r2,r2,-25720
   4d5e0:	10800017 	ldw	r2,0(r2)
   4d5e4:	defff304 	addi	sp,sp,-52
   4d5e8:	ddc00a15 	stw	r23,40(sp)
   4d5ec:	d8800015 	stw	r2,0(sp)
   4d5f0:	10800c04 	addi	r2,r2,48
   4d5f4:	dc800515 	stw	r18,20(sp)
   4d5f8:	dfc00c15 	stw	ra,48(sp)
   4d5fc:	df000b15 	stw	fp,44(sp)
   4d600:	dd800915 	stw	r22,36(sp)
   4d604:	dd400815 	stw	r21,32(sp)
   4d608:	dd000715 	stw	r20,28(sp)
   4d60c:	dcc00615 	stw	r19,24(sp)
   4d610:	dc400415 	stw	r17,16(sp)
   4d614:	dc000315 	stw	r16,12(sp)
   4d618:	d9000115 	stw	r4,4(sp)
   4d61c:	2825883a 	mov	r18,r5
   4d620:	d8800215 	stw	r2,8(sp)
   4d624:	05c00174 	movhi	r23,5
   4d628:	bde73604 	addi	r23,r23,-25384
   4d62c:	d8800017 	ldw	r2,0(sp)
   4d630:	dc000217 	ldw	r16,8(sp)
   4d634:	14c00c17 	ldw	r19,48(r2)
   4d638:	98004126 	beq	r19,zero,4d740 <__call_exitprocs+0x168>
   4d63c:	9c400117 	ldw	r17,4(r19)
   4d640:	9d002217 	ldw	r20,136(r19)
   4d644:	8d7fffc4 	addi	r21,r17,-1
   4d648:	8c400044 	addi	r17,r17,1
   4d64c:	ad4f883a 	add	r7,r21,r21
   4d650:	8c63883a 	add	r17,r17,r17
   4d654:	39cf883a 	add	r7,r7,r7
   4d658:	8c63883a 	add	r17,r17,r17
   4d65c:	a1ed883a 	add	r22,r20,r7
   4d660:	9c63883a 	add	r17,r19,r17
   4d664:	a8002616 	blt	r21,zero,4d700 <__call_exitprocs+0x128>
   4d668:	90000326 	beq	r18,zero,4d678 <__call_exitprocs+0xa0>
   4d66c:	a0002026 	beq	r20,zero,4d6f0 <__call_exitprocs+0x118>
   4d670:	b1002017 	ldw	r4,128(r22)
   4d674:	24801e1e 	bne	r4,r18,4d6f0 <__call_exitprocs+0x118>
   4d678:	99000117 	ldw	r4,4(r19)
   4d67c:	8a000017 	ldw	r8,0(r17)
   4d680:	213fffc4 	addi	r4,r4,-1
   4d684:	a900021e 	bne	r21,r4,4d690 <__call_exitprocs+0xb8>
   4d688:	9d400115 	stw	r21,4(r19)
   4d68c:	00000106 	br	4d694 <__call_exitprocs+0xbc>
   4d690:	88000015 	stw	zero,0(r17)
   4d694:	40001626 	beq	r8,zero,4d6f0 <__call_exitprocs+0x118>
   4d698:	9f000117 	ldw	fp,4(r19)
   4d69c:	a0000526 	beq	r20,zero,4d6b4 <__call_exitprocs+0xdc>
   4d6a0:	00800044 	movi	r2,1
   4d6a4:	1548983a 	sll	r4,r2,r21
   4d6a8:	a1404017 	ldw	r5,256(r20)
   4d6ac:	214a703a 	and	r5,r4,r5
   4d6b0:	2800021e 	bne	r5,zero,4d6bc <__call_exitprocs+0xe4>
   4d6b4:	403ee83a 	callr	r8
   4d6b8:	00000906 	br	4d6e0 <__call_exitprocs+0x108>
   4d6bc:	a1404117 	ldw	r5,260(r20)
   4d6c0:	2148703a 	and	r4,r4,r5
   4d6c4:	2000041e 	bne	r4,zero,4d6d8 <__call_exitprocs+0x100>
   4d6c8:	d9000117 	ldw	r4,4(sp)
   4d6cc:	b1400017 	ldw	r5,0(r22)
   4d6d0:	403ee83a 	callr	r8
   4d6d4:	00000206 	br	4d6e0 <__call_exitprocs+0x108>
   4d6d8:	b1000017 	ldw	r4,0(r22)
   4d6dc:	403ee83a 	callr	r8
   4d6e0:	99000117 	ldw	r4,4(r19)
   4d6e4:	e13fd11e 	bne	fp,r4,4d62c <__alt_data_end+0xfffd7acc>
   4d6e8:	81000017 	ldw	r4,0(r16)
   4d6ec:	24ffcf1e 	bne	r4,r19,4d62c <__alt_data_end+0xfffd7acc>
   4d6f0:	ad7fffc4 	addi	r21,r21,-1
   4d6f4:	b5bfff04 	addi	r22,r22,-4
   4d6f8:	8c7fff04 	addi	r17,r17,-4
   4d6fc:	003fd906 	br	4d664 <__alt_data_end+0xfffd7b04>
   4d700:	b8000f26 	beq	r23,zero,4d740 <__call_exitprocs+0x168>
   4d704:	99000117 	ldw	r4,4(r19)
   4d708:	98c00017 	ldw	r3,0(r19)
   4d70c:	2000091e 	bne	r4,zero,4d734 <__call_exitprocs+0x15c>
   4d710:	18000826 	beq	r3,zero,4d734 <__call_exitprocs+0x15c>
   4d714:	80c00015 	stw	r3,0(r16)
   4d718:	a0000226 	beq	r20,zero,4d724 <__call_exitprocs+0x14c>
   4d71c:	a009883a 	mov	r4,r20
   4d720:	0049cd80 	call	49cd8 <free>
   4d724:	9809883a 	mov	r4,r19
   4d728:	0049cd80 	call	49cd8 <free>
   4d72c:	84c00017 	ldw	r19,0(r16)
   4d730:	003fc106 	br	4d638 <__alt_data_end+0xfffd7ad8>
   4d734:	9821883a 	mov	r16,r19
   4d738:	1827883a 	mov	r19,r3
   4d73c:	003fbe06 	br	4d638 <__alt_data_end+0xfffd7ad8>
   4d740:	dfc00c17 	ldw	ra,48(sp)
   4d744:	df000b17 	ldw	fp,44(sp)
   4d748:	ddc00a17 	ldw	r23,40(sp)
   4d74c:	dd800917 	ldw	r22,36(sp)
   4d750:	dd400817 	ldw	r21,32(sp)
   4d754:	dd000717 	ldw	r20,28(sp)
   4d758:	dcc00617 	ldw	r19,24(sp)
   4d75c:	dc800517 	ldw	r18,20(sp)
   4d760:	dc400417 	ldw	r17,16(sp)
   4d764:	dc000317 	ldw	r16,12(sp)
   4d768:	dec00d04 	addi	sp,sp,52
   4d76c:	f800283a 	ret

0004d770 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4d770:	defffd04 	addi	sp,sp,-12
   4d774:	df000215 	stw	fp,8(sp)
   4d778:	df000204 	addi	fp,sp,8
   4d77c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4d780:	0001883a 	nop
   4d784:	e0bfff17 	ldw	r2,-4(fp)
   4d788:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   4d78c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4d790:	10000226 	beq	r2,zero,4d79c <_exit+0x2c>
    ALT_SIM_FAIL();
   4d794:	002af070 	cmpltui	zero,zero,43969
   4d798:	00000106 	br	4d7a0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   4d79c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4d7a0:	003fff06 	br	4d7a0 <__alt_data_end+0xfffd7c40>
